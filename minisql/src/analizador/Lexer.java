/* The following code was generated by JFlex 1.4.3 on 31/10/19 04:42 PM */


/* --------------------------Codigo de Usuario----------------------- */
package analizador;

import java_cup.runtime.*;
import java.io.Reader;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/10/19 04:42 PM from the specification file
 * <tt>C:/Users/jadel/Desktop/Compiladores-2019/minisql/src/analizador/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\71\1\37\1\0\1\0\1\71\22\0\1\71\1\51\1\0"+
    "\1\66\1\70\1\45\1\52\1\36\1\61\1\62\1\43\1\44\1\55"+
    "\1\41\1\56\1\42\1\2\11\2\1\0\1\54\1\46\1\47\1\50"+
    "\1\0\1\65\1\4\1\5\1\13\1\14\1\7\1\20\1\32\1\26"+
    "\1\17\1\34\1\31\1\6\1\25\1\12\1\15\1\16\1\33\1\10"+
    "\1\22\1\3\1\11\1\23\1\24\1\21\1\27\1\35\1\57\1\0"+
    "\1\60\1\0\1\30\1\0\4\1\1\67\25\1\1\63\1\53\1\64"+
    "\66\0\1\40\uff4b\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\26\3\1\2\1\1\1\2"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\2\2\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\1\1\32"+
    "\1\3\1\33\2\3\1\34\10\3\1\35\3\3\1\36"+
    "\17\3\1\37\15\3\1\40\1\3\1\41\1\3\1\42"+
    "\5\3\1\43\1\3\1\44\1\45\27\3\1\46\5\3"+
    "\1\47\1\3\1\50\3\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\2\0\5\3\1\72\5\3\1\73\1\3\1\74"+
    "\1\3\1\75\1\76\1\3\1\77\2\3\1\100\3\3"+
    "\1\101\2\3\1\102\14\3\1\103\14\3\1\104\33\3"+
    "\1\105\2\3\1\106\10\3\1\107\15\3\1\110\3\3"+
    "\1\111\2\3\1\112\15\3\1\113\3\3\1\114\2\3"+
    "\1\115\4\3\1\0\1\32\2\3\1\116\1\3\1\117"+
    "\1\120\12\3\1\121\3\3\1\122\1\3\1\123\2\3"+
    "\1\124\11\3\1\125\7\3\1\126\1\127\1\130\1\131"+
    "\2\3\1\132\21\3\1\133\2\3\1\134\6\3\1\135"+
    "\1\136\10\3\1\137\6\3\1\140\3\3\1\141\12\3"+
    "\1\142\1\143\4\3\1\144\2\3\1\145\1\3\1\146"+
    "\4\3\1\147\4\3\1\150\1\3\1\151\2\3\1\152"+
    "\12\3\1\153\1\53\1\154\5\3\1\155\1\156\5\3"+
    "\1\157\1\160\1\161\1\162\17\3\1\163\4\3\1\164"+
    "\2\3\1\165\5\3\1\166\2\3\1\167\4\3\1\170"+
    "\3\3\1\171\13\3\1\172\1\173\5\3\1\174\1\3"+
    "\1\175\5\3\1\176\1\3\1\177\1\3\1\200\5\3"+
    "\1\201\1\202\11\3\1\203\11\3\1\204\1\3\1\205"+
    "\1\206\11\3\1\207\6\3\1\210\1\3\1\211\1\212"+
    "\4\3\1\213\1\214\7\3\1\215\1\216\4\3\1\217"+
    "\1\220\1\221\3\3\1\222\3\3\1\223\1\3\1\224"+
    "\1\3\1\225\2\3\1\226\3\3\1\227\7\3\1\230"+
    "\1\231\14\3\1\232\15\3\1\233\1\3\1\234\2\3"+
    "\1\235\1\236\1\3\1\237\4\3\1\240\1\3\1\241"+
    "\1\242\1\243\1\244\1\245\14\3\1\246\1\3\1\247"+
    "\1\250\2\3\1\251\5\3\1\252\1\3\1\253\1\254"+
    "\1\3\1\255\1\256\2\3\1\257\1\260\6\3\1\261"+
    "\1\262\1\263\1\264\1\3\1\265\1\266\6\3\1\267"+
    "\1\3\1\270\2\3\1\271\1\272\1\273\10\3\1\274"+
    "\12\3\1\275\1\276\1\277\1\300\6\3\1\301\7\3"+
    "\1\302\5\3\1\303\6\3\1\304\2\3\1\305\3\3"+
    "\1\306\6\3\1\307\2\3\1\310\1\3\1\311\3\3"+
    "\1\312\1\313\2\3\1\314\5\3\1\315\1\3\1\316"+
    "\5\3\1\317\7\3\1\320\1\321\4\3\1\322\1\3"+
    "\1\323\14\3\1\324\1\325\1\326\1\327\7\3\1\330"+
    "\2\3\1\331\2\3\1\332\10\3\1\333\1\334\1\335"+
    "\1\3\1\336\1\337\4\3\1\340\1\341\4\3\1\342"+
    "\1\3\1\343\5\3\1\344\1\345\1\346\3\3\1\347"+
    "\1\3\1\350\5\3\1\351\1\3\1\352\1\353\1\354"+
    "\5\3\1\355\10\3\1\356\1\357\4\3\1\360\3\3"+
    "\1\361\2\3\1\362\1\363\1\364\2\3\1\365\12\3"+
    "\1\366\10\3\1\367\1\3\1\370\4\3\1\371\10\3"+
    "\1\372\1\3\1\373\11\3\1\374\1\3\1\375\16\3"+
    "\1\376\2\3\1\377\11\3\1\u0100\7\3\1\u0101";

  private static int [] zzUnpackAction() {
    int [] result = new int[1070];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\72\0\u061e\0\u0658\0\u0692\0\72"+
    "\0\72\0\72\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\72\0\72\0\u0828\0\u0862\0\72\0\u089c\0\72\0\u08d6"+
    "\0\72\0\72\0\u0910\0\72\0\u094a\0\u0984\0\u09be\0\164"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\164"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\164"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\164\0\164\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\164\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\164\0\u1cc6\0\164\0\u1d00\0\u1d3a\0\u1d74\0\164\0\u1dae"+
    "\0\u05e4\0\72\0\u061e\0\u1de8\0\u1e22\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u1fb8\0\164\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\164\0\u2188\0\164\0\164\0\u21c2\0\164"+
    "\0\u21fc\0\u2236\0\164\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358"+
    "\0\u2392\0\164\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be"+
    "\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e"+
    "\0\u28c8\0\u2902\0\u293c\0\164\0\u2976\0\u29b0\0\u29ea\0\u2a24"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94"+
    "\0\u2fce\0\u3008\0\164\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a"+
    "\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa"+
    "\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\164\0\u3626\0\u3660"+
    "\0\164\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6"+
    "\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6"+
    "\0\u3a00\0\u3a3a\0\164\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c"+
    "\0\u3b96\0\u3bd0\0\u3c0a\0\u1e96\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2"+
    "\0\164\0\164\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e"+
    "\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\164\0\u3f70\0\u3faa\0\u3fe4"+
    "\0\164\0\u401e\0\u4058\0\u4092\0\u40cc\0\164\0\u4106\0\u4140"+
    "\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\164"+
    "\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\164"+
    "\0\164\0\164\0\u44a6\0\u44e0\0\u451a\0\164\0\u4554\0\u458e"+
    "\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724\0\u475e"+
    "\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4\0\164"+
    "\0\u492e\0\u4968\0\164\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a"+
    "\0\u4ac4\0\164\0\164\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6"+
    "\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6"+
    "\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\164\0\u4f4c"+
    "\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c"+
    "\0\u5156\0\164\0\164\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278"+
    "\0\u52b2\0\u52ec\0\164\0\u5326\0\164\0\u5360\0\u539a\0\u53d4"+
    "\0\u540e\0\164\0\u5448\0\u5482\0\u54bc\0\u54f6\0\164\0\u5530"+
    "\0\u556a\0\u55a4\0\u55de\0\164\0\u5618\0\u5652\0\u568c\0\u56c6"+
    "\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822\0\164\0\72"+
    "\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944\0\u597e\0\164\0\164"+
    "\0\u59b8\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0\0\164\0\164\0\164"+
    "\0\164\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36"+
    "\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc\0\u5e06"+
    "\0\164\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee\0\164\0\u5f28\0\u5f62"+
    "\0\164\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084\0\164\0\u60be"+
    "\0\u60f8\0\164\0\u6132\0\u616c\0\u61a6\0\u61e0\0\164\0\u621a"+
    "\0\u6254\0\u628e\0\164\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0"+
    "\0\u63ea\0\u6424\0\u645e\0\u6498\0\u64d2\0\u650c\0\164\0\164"+
    "\0\u6546\0\u6580\0\u65ba\0\u65f4\0\u662e\0\164\0\u6668\0\164"+
    "\0\u66a2\0\u66dc\0\u6716\0\u6750\0\u678a\0\164\0\u67c4\0\164"+
    "\0\u67fe\0\164\0\u6838\0\u6872\0\u68ac\0\u68e6\0\u6920\0\164"+
    "\0\u695a\0\u6994\0\u69ce\0\u6a08\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0"+
    "\0\u6b2a\0\u6b64\0\164\0\u6b9e\0\u6bd8\0\u6c12\0\u6c4c\0\u6c86"+
    "\0\u6cc0\0\u6cfa\0\u6d34\0\u6d6e\0\164\0\u6da8\0\164\0\164"+
    "\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca\0\u6f04\0\u6f3e\0\u6f78"+
    "\0\u6fb2\0\164\0\u6fec\0\u7026\0\u7060\0\u709a\0\u70d4\0\u710e"+
    "\0\u7148\0\u7182\0\164\0\164\0\u71bc\0\u71f6\0\u7230\0\u726a"+
    "\0\164\0\u72a4\0\u72de\0\u7318\0\u7352\0\u738c\0\u73c6\0\u7400"+
    "\0\u743a\0\164\0\164\0\u7474\0\u74ae\0\u74e8\0\u7522\0\164"+
    "\0\164\0\164\0\u755c\0\u7596\0\u75d0\0\164\0\u760a\0\u7644"+
    "\0\u767e\0\164\0\u76b8\0\164\0\u76f2\0\u772c\0\u7766\0\u77a0"+
    "\0\164\0\u77da\0\u7814\0\u784e\0\u7888\0\u78c2\0\u78fc\0\u7936"+
    "\0\u7970\0\u79aa\0\u79e4\0\u7a1e\0\164\0\164\0\u7a58\0\u7a92"+
    "\0\u7acc\0\u7b06\0\u7b40\0\u7b7a\0\u7bb4\0\u7bee\0\u7c28\0\u7c62"+
    "\0\u7c9c\0\u7cd6\0\u7d10\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8\0\u7e32"+
    "\0\u7e6c\0\u7ea6\0\u7ee0\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8\0\u8002"+
    "\0\164\0\u803c\0\164\0\u8076\0\u80b0\0\u80ea\0\164\0\u8124"+
    "\0\164\0\u815e\0\u8198\0\u81d2\0\u820c\0\164\0\u8246\0\164"+
    "\0\164\0\164\0\164\0\164\0\u8280\0\u82ba\0\u82f4\0\u832e"+
    "\0\u8368\0\u83a2\0\u83dc\0\u8416\0\u8450\0\u848a\0\u84c4\0\u84fe"+
    "\0\164\0\u8538\0\164\0\164\0\u8572\0\u85ac\0\164\0\u85e6"+
    "\0\u8620\0\u865a\0\u8694\0\u86ce\0\u8708\0\u8742\0\164\0\164"+
    "\0\u877c\0\164\0\164\0\u87b6\0\u87f0\0\164\0\164\0\u882a"+
    "\0\u8864\0\u889e\0\u88d8\0\u8912\0\u894c\0\164\0\164\0\164"+
    "\0\u8986\0\u89c0\0\164\0\164\0\u89fa\0\u8a34\0\u8a6e\0\u8aa8"+
    "\0\u8ae2\0\u8b1c\0\164\0\u8b56\0\164\0\u8b90\0\u8bca\0\164"+
    "\0\164\0\164\0\u8c04\0\u8c3e\0\u8c78\0\u8cb2\0\u8cec\0\u8d26"+
    "\0\u8d60\0\u8d9a\0\164\0\u8dd4\0\u8e0e\0\u8e48\0\u8e82\0\u8ebc"+
    "\0\u8ef6\0\u8f30\0\u8f6a\0\u8fa4\0\u8fde\0\164\0\164\0\164"+
    "\0\164\0\u9018\0\u9052\0\u908c\0\u90c6\0\u9100\0\u913a\0\164"+
    "\0\u9174\0\u91ae\0\u91e8\0\u9222\0\u925c\0\u9296\0\u92d0\0\164"+
    "\0\u930a\0\u9344\0\u937e\0\u93b8\0\u93f2\0\164\0\u942c\0\u9466"+
    "\0\u94a0\0\u94da\0\u9514\0\u954e\0\164\0\u9588\0\u95c2\0\164"+
    "\0\u95fc\0\u9636\0\u9670\0\164\0\u96aa\0\u96e4\0\u971e\0\u9758"+
    "\0\u9792\0\u97cc\0\164\0\u9806\0\u9840\0\164\0\u987a\0\164"+
    "\0\u98b4\0\u98ee\0\u9928\0\164\0\164\0\u9962\0\u999c\0\164"+
    "\0\u99d6\0\u9a10\0\u9a4a\0\u9a84\0\u9abe\0\164\0\u9af8\0\164"+
    "\0\u9b32\0\u9b6c\0\u9ba6\0\u9be0\0\u9c1a\0\164\0\u9c54\0\u9c8e"+
    "\0\u9cc8\0\u9d02\0\u9d3c\0\u9d76\0\u9db0\0\164\0\164\0\u9dea"+
    "\0\u9e24\0\u9e5e\0\u9e98\0\164\0\u9ed2\0\164\0\u9f0c\0\u9f46"+
    "\0\u9f80\0\u9fba\0\u9ff4\0\ua02e\0\ua068\0\ua0a2\0\ua0dc\0\ua116"+
    "\0\ua150\0\ua18a\0\164\0\164\0\164\0\164\0\ua1c4\0\ua1fe"+
    "\0\ua238\0\ua272\0\ua2ac\0\ua2e6\0\ua320\0\164\0\ua35a\0\ua394"+
    "\0\164\0\ua3ce\0\ua408\0\164\0\ua442\0\ua47c\0\ua4b6\0\ua4f0"+
    "\0\ua52a\0\ua564\0\ua59e\0\ua5d8\0\164\0\164\0\164\0\ua612"+
    "\0\164\0\164\0\ua64c\0\ua686\0\ua6c0\0\ua6fa\0\164\0\164"+
    "\0\ua734\0\ua76e\0\ua7a8\0\ua7e2\0\164\0\ua81c\0\164\0\ua856"+
    "\0\ua890\0\ua8ca\0\ua904\0\ua93e\0\164\0\ua978\0\164\0\ua9b2"+
    "\0\ua9ec\0\uaa26\0\164\0\uaa60\0\164\0\uaa9a\0\uaad4\0\uab0e"+
    "\0\uab48\0\uab82\0\164\0\uabbc\0\164\0\164\0\164\0\uabf6"+
    "\0\uac30\0\uac6a\0\uaca4\0\uacde\0\164\0\uad18\0\uad52\0\uad8c"+
    "\0\uadc6\0\uae00\0\uae3a\0\uae74\0\uaeae\0\164\0\164\0\uaee8"+
    "\0\uaf22\0\uaf5c\0\uaf96\0\164\0\uafd0\0\ub00a\0\ub044\0\164"+
    "\0\ub07e\0\ub0b8\0\164\0\164\0\164\0\ub0f2\0\ub12c\0\164"+
    "\0\ub166\0\ub1a0\0\ub1da\0\ub214\0\ub24e\0\ub288\0\ub2c2\0\ub2fc"+
    "\0\ub336\0\ub370\0\164\0\ub3aa\0\ub3e4\0\ub41e\0\ub458\0\ub492"+
    "\0\ub4cc\0\ub506\0\ub540\0\164\0\ub57a\0\164\0\ub5b4\0\ub5ee"+
    "\0\ub628\0\ub662\0\164\0\ub69c\0\ub6d6\0\ub710\0\ub74a\0\ub784"+
    "\0\ub7be\0\ub7f8\0\ub832\0\164\0\ub86c\0\164\0\ub8a6\0\ub8e0"+
    "\0\ub91a\0\ub954\0\ub98e\0\ub9c8\0\uba02\0\uba3c\0\uba76\0\164"+
    "\0\ubab0\0\164\0\ubaea\0\ubb24\0\ubb5e\0\ubb98\0\ubbd2\0\ubc0c"+
    "\0\ubc46\0\ubc80\0\ubcba\0\ubcf4\0\ubd2e\0\ubd68\0\ubda2\0\ubddc"+
    "\0\164\0\ube16\0\ube50\0\164\0\ube8a\0\ubec4\0\ubefe\0\ubf38"+
    "\0\ubf72\0\ubfac\0\ubfe6\0\uc020\0\uc05a\0\164\0\uc094\0\uc0ce"+
    "\0\uc108\0\uc142\0\uc17c\0\uc1b6\0\uc1f0\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1070];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\24\1\25\1\26\1\27\1\3"+
    "\1\2\1\30\1\31\1\3\1\32\1\3\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\3"+
    "\1\64\1\65\73\0\35\3\31\0\1\3\4\0\1\4"+
    "\53\0\1\66\14\0\3\3\1\67\1\70\1\3\1\71"+
    "\1\72\4\3\1\73\1\3\1\74\7\3\1\75\6\3"+
    "\31\0\1\3\3\0\2\3\1\76\1\3\1\77\1\100"+
    "\3\3\1\101\1\102\1\103\5\3\1\104\1\105\12\3"+
    "\31\0\1\3\3\0\6\3\1\106\7\3\1\107\7\3"+
    "\1\110\6\3\31\0\1\3\3\0\6\3\1\111\5\3"+
    "\1\112\1\3\1\113\16\3\31\0\1\3\3\0\11\3"+
    "\1\114\6\3\1\115\14\3\31\0\1\3\3\0\6\3"+
    "\1\116\5\3\1\117\1\3\1\120\16\3\31\0\1\3"+
    "\3\0\11\3\1\121\3\3\1\122\3\3\1\123\13\3"+
    "\31\0\1\3\3\0\3\3\1\124\2\3\1\125\1\3"+
    "\1\126\1\3\1\127\1\3\1\130\20\3\31\0\1\3"+
    "\3\0\3\3\1\131\1\3\1\132\1\133\1\134\1\135"+
    "\3\3\1\136\10\3\1\137\7\3\31\0\1\3\3\0"+
    "\3\3\1\140\2\3\1\141\1\142\6\3\1\143\7\3"+
    "\1\144\6\3\31\0\1\3\3\0\5\3\1\145\1\3"+
    "\1\146\1\147\1\150\3\3\1\151\1\3\1\152\3\3"+
    "\1\153\11\3\31\0\1\3\3\0\3\3\1\154\2\3"+
    "\1\155\1\156\6\3\1\157\16\3\31\0\1\3\3\0"+
    "\11\3\1\160\1\3\1\161\3\3\1\162\1\3\1\163"+
    "\7\3\1\164\3\3\31\0\1\3\3\0\3\3\1\165"+
    "\1\3\1\166\1\167\1\170\1\171\3\3\1\172\1\3"+
    "\1\173\16\3\31\0\1\3\3\0\2\3\1\174\1\175"+
    "\2\3\1\176\1\3\1\177\1\200\1\201\2\3\1\202"+
    "\1\203\5\3\1\204\10\3\31\0\1\3\3\0\3\3"+
    "\1\205\12\3\1\206\16\3\31\0\1\3\3\0\7\3"+
    "\1\207\6\3\1\210\6\3\1\211\7\3\31\0\1\3"+
    "\3\0\3\3\1\212\1\213\1\3\1\214\5\3\1\215"+
    "\1\3\1\216\16\3\31\0\1\3\3\0\3\3\1\217"+
    "\12\3\1\220\16\3\31\0\1\3\3\0\4\3\1\221"+
    "\1\3\1\222\26\3\31\0\1\3\3\0\4\3\1\223"+
    "\1\224\1\225\1\226\4\3\1\227\20\3\31\0\1\3"+
    "\3\0\14\3\1\230\20\3\31\0\1\3\2\0\36\231"+
    "\1\232\1\0\32\231\37\233\1\0\1\232\31\233\41\0"+
    "\1\234\73\0\1\235\75\0\1\236\1\237\70\0\1\240"+
    "\71\0\1\241\70\0\1\242\1\243\1\244\73\0\1\245"+
    "\72\0\1\246\74\0\1\247\73\0\1\250\73\0\1\251"+
    "\73\0\1\252\73\0\1\253\74\0\1\65\2\0\1\66"+
    "\4\0\1\254\31\0\1\255\2\0\1\255\6\0\1\254"+
    "\13\0\1\254\3\0\4\3\1\256\30\3\31\0\1\3"+
    "\3\0\20\3\1\257\14\3\31\0\1\3\3\0\3\3"+
    "\1\260\4\3\1\261\5\3\1\262\16\3\31\0\1\3"+
    "\3\0\15\3\1\263\17\3\31\0\1\3\3\0\24\3"+
    "\1\264\10\3\31\0\1\3\3\0\15\3\1\265\17\3"+
    "\31\0\1\3\3\0\2\3\1\266\32\3\31\0\1\3"+
    "\3\0\14\3\1\267\20\3\31\0\1\3\3\0\2\3"+
    "\1\270\2\3\1\271\15\3\1\272\11\3\31\0\1\3"+
    "\3\0\13\3\1\273\21\3\31\0\1\3\3\0\2\3"+
    "\1\274\32\3\31\0\1\3\3\0\13\3\1\275\21\3"+
    "\31\0\1\3\3\0\12\3\1\276\13\3\1\277\6\3"+
    "\31\0\1\3\3\0\31\3\1\300\3\3\31\0\1\3"+
    "\3\0\2\3\1\301\26\3\1\302\3\3\31\0\1\3"+
    "\3\0\2\3\1\303\32\3\31\0\1\3\3\0\17\3"+
    "\1\304\15\3\31\0\1\3\3\0\12\3\1\305\10\3"+
    "\1\306\5\3\1\307\3\3\31\0\1\3\3\0\30\3"+
    "\1\310\4\3\31\0\1\3\3\0\12\3\1\311\1\312"+
    "\21\3\31\0\1\3\3\0\6\3\1\313\7\3\1\314"+
    "\16\3\31\0\1\3\3\0\2\3\1\315\1\316\1\317"+
    "\5\3\1\320\1\3\1\321\1\322\1\3\1\323\1\3"+
    "\1\324\2\3\1\325\10\3\31\0\1\3\3\0\5\3"+
    "\1\326\15\3\1\327\11\3\31\0\1\3\3\0\31\3"+
    "\1\330\3\3\31\0\1\3\3\0\5\3\1\331\7\3"+
    "\1\332\1\333\16\3\31\0\1\3\3\0\13\3\1\334"+
    "\1\3\1\335\17\3\31\0\1\3\3\0\6\3\1\336"+
    "\26\3\31\0\1\3\3\0\24\3\1\337\10\3\31\0"+
    "\1\3\3\0\20\3\1\340\14\3\31\0\1\3\3\0"+
    "\5\3\1\341\16\3\1\342\10\3\31\0\1\3\3\0"+
    "\25\3\1\343\7\3\31\0\1\3\3\0\2\3\1\344"+
    "\6\3\1\345\1\346\22\3\31\0\1\3\3\0\5\3"+
    "\1\347\13\3\1\350\13\3\31\0\1\3\3\0\10\3"+
    "\1\351\3\3\1\352\20\3\31\0\1\3\3\0\7\3"+
    "\1\353\25\3\31\0\1\3\3\0\6\3\1\354\5\3"+
    "\1\355\20\3\31\0\1\3\3\0\7\3\1\356\25\3"+
    "\31\0\1\3\3\0\5\3\1\357\2\3\1\360\1\361"+
    "\12\3\1\362\10\3\31\0\1\3\3\0\3\3\1\363"+
    "\2\3\1\364\26\3\31\0\1\3\3\0\2\3\1\365"+
    "\32\3\31\0\1\3\3\0\3\3\1\366\1\3\1\367"+
    "\4\3\1\370\4\3\1\371\1\3\1\372\13\3\31\0"+
    "\1\3\3\0\14\3\1\373\20\3\31\0\1\3\3\0"+
    "\21\3\1\374\13\3\31\0\1\3\3\0\11\3\1\375"+
    "\23\3\31\0\1\3\3\0\13\3\1\376\21\3\31\0"+
    "\1\3\3\0\13\3\1\377\21\3\31\0\1\3\3\0"+
    "\2\3\1\u0100\32\3\31\0\1\3\3\0\2\3\1\u0101"+
    "\3\3\1\u0102\26\3\31\0\1\3\3\0\17\3\1\u0103"+
    "\15\3\31\0\1\3\3\0\11\3\1\u0104\23\3\31\0"+
    "\1\3\3\0\7\3\1\u0105\1\u0106\10\3\1\u0107\13\3"+
    "\31\0\1\3\3\0\7\3\1\u0108\25\3\31\0\1\3"+
    "\3\0\14\3\1\u0109\1\3\1\u010a\16\3\31\0\1\3"+
    "\3\0\22\3\1\u010b\12\3\31\0\1\3\3\0\2\3"+
    "\1\u010c\6\3\1\u010d\1\u010e\1\u010f\5\3\1\u0110\13\3"+
    "\31\0\1\3\3\0\6\3\1\u0111\26\3\31\0\1\3"+
    "\3\0\11\3\1\u0112\23\3\31\0\1\3\3\0\21\3"+
    "\1\u0113\13\3\31\0\1\3\3\0\14\3\1\u0114\20\3"+
    "\31\0\1\3\3\0\2\3\1\u0115\32\3\31\0\1\3"+
    "\3\0\6\3\1\u0116\5\3\1\u0117\20\3\31\0\1\3"+
    "\3\0\5\3\1\u0118\3\3\1\u0119\23\3\31\0\1\3"+
    "\3\0\7\3\1\u011a\25\3\31\0\1\3\3\0\5\3"+
    "\1\u011b\27\3\31\0\1\3\3\0\3\3\1\u011c\31\3"+
    "\31\0\1\3\3\0\22\3\1\u011d\12\3\31\0\1\3"+
    "\3\0\2\3\1\u011e\2\3\1\u011f\27\3\31\0\1\3"+
    "\3\0\4\3\1\u0120\17\3\1\u0121\10\3\31\0\1\3"+
    "\3\0\3\3\1\u0122\31\3\31\0\1\3\3\0\7\3"+
    "\1\u0123\25\3\31\0\1\3\3\0\3\3\1\u0124\31\3"+
    "\31\0\1\3\3\0\34\3\1\u0125\31\0\1\3\3\0"+
    "\3\3\1\u0126\31\3\31\0\1\3\3\0\5\3\1\u0127"+
    "\1\3\1\u0128\25\3\31\0\1\3\3\0\6\3\1\u0129"+
    "\26\3\31\0\1\3\3\0\16\3\1\u012a\16\3\31\0"+
    "\1\3\3\0\2\3\1\u012b\32\3\31\0\1\3\3\0"+
    "\6\3\1\u012c\7\3\1\u012d\16\3\31\0\1\3\3\0"+
    "\7\3\1\u012e\10\3\1\u012f\1\u0130\13\3\31\0\1\3"+
    "\3\0\24\3\1\u0131\10\3\31\0\1\3\3\0\13\3"+
    "\1\u0132\21\3\31\0\1\3\3\0\11\3\1\u0133\23\3"+
    "\31\0\1\3\3\0\22\3\1\u0134\12\3\31\0\1\3"+
    "\3\0\13\3\1\u0135\21\3\31\0\1\3\3\0\26\3"+
    "\1\u0136\6\3\31\0\1\3\3\0\14\3\1\u0137\20\3"+
    "\31\0\1\3\3\0\11\3\1\u0138\23\3\31\0\1\3"+
    "\3\0\14\3\1\u0139\20\3\31\0\1\3\3\0\16\3"+
    "\1\u013a\16\3\31\0\1\3\2\0\37\234\1\0\32\234"+
    "\43\235\1\u013b\26\235\2\0\1\u013c\36\0\1\255\2\0"+
    "\1\255\27\0\1\u013c\70\0\5\3\1\u013d\27\3\31\0"+
    "\1\3\3\0\2\3\1\u013e\32\3\31\0\1\3\3\0"+
    "\11\3\1\u013f\23\3\31\0\1\3\3\0\11\3\1\u0140"+
    "\23\3\31\0\1\3\3\0\24\3\1\u0141\10\3\31\0"+
    "\1\3\3\0\6\3\1\u0142\26\3\31\0\1\3\3\0"+
    "\6\3\1\u0143\26\3\31\0\1\3\3\0\3\3\1\u0144"+
    "\31\3\31\0\1\3\3\0\7\3\1\u0145\25\3\31\0"+
    "\1\3\3\0\6\3\1\u0146\26\3\31\0\1\3\3\0"+
    "\14\3\1\u0147\20\3\31\0\1\3\3\0\3\3\1\u0148"+
    "\31\3\31\0\1\3\3\0\16\3\1\u0149\16\3\31\0"+
    "\1\3\3\0\24\3\1\u014a\10\3\31\0\1\3\3\0"+
    "\23\3\1\u014b\11\3\31\0\1\3\3\0\16\3\1\u014c"+
    "\16\3\31\0\1\3\3\0\2\3\1\u014d\32\3\31\0"+
    "\1\3\3\0\3\3\1\u014e\31\3\31\0\1\3\3\0"+
    "\6\3\1\u014f\26\3\31\0\1\3\3\0\16\3\1\u0150"+
    "\16\3\31\0\1\3\3\0\6\3\1\u0151\26\3\31\0"+
    "\1\3\3\0\7\3\1\u0152\25\3\31\0\1\3\3\0"+
    "\12\3\1\u0153\22\3\31\0\1\3\3\0\21\3\1\u0154"+
    "\13\3\31\0\1\3\3\0\10\3\1\u0155\24\3\31\0"+
    "\1\3\3\0\5\3\1\u0156\5\3\1\u0157\21\3\31\0"+
    "\1\3\3\0\10\3\1\u0158\24\3\31\0\1\3\3\0"+
    "\14\3\1\u0159\20\3\31\0\1\3\3\0\7\3\1\u015a"+
    "\25\3\31\0\1\3\3\0\5\3\1\u015b\27\3\31\0"+
    "\1\3\3\0\6\3\1\u015c\26\3\31\0\1\3\3\0"+
    "\10\3\1\u015d\24\3\31\0\1\3\3\0\14\3\1\u015e"+
    "\20\3\31\0\1\3\3\0\5\3\1\u015f\27\3\31\0"+
    "\1\3\3\0\21\3\1\u0160\7\3\1\u0161\3\3\31\0"+
    "\1\3\3\0\25\3\1\u0162\7\3\31\0\1\3\3\0"+
    "\16\3\1\u0163\16\3\31\0\1\3\3\0\16\3\1\u0164"+
    "\16\3\31\0\1\3\3\0\32\3\1\u0165\2\3\31\0"+
    "\1\3\3\0\3\3\1\u0166\31\3\31\0\1\3\3\0"+
    "\6\3\1\u0167\26\3\31\0\1\3\3\0\7\3\1\u0168"+
    "\25\3\31\0\1\3\3\0\6\3\1\u0169\26\3\31\0"+
    "\1\3\3\0\2\3\1\u016a\32\3\31\0\1\3\3\0"+
    "\5\3\1\u016b\27\3\31\0\1\3\3\0\6\3\1\u016c"+
    "\26\3\31\0\1\3\3\0\3\3\1\u016d\31\3\31\0"+
    "\1\3\3\0\6\3\1\u016e\3\3\1\u016f\22\3\31\0"+
    "\1\3\3\0\25\3\1\u0170\7\3\31\0\1\3\3\0"+
    "\5\3\1\u0171\27\3\31\0\1\3\3\0\12\3\1\u0172"+
    "\22\3\31\0\1\3\3\0\21\3\1\u0173\13\3\31\0"+
    "\1\3\3\0\21\3\1\u0174\13\3\31\0\1\3\3\0"+
    "\2\3\1\u0175\32\3\31\0\1\3\3\0\3\3\1\u0176"+
    "\31\3\31\0\1\3\3\0\21\3\1\u0177\13\3\31\0"+
    "\1\3\3\0\7\3\1\u0178\11\3\1\u0179\13\3\31\0"+
    "\1\3\3\0\5\3\1\u017a\2\3\1\u017b\24\3\31\0"+
    "\1\3\3\0\11\3\1\u017c\23\3\31\0\1\3\3\0"+
    "\2\3\1\u017d\16\3\1\u017e\13\3\31\0\1\3\3\0"+
    "\24\3\1\u017f\10\3\31\0\1\3\3\0\7\3\1\u0180"+
    "\25\3\31\0\1\3\3\0\12\3\1\u0181\22\3\31\0"+
    "\1\3\3\0\3\3\1\u0182\2\3\1\u0183\26\3\31\0"+
    "\1\3\3\0\5\3\1\u0184\27\3\31\0\1\3\3\0"+
    "\3\3\1\u0185\2\3\1\u0186\26\3\31\0\1\3\3\0"+
    "\5\3\1\u0187\10\3\1\u0188\16\3\31\0\1\3\3\0"+
    "\3\3\1\u0189\31\3\31\0\1\3\3\0\12\3\1\u018a"+
    "\22\3\31\0\1\3\3\0\15\3\1\u018b\17\3\31\0"+
    "\1\3\3\0\2\3\1\u018c\1\u018d\31\3\31\0\1\3"+
    "\3\0\3\3\1\u018e\31\3\31\0\1\3\3\0\27\3"+
    "\1\u018f\5\3\31\0\1\3\3\0\6\3\1\u0190\26\3"+
    "\31\0\1\3\3\0\6\3\1\u0191\6\3\1\u0192\17\3"+
    "\31\0\1\3\3\0\16\3\1\u0193\16\3\31\0\1\3"+
    "\3\0\11\3\1\u0194\23\3\31\0\1\3\3\0\6\3"+
    "\1\u0195\26\3\31\0\1\3\3\0\2\3\1\u0196\32\3"+
    "\31\0\1\3\3\0\21\3\1\u0197\13\3\31\0\1\3"+
    "\3\0\21\3\1\u0198\13\3\31\0\1\3\3\0\12\3"+
    "\1\u0199\6\3\1\u019a\13\3\31\0\1\3\3\0\12\3"+
    "\1\u019b\22\3\31\0\1\3\3\0\24\3\1\u019c\10\3"+
    "\31\0\1\3\3\0\14\3\1\u019d\20\3\31\0\1\3"+
    "\3\0\6\3\1\u019e\5\3\1\u019f\20\3\31\0\1\3"+
    "\3\0\6\3\1\u01a0\26\3\31\0\1\3\3\0\5\3"+
    "\1\u01a1\27\3\31\0\1\3\3\0\6\3\1\u01a2\26\3"+
    "\31\0\1\3\3\0\6\3\1\u01a3\26\3\31\0\1\3"+
    "\3\0\11\3\1\u01a4\23\3\31\0\1\3\3\0\14\3"+
    "\1\u01a5\20\3\31\0\1\3\3\0\2\3\1\u01a6\32\3"+
    "\31\0\1\3\3\0\3\3\1\u01a7\31\3\31\0\1\3"+
    "\3\0\12\3\1\u01a8\22\3\31\0\1\3\3\0\6\3"+
    "\1\u01a9\26\3\31\0\1\3\3\0\24\3\1\u01aa\10\3"+
    "\31\0\1\3\3\0\5\3\1\u01ab\27\3\31\0\1\3"+
    "\3\0\12\3\1\u01ac\22\3\31\0\1\3\3\0\6\3"+
    "\1\u01ad\14\3\1\u01ae\11\3\31\0\1\3\3\0\5\3"+
    "\1\u01af\1\u01b0\26\3\31\0\1\3\3\0\2\3\1\u01b1"+
    "\4\3\1\u01b2\25\3\31\0\1\3\3\0\6\3\1\u01b3"+
    "\26\3\31\0\1\3\3\0\6\3\1\u01b4\10\3\1\u01b5"+
    "\15\3\31\0\1\3\3\0\21\3\1\u01b6\13\3\31\0"+
    "\1\3\3\0\15\3\1\u01b7\17\3\31\0\1\3\3\0"+
    "\14\3\1\u01b8\20\3\31\0\1\3\3\0\7\3\1\u01b9"+
    "\25\3\31\0\1\3\3\0\6\3\1\u01ba\26\3\31\0"+
    "\1\3\3\0\5\3\1\u01bb\27\3\31\0\1\3\3\0"+
    "\10\3\1\u01bc\24\3\31\0\1\3\3\0\12\3\1\u01bd"+
    "\13\3\1\u01be\6\3\31\0\1\3\3\0\23\3\1\u01bf"+
    "\11\3\31\0\1\3\3\0\2\3\1\u01c0\32\3\31\0"+
    "\1\3\3\0\25\3\1\u01c1\7\3\31\0\1\3\3\0"+
    "\7\3\1\u01c2\25\3\31\0\1\3\3\0\5\3\1\u01c3"+
    "\27\3\31\0\1\3\3\0\30\3\1\u01c4\4\3\31\0"+
    "\1\3\3\0\21\3\1\u01c5\13\3\31\0\1\3\3\0"+
    "\30\3\1\u01c6\4\3\31\0\1\3\3\0\14\3\1\u01c7"+
    "\20\3\31\0\1\3\3\0\16\3\1\u01c8\16\3\31\0"+
    "\1\3\3\0\16\3\1\u01c9\16\3\31\0\1\3\3\0"+
    "\13\3\1\u01ca\21\3\31\0\1\3\3\0\21\3\1\u01cb"+
    "\13\3\31\0\1\3\3\0\4\3\1\u01cc\30\3\31\0"+
    "\1\3\3\0\6\3\1\u01cd\26\3\31\0\1\3\3\0"+
    "\10\3\1\u01ce\24\3\31\0\1\3\3\0\11\3\1\u01cf"+
    "\23\3\31\0\1\3\2\0\42\235\1\u01d0\1\u013b\26\235"+
    "\1\0\6\3\1\u01d1\26\3\31\0\1\3\3\0\16\3"+
    "\1\u01d2\16\3\31\0\1\3\3\0\21\3\1\u01d3\13\3"+
    "\31\0\1\3\3\0\12\3\1\u01d4\22\3\31\0\1\3"+
    "\3\0\27\3\1\u01d5\5\3\31\0\1\3\3\0\12\3"+
    "\1\u01d6\22\3\31\0\1\3\3\0\2\3\1\u01d7\32\3"+
    "\31\0\1\3\3\0\7\3\1\u01d8\25\3\31\0\1\3"+
    "\3\0\23\3\1\u01d9\11\3\31\0\1\3\3\0\26\3"+
    "\1\u01da\6\3\31\0\1\3\3\0\14\3\1\u01db\20\3"+
    "\31\0\1\3\3\0\24\3\1\u01dc\10\3\31\0\1\3"+
    "\3\0\6\3\1\u01dd\26\3\31\0\1\3\3\0\11\3"+
    "\1\u01de\23\3\31\0\1\3\3\0\5\3\1\u01df\27\3"+
    "\31\0\1\3\3\0\7\3\1\u01e0\25\3\31\0\1\3"+
    "\3\0\11\3\1\u01e1\23\3\31\0\1\3\3\0\26\3"+
    "\1\u01e2\6\3\31\0\1\3\3\0\10\3\1\u01e3\24\3"+
    "\31\0\1\3\3\0\2\3\1\u01e4\32\3\31\0\1\3"+
    "\3\0\7\3\1\u01e5\25\3\31\0\1\3\3\0\14\3"+
    "\1\u01e6\12\3\1\u01e7\5\3\31\0\1\3\3\0\16\3"+
    "\1\u01e8\16\3\31\0\1\3\3\0\24\3\1\u01e9\10\3"+
    "\31\0\1\3\3\0\31\3\1\u01ea\3\3\31\0\1\3"+
    "\3\0\16\3\1\u01eb\16\3\31\0\1\3\3\0\7\3"+
    "\1\u01ec\25\3\31\0\1\3\3\0\24\3\1\u01ed\10\3"+
    "\31\0\1\3\3\0\22\3\1\u01ee\12\3\31\0\1\3"+
    "\3\0\4\3\1\u01ef\30\3\31\0\1\3\3\0\10\3"+
    "\1\u01f0\24\3\31\0\1\3\3\0\2\3\1\u01f1\32\3"+
    "\31\0\1\3\3\0\24\3\1\u01f2\10\3\31\0\1\3"+
    "\3\0\22\3\1\u01f3\12\3\31\0\1\3\3\0\10\3"+
    "\1\u01f4\24\3\31\0\1\3\3\0\2\3\1\u01f5\32\3"+
    "\31\0\1\3\3\0\7\3\1\u01f6\25\3\31\0\1\3"+
    "\3\0\16\3\1\u01f7\16\3\31\0\1\3\3\0\7\3"+
    "\1\u01f8\25\3\31\0\1\3\3\0\7\3\1\u01f9\25\3"+
    "\31\0\1\3\3\0\5\3\1\u01fa\27\3\31\0\1\3"+
    "\3\0\6\3\1\u01fb\26\3\31\0\1\3\3\0\6\3"+
    "\1\u01fc\26\3\31\0\1\3\3\0\3\3\1\u01fd\31\3"+
    "\31\0\1\3\3\0\2\3\1\u01fe\32\3\31\0\1\3"+
    "\3\0\6\3\1\u01ff\26\3\31\0\1\3\3\0\16\3"+
    "\1\u0200\16\3\31\0\1\3\3\0\2\3\1\u0201\32\3"+
    "\31\0\1\3\3\0\21\3\1\u0202\13\3\31\0\1\3"+
    "\3\0\6\3\1\u0203\26\3\31\0\1\3\3\0\14\3"+
    "\1\u0204\20\3\31\0\1\3\3\0\3\3\1\u0205\31\3"+
    "\31\0\1\3\3\0\24\3\1\u0206\10\3\31\0\1\3"+
    "\3\0\2\3\1\u0207\32\3\31\0\1\3\3\0\3\3"+
    "\1\u0208\31\3\31\0\1\3\3\0\2\3\1\u0209\32\3"+
    "\31\0\1\3\3\0\16\3\1\u020a\16\3\31\0\1\3"+
    "\3\0\30\3\1\u020b\4\3\31\0\1\3\3\0\4\3"+
    "\1\u020c\30\3\31\0\1\3\3\0\5\3\1\u020d\27\3"+
    "\31\0\1\3\3\0\26\3\1\u020e\6\3\31\0\1\3"+
    "\3\0\2\3\1\u020f\32\3\31\0\1\3\3\0\3\3"+
    "\1\u0210\31\3\31\0\1\3\3\0\24\3\1\u0211\10\3"+
    "\31\0\1\3\3\0\10\3\1\u0212\24\3\31\0\1\3"+
    "\3\0\16\3\1\u0213\16\3\31\0\1\3\3\0\4\3"+
    "\1\u0214\30\3\31\0\1\3\3\0\24\3\1\u0215\10\3"+
    "\31\0\1\3\3\0\15\3\1\u0216\17\3\31\0\1\3"+
    "\3\0\7\3\1\u0217\25\3\31\0\1\3\3\0\7\3"+
    "\1\u0218\25\3\31\0\1\3\3\0\10\3\1\u0219\24\3"+
    "\31\0\1\3\3\0\14\3\1\u021a\7\3\1\u021b\10\3"+
    "\31\0\1\3\3\0\7\3\1\u021c\22\3\1\u021d\2\3"+
    "\31\0\1\3\3\0\7\3\1\u021e\25\3\31\0\1\3"+
    "\3\0\16\3\1\u021f\16\3\31\0\1\3\3\0\6\3"+
    "\1\u0220\26\3\31\0\1\3\3\0\23\3\1\u0221\11\3"+
    "\31\0\1\3\3\0\6\3\1\u0222\26\3\31\0\1\3"+
    "\3\0\16\3\1\u0223\16\3\31\0\1\3\3\0\6\3"+
    "\1\u0224\26\3\31\0\1\3\3\0\3\3\1\u0225\31\3"+
    "\31\0\1\3\3\0\2\3\1\u0226\32\3\31\0\1\3"+
    "\3\0\31\3\1\u0227\3\3\31\0\1\3\3\0\7\3"+
    "\1\u0228\25\3\31\0\1\3\3\0\10\3\1\u0229\24\3"+
    "\31\0\1\3\3\0\20\3\1\u022a\14\3\31\0\1\3"+
    "\3\0\7\3\1\u022b\1\3\1\u022c\23\3\31\0\1\3"+
    "\3\0\2\3\1\u022d\32\3\31\0\1\3\3\0\7\3"+
    "\1\u022e\25\3\31\0\1\3\3\0\27\3\1\u022f\5\3"+
    "\31\0\1\3\3\0\2\3\1\u0230\32\3\31\0\1\3"+
    "\3\0\25\3\1\u0231\7\3\31\0\1\3\3\0\2\3"+
    "\1\u0232\32\3\31\0\1\3\3\0\2\3\1\u0233\32\3"+
    "\31\0\1\3\3\0\16\3\1\u0234\16\3\31\0\1\3"+
    "\3\0\3\3\1\u0235\31\3\31\0\1\3\3\0\17\3"+
    "\1\u0236\15\3\31\0\1\3\3\0\11\3\1\u0237\7\3"+
    "\1\u0238\7\3\1\u0239\3\3\31\0\1\3\3\0\16\3"+
    "\1\u023a\16\3\31\0\1\3\3\0\2\3\1\u023b\32\3"+
    "\31\0\1\3\3\0\12\3\1\u023c\22\3\31\0\1\3"+
    "\3\0\2\3\1\u023d\32\3\31\0\1\3\3\0\21\3"+
    "\1\u023e\13\3\31\0\1\3\3\0\5\3\1\u023f\27\3"+
    "\31\0\1\3\3\0\21\3\1\u0240\13\3\31\0\1\3"+
    "\3\0\5\3\1\u0241\27\3\31\0\1\3\3\0\6\3"+
    "\1\u0242\26\3\31\0\1\3\3\0\25\3\1\u0243\7\3"+
    "\31\0\1\3\3\0\16\3\1\u0244\16\3\31\0\1\3"+
    "\3\0\6\3\1\u0245\26\3\31\0\1\3\3\0\14\3"+
    "\1\u0246\20\3\31\0\1\3\3\0\6\3\1\u0247\26\3"+
    "\31\0\1\3\3\0\6\3\1\u0248\26\3\31\0\1\3"+
    "\3\0\16\3\1\u0249\16\3\31\0\1\3\3\0\6\3"+
    "\1\u024a\26\3\31\0\1\3\3\0\7\3\1\u024b\25\3"+
    "\31\0\1\3\3\0\17\3\1\u024c\15\3\31\0\1\3"+
    "\3\0\11\3\1\u024d\23\3\31\0\1\3\3\0\6\3"+
    "\1\u024e\26\3\31\0\1\3\3\0\6\3\1\u024f\26\3"+
    "\31\0\1\3\3\0\3\3\1\u0250\31\3\31\0\1\3"+
    "\3\0\7\3\1\u0251\25\3\31\0\1\3\3\0\15\3"+
    "\1\u0252\17\3\31\0\1\3\3\0\21\3\1\u0253\13\3"+
    "\31\0\1\3\3\0\24\3\1\u0254\10\3\31\0\1\3"+
    "\3\0\3\3\1\u0255\1\3\1\u0256\27\3\31\0\1\3"+
    "\3\0\3\3\1\u0257\31\3\31\0\1\3\3\0\23\3"+
    "\1\u0258\11\3\31\0\1\3\3\0\25\3\1\u0259\7\3"+
    "\31\0\1\3\3\0\27\3\1\u025a\5\3\31\0\1\3"+
    "\3\0\21\3\1\u025b\13\3\31\0\1\3\3\0\11\3"+
    "\1\u025c\23\3\31\0\1\3\3\0\6\3\1\u025d\26\3"+
    "\31\0\1\3\3\0\6\3\1\u025e\26\3\31\0\1\3"+
    "\3\0\15\3\1\u025f\17\3\31\0\1\3\3\0\2\3"+
    "\1\u0260\32\3\31\0\1\3\3\0\21\3\1\u0261\13\3"+
    "\31\0\1\3\3\0\11\3\1\u0262\23\3\31\0\1\3"+
    "\3\0\11\3\1\u0263\23\3\31\0\1\3\3\0\14\3"+
    "\1\u0264\20\3\31\0\1\3\3\0\5\3\1\u0265\27\3"+
    "\31\0\1\3\3\0\15\3\1\u0266\17\3\31\0\1\3"+
    "\3\0\3\3\1\u0267\31\3\31\0\1\3\3\0\12\3"+
    "\1\u0268\22\3\31\0\1\3\3\0\6\3\1\u0269\26\3"+
    "\31\0\1\3\3\0\6\3\1\u026a\26\3\31\0\1\3"+
    "\3\0\6\3\1\u026b\26\3\31\0\1\3\3\0\3\3"+
    "\1\u026c\31\3\31\0\1\3\3\0\16\3\1\u026d\16\3"+
    "\31\0\1\3\3\0\16\3\1\u026e\16\3\31\0\1\3"+
    "\3\0\14\3\1\u026f\20\3\31\0\1\3\3\0\6\3"+
    "\1\u0270\26\3\31\0\1\3\3\0\6\3\1\u0271\26\3"+
    "\31\0\1\3\3\0\17\3\1\u0272\15\3\31\0\1\3"+
    "\3\0\16\3\1\u0273\16\3\31\0\1\3\3\0\10\3"+
    "\1\u0274\24\3\31\0\1\3\3\0\12\3\1\u0275\22\3"+
    "\31\0\1\3\3\0\7\3\1\u0276\25\3\31\0\1\3"+
    "\3\0\13\3\1\u0277\21\3\31\0\1\3\3\0\6\3"+
    "\1\u0278\26\3\31\0\1\3\3\0\17\3\1\u0279\15\3"+
    "\31\0\1\3\3\0\6\3\1\u027a\26\3\31\0\1\3"+
    "\3\0\11\3\1\u027b\23\3\31\0\1\3\3\0\7\3"+
    "\1\u027c\25\3\31\0\1\3\3\0\2\3\1\u027d\32\3"+
    "\31\0\1\3\3\0\11\3\1\u027e\23\3\31\0\1\3"+
    "\3\0\16\3\1\u027f\16\3\31\0\1\3\3\0\7\3"+
    "\1\u0280\25\3\31\0\1\3\3\0\2\3\1\u0281\32\3"+
    "\31\0\1\3\3\0\3\3\1\u0282\31\3\31\0\1\3"+
    "\3\0\14\3\1\u0283\20\3\31\0\1\3\3\0\6\3"+
    "\1\u0284\26\3\31\0\1\3\3\0\6\3\1\u0285\26\3"+
    "\31\0\1\3\3\0\7\3\1\u0286\25\3\31\0\1\3"+
    "\3\0\3\3\1\u0287\31\3\31\0\1\3\3\0\5\3"+
    "\1\u0288\27\3\31\0\1\3\3\0\11\3\1\u0289\23\3"+
    "\31\0\1\3\3\0\5\3\1\u028a\27\3\31\0\1\3"+
    "\3\0\16\3\1\u028b\16\3\31\0\1\3\3\0\3\3"+
    "\1\u028c\31\3\31\0\1\3\3\0\2\3\1\u028d\32\3"+
    "\31\0\1\3\3\0\11\3\1\u028e\23\3\31\0\1\3"+
    "\3\0\16\3\1\u028f\16\3\31\0\1\3\3\0\14\3"+
    "\1\u0290\20\3\31\0\1\3\3\0\10\3\1\u0291\24\3"+
    "\31\0\1\3\3\0\2\3\1\u0292\1\u0293\31\3\31\0"+
    "\1\3\3\0\14\3\1\u0294\20\3\31\0\1\3\3\0"+
    "\11\3\1\u0295\23\3\31\0\1\3\3\0\21\3\1\u0296"+
    "\13\3\31\0\1\3\3\0\13\3\1\u0297\21\3\31\0"+
    "\1\3\3\0\7\3\1\u0298\25\3\31\0\1\3\3\0"+
    "\6\3\1\u0299\26\3\31\0\1\3\3\0\13\3\1\u029a"+
    "\21\3\31\0\1\3\3\0\2\3\1\u029b\32\3\31\0"+
    "\1\3\3\0\21\3\1\u029c\13\3\31\0\1\3\3\0"+
    "\16\3\1\u029d\16\3\31\0\1\3\3\0\6\3\1\u029e"+
    "\26\3\31\0\1\3\3\0\17\3\1\u029f\15\3\31\0"+
    "\1\3\3\0\27\3\1\u02a0\5\3\31\0\1\3\3\0"+
    "\6\3\1\u02a1\26\3\31\0\1\3\3\0\16\3\1\u02a2"+
    "\16\3\31\0\1\3\3\0\31\3\1\u02a3\3\3\31\0"+
    "\1\3\3\0\7\3\1\u02a4\25\3\31\0\1\3\3\0"+
    "\3\3\1\u02a5\31\3\31\0\1\3\3\0\3\3\1\u02a6"+
    "\31\3\31\0\1\3\3\0\2\3\1\u02a7\32\3\31\0"+
    "\1\3\3\0\7\3\1\u02a8\25\3\31\0\1\3\3\0"+
    "\12\3\1\u02a9\6\3\1\u02aa\13\3\31\0\1\3\3\0"+
    "\2\3\1\u02ab\32\3\31\0\1\3\3\0\7\3\1\u02ac"+
    "\25\3\31\0\1\3\3\0\25\3\1\u02ad\7\3\31\0"+
    "\1\3\3\0\5\3\1\u02ae\27\3\31\0\1\3\3\0"+
    "\6\3\1\u02af\26\3\31\0\1\3\3\0\16\3\1\u02b0"+
    "\16\3\31\0\1\3\3\0\21\3\1\u02b1\13\3\31\0"+
    "\1\3\3\0\3\3\1\u02b2\31\3\31\0\1\3\3\0"+
    "\11\3\1\u02b3\23\3\31\0\1\3\3\0\10\3\1\u02b4"+
    "\24\3\31\0\1\3\3\0\34\3\1\u02b5\31\0\1\3"+
    "\3\0\13\3\1\u02b6\21\3\31\0\1\3\3\0\26\3"+
    "\1\u02b7\6\3\31\0\1\3\3\0\26\3\1\u02b8\6\3"+
    "\31\0\1\3\3\0\31\3\1\u02b9\3\3\31\0\1\3"+
    "\3\0\11\3\1\u02ba\23\3\31\0\1\3\3\0\2\3"+
    "\1\u02bb\32\3\31\0\1\3\3\0\5\3\1\u02bc\27\3"+
    "\31\0\1\3\3\0\3\3\1\u02bd\31\3\31\0\1\3"+
    "\3\0\3\3\1\u02be\31\3\31\0\1\3\3\0\3\3"+
    "\1\u02bf\31\3\31\0\1\3\3\0\12\3\1\u02c0\22\3"+
    "\31\0\1\3\3\0\3\3\1\u02c1\31\3\31\0\1\3"+
    "\3\0\2\3\1\u02c2\32\3\31\0\1\3\3\0\3\3"+
    "\1\u02c3\31\3\31\0\1\3\3\0\27\3\1\u02c4\5\3"+
    "\31\0\1\3\3\0\6\3\1\u02c5\1\u02c6\5\3\1\u02c7"+
    "\17\3\31\0\1\3\3\0\2\3\1\u02c8\32\3\31\0"+
    "\1\3\3\0\11\3\1\u02c9\23\3\31\0\1\3\3\0"+
    "\2\3\1\u02ca\32\3\31\0\1\3\3\0\6\3\1\u02cb"+
    "\26\3\31\0\1\3\3\0\21\3\1\u02cc\13\3\31\0"+
    "\1\3\3\0\5\3\1\u02cd\27\3\31\0\1\3\3\0"+
    "\11\3\1\u02ce\23\3\31\0\1\3\3\0\13\3\1\u02cf"+
    "\21\3\31\0\1\3\3\0\16\3\1\u02d0\16\3\31\0"+
    "\1\3\3\0\11\3\1\u02d1\23\3\31\0\1\3\3\0"+
    "\3\3\1\u02d2\31\3\31\0\1\3\3\0\11\3\1\u02d3"+
    "\23\3\31\0\1\3\3\0\12\3\1\u02d4\22\3\31\0"+
    "\1\3\3\0\13\3\1\u02d5\21\3\31\0\1\3\3\0"+
    "\2\3\1\u02d6\32\3\31\0\1\3\3\0\2\3\1\u02d7"+
    "\32\3\31\0\1\3\3\0\12\3\1\u02d8\22\3\31\0"+
    "\1\3\3\0\21\3\1\u02d9\13\3\31\0\1\3\3\0"+
    "\30\3\1\u02da\4\3\31\0\1\3\3\0\6\3\1\u02db"+
    "\26\3\31\0\1\3\3\0\7\3\1\u02dc\25\3\31\0"+
    "\1\3\3\0\16\3\1\u02dd\16\3\31\0\1\3\3\0"+
    "\2\3\1\u02de\32\3\31\0\1\3\3\0\6\3\1\u02df"+
    "\26\3\31\0\1\3\3\0\21\3\1\u02e0\13\3\31\0"+
    "\1\3\3\0\11\3\1\u02e1\23\3\31\0\1\3\3\0"+
    "\3\3\1\u02e2\31\3\31\0\1\3\3\0\21\3\1\u02e3"+
    "\13\3\31\0\1\3\3\0\12\3\1\u02e4\22\3\31\0"+
    "\1\3\3\0\13\3\1\u02e5\21\3\31\0\1\3\3\0"+
    "\13\3\1\u02e6\21\3\31\0\1\3\3\0\6\3\1\u02e7"+
    "\26\3\31\0\1\3\3\0\5\3\1\u02e8\27\3\31\0"+
    "\1\3\3\0\2\3\1\u02e9\32\3\31\0\1\3\3\0"+
    "\12\3\1\u02ea\22\3\31\0\1\3\3\0\6\3\1\u02eb"+
    "\26\3\31\0\1\3\3\0\12\3\1\u02ec\22\3\31\0"+
    "\1\3\3\0\21\3\1\u02ed\13\3\31\0\1\3\3\0"+
    "\21\3\1\u02ee\12\3\1\u02ef\31\0\1\3\3\0\23\3"+
    "\1\u02f0\11\3\31\0\1\3\3\0\6\3\1\u02f1\26\3"+
    "\31\0\1\3\3\0\16\3\1\u02f2\16\3\31\0\1\3"+
    "\3\0\5\3\1\u02f3\27\3\31\0\1\3\3\0\7\3"+
    "\1\u02f4\25\3\31\0\1\3\3\0\2\3\1\u02f5\32\3"+
    "\31\0\1\3\3\0\2\3\1\u02f6\32\3\31\0\1\3"+
    "\3\0\10\3\1\u02f7\24\3\31\0\1\3\3\0\26\3"+
    "\1\u02f8\6\3\31\0\1\3\3\0\7\3\1\u02f9\25\3"+
    "\31\0\1\3\3\0\6\3\1\u02fa\26\3\31\0\1\3"+
    "\3\0\6\3\1\u02fb\26\3\31\0\1\3\3\0\16\3"+
    "\1\u02fc\16\3\31\0\1\3\3\0\2\3\1\u02fd\32\3"+
    "\31\0\1\3\3\0\27\3\1\u02fe\5\3\31\0\1\3"+
    "\3\0\14\3\1\u02ff\20\3\31\0\1\3\3\0\21\3"+
    "\1\u0300\13\3\31\0\1\3\3\0\20\3\1\u0301\14\3"+
    "\31\0\1\3\3\0\14\3\1\u0302\20\3\31\0\1\3"+
    "\3\0\11\3\1\u0303\23\3\31\0\1\3\3\0\13\3"+
    "\1\u0304\21\3\31\0\1\3\3\0\12\3\1\u0305\22\3"+
    "\31\0\1\3\3\0\24\3\1\u0306\10\3\31\0\1\3"+
    "\3\0\7\3\1\u0307\25\3\31\0\1\3\3\0\14\3"+
    "\1\u0308\20\3\31\0\1\3\3\0\2\3\1\u0309\32\3"+
    "\31\0\1\3\3\0\16\3\1\u030a\16\3\31\0\1\3"+
    "\3\0\14\3\1\u030b\20\3\31\0\1\3\3\0\27\3"+
    "\1\u030c\5\3\31\0\1\3\3\0\11\3\1\u030d\23\3"+
    "\31\0\1\3\3\0\7\3\1\u030e\25\3\31\0\1\3"+
    "\3\0\31\3\1\u030f\3\3\31\0\1\3\3\0\2\3"+
    "\1\u0310\32\3\31\0\1\3\3\0\6\3\1\u0311\26\3"+
    "\31\0\1\3\3\0\27\3\1\u0312\5\3\31\0\1\3"+
    "\3\0\2\3\1\u0313\32\3\31\0\1\3\3\0\24\3"+
    "\1\u0314\10\3\31\0\1\3\3\0\31\3\1\u0315\3\3"+
    "\31\0\1\3\3\0\2\3\1\u0316\32\3\31\0\1\3"+
    "\3\0\2\3\1\u0317\32\3\31\0\1\3\3\0\6\3"+
    "\1\u0318\26\3\31\0\1\3\3\0\7\3\1\u0319\25\3"+
    "\31\0\1\3\3\0\7\3\1\u031a\25\3\31\0\1\3"+
    "\3\0\11\3\1\u031b\23\3\31\0\1\3\3\0\14\3"+
    "\1\u031c\20\3\31\0\1\3\3\0\3\3\1\u031d\31\3"+
    "\31\0\1\3\3\0\7\3\1\u031e\25\3\31\0\1\3"+
    "\3\0\16\3\1\u031f\16\3\31\0\1\3\3\0\26\3"+
    "\1\u0320\6\3\31\0\1\3\3\0\5\3\1\u0321\27\3"+
    "\31\0\1\3\3\0\5\3\1\u0322\27\3\31\0\1\3"+
    "\3\0\16\3\1\u0323\16\3\31\0\1\3\3\0\2\3"+
    "\1\u0324\32\3\31\0\1\3\3\0\12\3\1\u0325\22\3"+
    "\31\0\1\3\3\0\30\3\1\u0326\4\3\31\0\1\3"+
    "\3\0\12\3\1\u0327\22\3\31\0\1\3\3\0\6\3"+
    "\1\u0328\26\3\31\0\1\3\3\0\2\3\1\u0329\32\3"+
    "\31\0\1\3\3\0\6\3\1\u032a\26\3\31\0\1\3"+
    "\3\0\12\3\1\u032b\22\3\31\0\1\3\3\0\2\3"+
    "\1\u032c\32\3\31\0\1\3\3\0\21\3\1\u032d\2\3"+
    "\1\u032e\10\3\31\0\1\3\3\0\16\3\1\u032f\16\3"+
    "\31\0\1\3\3\0\6\3\1\u0330\26\3\31\0\1\3"+
    "\3\0\3\3\1\u0331\31\3\31\0\1\3\3\0\27\3"+
    "\1\u0332\5\3\31\0\1\3\3\0\27\3\1\u0333\5\3"+
    "\31\0\1\3\3\0\2\3\1\u0334\32\3\31\0\1\3"+
    "\3\0\21\3\1\u0335\13\3\31\0\1\3\3\0\2\3"+
    "\1\u0336\32\3\31\0\1\3\3\0\6\3\1\u0337\26\3"+
    "\31\0\1\3\3\0\21\3\1\u0338\13\3\31\0\1\3"+
    "\3\0\7\3\1\u0339\25\3\31\0\1\3\3\0\14\3"+
    "\1\u033a\20\3\31\0\1\3\3\0\13\3\1\u033b\21\3"+
    "\31\0\1\3\3\0\6\3\1\u033c\26\3\31\0\1\3"+
    "\3\0\7\3\1\u033d\25\3\31\0\1\3\3\0\13\3"+
    "\1\u033e\21\3\31\0\1\3\3\0\2\3\1\u033f\32\3"+
    "\31\0\1\3\3\0\26\3\1\u0340\6\3\31\0\1\3"+
    "\3\0\13\3\1\u0341\21\3\31\0\1\3\3\0\7\3"+
    "\1\u0342\25\3\31\0\1\3\3\0\2\3\1\u0343\32\3"+
    "\31\0\1\3\3\0\2\3\1\u0344\32\3\31\0\1\3"+
    "\3\0\11\3\1\u0345\23\3\31\0\1\3\3\0\27\3"+
    "\1\u0346\5\3\31\0\1\3\3\0\2\3\1\u0347\32\3"+
    "\31\0\1\3\3\0\6\3\1\u0348\26\3\31\0\1\3"+
    "\3\0\6\3\1\u0349\26\3\31\0\1\3\3\0\10\3"+
    "\1\u034a\12\3\1\u034b\11\3\31\0\1\3\3\0\16\3"+
    "\1\u034c\16\3\31\0\1\3\3\0\11\3\1\u034d\23\3"+
    "\31\0\1\3\3\0\2\3\1\u034e\32\3\31\0\1\3"+
    "\3\0\5\3\1\u034f\27\3\31\0\1\3\3\0\2\3"+
    "\1\u0350\32\3\31\0\1\3\3\0\14\3\1\u0351\20\3"+
    "\31\0\1\3\3\0\6\3\1\u0352\26\3\31\0\1\3"+
    "\3\0\15\3\1\u0353\17\3\31\0\1\3\3\0\6\3"+
    "\1\u0354\26\3\31\0\1\3\3\0\16\3\1\u0355\16\3"+
    "\31\0\1\3\3\0\6\3\1\u0356\26\3\31\0\1\3"+
    "\3\0\11\3\1\u0357\23\3\31\0\1\3\3\0\6\3"+
    "\1\u0358\26\3\31\0\1\3\3\0\12\3\1\u0359\22\3"+
    "\31\0\1\3\3\0\23\3\1\u035a\11\3\31\0\1\3"+
    "\3\0\31\3\1\u035b\3\3\31\0\1\3\3\0\16\3"+
    "\1\u035c\16\3\31\0\1\3\3\0\14\3\1\u035d\20\3"+
    "\31\0\1\3\3\0\26\3\1\u035e\6\3\31\0\1\3"+
    "\3\0\6\3\1\u035f\26\3\31\0\1\3\3\0\34\3"+
    "\1\u0360\31\0\1\3\3\0\16\3\1\u0361\16\3\31\0"+
    "\1\3\3\0\6\3\1\u0362\26\3\31\0\1\3\3\0"+
    "\14\3\1\u0363\20\3\31\0\1\3\3\0\13\3\1\u0364"+
    "\21\3\31\0\1\3\3\0\6\3\1\u0365\26\3\31\0"+
    "\1\3\3\0\13\3\1\u0366\21\3\31\0\1\3\3\0"+
    "\3\3\1\u0367\31\3\31\0\1\3\3\0\14\3\1\u0368"+
    "\20\3\31\0\1\3\3\0\6\3\1\u0369\26\3\31\0"+
    "\1\3\3\0\11\3\1\u036a\23\3\31\0\1\3\3\0"+
    "\2\3\1\u036b\32\3\31\0\1\3\3\0\13\3\1\u036c"+
    "\21\3\31\0\1\3\3\0\5\3\1\u036d\13\3\1\u036e"+
    "\13\3\31\0\1\3\3\0\23\3\1\u036f\11\3\31\0"+
    "\1\3\3\0\16\3\1\u0370\16\3\31\0\1\3\3\0"+
    "\27\3\1\u0371\5\3\31\0\1\3\3\0\6\3\1\u0372"+
    "\26\3\31\0\1\3\3\0\26\3\1\u0373\6\3\31\0"+
    "\1\3\3\0\11\3\1\u0374\23\3\31\0\1\3\3\0"+
    "\13\3\1\u0375\21\3\31\0\1\3\3\0\6\3\1\u0376"+
    "\26\3\31\0\1\3\3\0\16\3\1\u0377\16\3\31\0"+
    "\1\3\3\0\10\3\1\u0378\24\3\31\0\1\3\3\0"+
    "\23\3\1\u0379\11\3\31\0\1\3\3\0\3\3\1\u037a"+
    "\31\3\31\0\1\3\3\0\14\3\1\u037b\20\3\31\0"+
    "\1\3\3\0\14\3\1\u037c\20\3\31\0\1\3\3\0"+
    "\3\3\1\u037d\31\3\31\0\1\3\3\0\15\3\1\u037e"+
    "\17\3\31\0\1\3\3\0\2\3\1\u037f\32\3\31\0"+
    "\1\3\3\0\12\3\1\u0380\22\3\31\0\1\3\3\0"+
    "\31\3\1\u0381\3\3\31\0\1\3\3\0\14\3\1\u0382"+
    "\20\3\31\0\1\3\3\0\15\3\1\u0383\17\3\31\0"+
    "\1\3\3\0\13\3\1\u0384\21\3\31\0\1\3\3\0"+
    "\5\3\1\u0385\27\3\31\0\1\3\3\0\27\3\1\u0386"+
    "\5\3\31\0\1\3\3\0\14\3\1\u0387\20\3\31\0"+
    "\1\3\3\0\16\3\1\u0388\16\3\31\0\1\3\3\0"+
    "\4\3\1\u0389\30\3\31\0\1\3\3\0\7\3\1\u038a"+
    "\25\3\31\0\1\3\3\0\27\3\1\u038b\5\3\31\0"+
    "\1\3\3\0\6\3\1\u038c\26\3\31\0\1\3\3\0"+
    "\12\3\1\u038d\22\3\31\0\1\3\3\0\11\3\1\u038e"+
    "\23\3\31\0\1\3\3\0\6\3\1\u038f\26\3\31\0"+
    "\1\3\3\0\14\3\1\u0390\20\3\31\0\1\3\3\0"+
    "\21\3\1\u0391\13\3\31\0\1\3\3\0\5\3\1\u0392"+
    "\27\3\31\0\1\3\3\0\7\3\1\u0393\25\3\31\0"+
    "\1\3\3\0\2\3\1\u0394\32\3\31\0\1\3\3\0"+
    "\7\3\1\u0395\25\3\31\0\1\3\3\0\11\3\1\u0396"+
    "\23\3\31\0\1\3\3\0\2\3\1\u0397\32\3\31\0"+
    "\1\3\3\0\6\3\1\u0398\26\3\31\0\1\3\3\0"+
    "\10\3\1\u0399\24\3\31\0\1\3\3\0\3\3\1\u039a"+
    "\31\3\31\0\1\3\3\0\12\3\1\u039b\22\3\31\0"+
    "\1\3\3\0\14\3\1\u039c\20\3\31\0\1\3\3\0"+
    "\12\3\1\u039d\22\3\31\0\1\3\3\0\17\3\1\u039e"+
    "\15\3\31\0\1\3\3\0\2\3\1\u039f\32\3\31\0"+
    "\1\3\3\0\22\3\1\u03a0\12\3\31\0\1\3\3\0"+
    "\15\3\1\u03a1\17\3\31\0\1\3\3\0\3\3\1\u03a2"+
    "\31\3\31\0\1\3\3\0\2\3\1\u03a3\32\3\31\0"+
    "\1\3\3\0\11\3\1\u03a4\23\3\31\0\1\3\3\0"+
    "\7\3\1\u03a5\25\3\31\0\1\3\3\0\24\3\1\u03a6"+
    "\10\3\31\0\1\3\3\0\25\3\1\u03a7\7\3\31\0"+
    "\1\3\3\0\21\3\1\u03a8\13\3\31\0\1\3\3\0"+
    "\12\3\1\u03a9\22\3\31\0\1\3\3\0\2\3\1\u03aa"+
    "\32\3\31\0\1\3\3\0\6\3\1\u03ab\26\3\31\0"+
    "\1\3\3\0\14\3\1\u03ac\20\3\31\0\1\3\3\0"+
    "\11\3\1\u03ad\23\3\31\0\1\3\3\0\11\3\1\u03ae"+
    "\23\3\31\0\1\3\3\0\10\3\1\u03af\24\3\31\0"+
    "\1\3\3\0\26\3\1\u03b0\6\3\31\0\1\3\3\0"+
    "\5\3\1\u03b1\27\3\31\0\1\3\3\0\27\3\1\u03b2"+
    "\5\3\31\0\1\3\3\0\11\3\1\u03b3\23\3\31\0"+
    "\1\3\3\0\6\3\1\u03b4\26\3\31\0\1\3\3\0"+
    "\6\3\1\u03b5\26\3\31\0\1\3\3\0\6\3\1\u03b6"+
    "\26\3\31\0\1\3\3\0\2\3\1\u03b7\32\3\31\0"+
    "\1\3\3\0\7\3\1\u03b8\25\3\31\0\1\3\3\0"+
    "\11\3\1\u03b9\23\3\31\0\1\3\3\0\25\3\1\u03ba"+
    "\7\3\31\0\1\3\3\0\7\3\1\u03bb\25\3\31\0"+
    "\1\3\3\0\14\3\1\u03bc\20\3\31\0\1\3\3\0"+
    "\6\3\1\u03bd\26\3\31\0\1\3\3\0\27\3\1\u03be"+
    "\5\3\31\0\1\3\3\0\7\3\1\u03bf\25\3\31\0"+
    "\1\3\3\0\10\3\1\u03c0\24\3\31\0\1\3\3\0"+
    "\5\3\1\u03c1\27\3\31\0\1\3\3\0\27\3\1\u03c2"+
    "\5\3\31\0\1\3\3\0\27\3\1\u03c3\5\3\31\0"+
    "\1\3\3\0\30\3\1\u03c4\4\3\31\0\1\3\3\0"+
    "\16\3\1\u03c5\16\3\31\0\1\3\3\0\11\3\1\u03c6"+
    "\23\3\31\0\1\3\3\0\31\3\1\u03c7\3\3\31\0"+
    "\1\3\3\0\16\3\1\u03c8\16\3\31\0\1\3\3\0"+
    "\15\3\1\u03c9\17\3\31\0\1\3\3\0\14\3\1\u03ca"+
    "\20\3\31\0\1\3\3\0\5\3\1\u03cb\27\3\31\0"+
    "\1\3\3\0\13\3\1\u03cc\21\3\31\0\1\3\3\0"+
    "\3\3\1\u03cd\31\3\31\0\1\3\3\0\31\3\1\u03ce"+
    "\3\3\31\0\1\3\3\0\6\3\1\u03cf\26\3\31\0"+
    "\1\3\3\0\13\3\1\u03d0\21\3\31\0\1\3\3\0"+
    "\7\3\1\u03d1\25\3\31\0\1\3\3\0\30\3\1\u03d2"+
    "\4\3\31\0\1\3\3\0\13\3\1\u03d3\21\3\31\0"+
    "\1\3\3\0\21\3\1\u03d4\13\3\31\0\1\3\3\0"+
    "\26\3\1\u03d5\6\3\31\0\1\3\3\0\14\3\1\u03d6"+
    "\20\3\31\0\1\3\3\0\11\3\1\u03d7\23\3\31\0"+
    "\1\3\3\0\21\3\1\u03d8\13\3\31\0\1\3\3\0"+
    "\24\3\1\u03d9\10\3\31\0\1\3\3\0\5\3\1\u03da"+
    "\27\3\31\0\1\3\3\0\2\3\1\u03db\32\3\31\0"+
    "\1\3\3\0\12\3\1\u03dc\22\3\31\0\1\3\3\0"+
    "\14\3\1\u03dd\20\3\31\0\1\3\3\0\4\3\1\u03de"+
    "\30\3\31\0\1\3\3\0\10\3\1\u03df\24\3\31\0"+
    "\1\3\3\0\24\3\1\u03e0\10\3\31\0\1\3\3\0"+
    "\27\3\1\u03e1\5\3\31\0\1\3\3\0\6\3\1\u03e2"+
    "\26\3\31\0\1\3\3\0\11\3\1\u03e3\23\3\31\0"+
    "\1\3\3\0\14\3\1\u03e4\20\3\31\0\1\3\3\0"+
    "\16\3\1\u03e5\16\3\31\0\1\3\3\0\13\3\1\u03e6"+
    "\21\3\31\0\1\3\3\0\6\3\1\u03e7\26\3\31\0"+
    "\1\3\3\0\30\3\1\u03e8\4\3\31\0\1\3\3\0"+
    "\12\3\1\u03e9\22\3\31\0\1\3\3\0\16\3\1\u03ea"+
    "\16\3\31\0\1\3\3\0\3\3\1\u03eb\31\3\31\0"+
    "\1\3\3\0\3\3\1\u03ec\31\3\31\0\1\3\3\0"+
    "\21\3\1\u03ed\13\3\31\0\1\3\3\0\26\3\1\u03ee"+
    "\6\3\31\0\1\3\3\0\7\3\1\u03ef\25\3\31\0"+
    "\1\3\3\0\34\3\1\u03f0\31\0\1\3\3\0\27\3"+
    "\1\u03f1\5\3\31\0\1\3\3\0\13\3\1\u03f2\21\3"+
    "\31\0\1\3\3\0\21\3\1\u03f3\13\3\31\0\1\3"+
    "\3\0\30\3\1\u03f4\4\3\31\0\1\3\3\0\5\3"+
    "\1\u03f5\27\3\31\0\1\3\3\0\31\3\1\u03f6\3\3"+
    "\31\0\1\3\3\0\6\3\1\u03f7\26\3\31\0\1\3"+
    "\3\0\6\3\1\u03f8\26\3\31\0\1\3\3\0\6\3"+
    "\1\u03f9\26\3\31\0\1\3\3\0\5\3\1\u03fa\27\3"+
    "\31\0\1\3\3\0\27\3\1\u03fb\5\3\31\0\1\3"+
    "\3\0\21\3\1\u03fc\13\3\31\0\1\3\3\0\16\3"+
    "\1\u03fd\16\3\31\0\1\3\3\0\6\3\1\u03fe\26\3"+
    "\31\0\1\3\3\0\32\3\1\u03ff\2\3\31\0\1\3"+
    "\3\0\12\3\1\u0400\22\3\31\0\1\3\3\0\13\3"+
    "\1\u0401\21\3\31\0\1\3\3\0\14\3\1\u0402\20\3"+
    "\31\0\1\3\3\0\22\3\1\u0403\12\3\31\0\1\3"+
    "\3\0\2\3\1\u0404\32\3\31\0\1\3\3\0\10\3"+
    "\1\u0405\24\3\31\0\1\3\3\0\14\3\1\u0406\20\3"+
    "\31\0\1\3\3\0\27\3\1\u0407\5\3\31\0\1\3"+
    "\3\0\31\3\1\u0408\3\3\31\0\1\3\3\0\3\3"+
    "\1\u0409\31\3\31\0\1\3\3\0\26\3\1\u040a\6\3"+
    "\31\0\1\3\3\0\6\3\1\u040b\26\3\31\0\1\3"+
    "\3\0\24\3\1\u040c\10\3\31\0\1\3\3\0\13\3"+
    "\1\u040d\21\3\31\0\1\3\3\0\5\3\1\u040e\27\3"+
    "\31\0\1\3\3\0\11\3\1\u040f\23\3\31\0\1\3"+
    "\3\0\15\3\1\u0410\17\3\31\0\1\3\3\0\3\3"+
    "\1\u0411\31\3\31\0\1\3\3\0\10\3\1\u0412\24\3"+
    "\31\0\1\3\3\0\2\3\1\u0413\32\3\31\0\1\3"+
    "\3\0\10\3\1\u0414\24\3\31\0\1\3\3\0\2\3"+
    "\1\u0415\32\3\31\0\1\3\3\0\6\3\1\u0416\26\3"+
    "\31\0\1\3\3\0\16\3\1\u0417\16\3\31\0\1\3"+
    "\3\0\2\3\1\u0418\32\3\31\0\1\3\3\0\3\3"+
    "\1\u0419\31\3\31\0\1\3\3\0\27\3\1\u041a\5\3"+
    "\31\0\1\3\3\0\3\3\1\u041b\31\3\31\0\1\3"+
    "\3\0\6\3\1\u041c\26\3\31\0\1\3\3\0\24\3"+
    "\1\u041d\10\3\31\0\1\3\3\0\5\3\1\u041e\27\3"+
    "\31\0\1\3\3\0\14\3\1\u041f\20\3\31\0\1\3"+
    "\3\0\27\3\1\u0420\5\3\31\0\1\3\3\0\13\3"+
    "\1\u0421\21\3\31\0\1\3\3\0\30\3\1\u0422\4\3"+
    "\31\0\1\3\3\0\16\3\1\u0423\16\3\31\0\1\3"+
    "\3\0\6\3\1\u0424\26\3\31\0\1\3\3\0\17\3"+
    "\1\u0425\15\3\31\0\1\3\3\0\26\3\1\u0426\6\3"+
    "\31\0\1\3\3\0\16\3\1\u0427\16\3\31\0\1\3"+
    "\3\0\12\3\1\u0428\22\3\31\0\1\3\3\0\3\3"+
    "\1\u0429\31\3\31\0\1\3\3\0\2\3\1\u042a\32\3"+
    "\31\0\1\3\3\0\16\3\1\u042b\16\3\31\0\1\3"+
    "\3\0\14\3\1\u042c\20\3\31\0\1\3\3\0\11\3"+
    "\1\u042d\23\3\31\0\1\3\3\0\21\3\1\u042e\13\3"+
    "\31\0\1\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[49706];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\31\1\1\11\3\1\3\11\6\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\144\1\1\0\1\11\1\0\1\1\1\0\16\11\2\0"+
    "\215\1\1\0\224\1\1\11\u025e\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1070];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 176: 
          { return symbol(sym.COLLATE,  (yytext()));
          }
        case 258: break;
        case 198: 
          { return symbol(sym.DISTINCT,  (yytext()));
          }
        case 259: break;
        case 28: 
          { return symbol(sym.TO,  (yytext()));
          }
        case 260: break;
        case 215: 
          { return symbol(sym.PROCEDURE,  (yytext()));
          }
        case 261: break;
        case 19: 
          { return symbol(sym.PARENTESISIZQ, (yytext()));
          }
        case 262: break;
        case 20: 
          { return symbol(sym.PARENTESISDER, (yytext()));
          }
        case 263: break;
        case 133: 
          { return symbol(sym.WHERE,  (yytext()));
          }
        case 264: break;
        case 84: 
          { return symbol(sym.REAL,  (yytext()));
          }
        case 265: break;
        case 40: 
          { return symbol(sym.GB,  (yytext()));
          }
        case 266: break;
        case 239: 
          { return symbol(sym.TYPE_WARNING,  (yytext()));
          }
        case 267: break;
        case 127: 
          { return symbol(sym.INNER,  (yytext()));
          }
        case 268: break;
        case 124: 
          { return symbol(sym.OWNER,  (yytext()));
          }
        case 269: break;
        case 55: 
          { return symbol(sym.PARENTESIS, (yytext()));
          }
        case 270: break;
        case 185: 
          { return symbol(sym.PRIMARY,  (yytext()));
          }
        case 271: break;
        case 170: 
          { return symbol(sym.ROWGUID,  (yytext()));
          }
        case 272: break;
        case 148: 
          { return symbol(sym.CURSOR,  (yytext()));
          }
        case 273: break;
        case 60: 
          { return symbol(sym.AND,  (yytext()));
          }
        case 274: break;
        case 24: 
          { return symbol(sym.NUMERAL, (yytext()));
          }
        case 275: break;
        case 87: 
          { return symbol(sym.NAME,  (yytext()));
          }
        case 276: break;
        case 140: 
          { return symbol(sym.RETURN,  (yytext()));
          }
        case 277: break;
        case 257: 
          { return symbol(sym.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS,  (yytext()));
          }
        case 278: break;
        case 48: 
          { return symbol(sym.DIFMENOR,  (yytext()));
          }
        case 279: break;
        case 113: 
          { return symbol(sym.LOWER,  (yytext()));
          }
        case 280: break;
        case 51: 
          { return symbol(sym.OPAND, (yytext()));
          }
        case 281: break;
        case 222: 
          { return symbol(sym.REFERENCES,  (yytext()));
          }
        case 282: break;
        case 39: 
          { return symbol(sym.KB,  (yytext()));
          }
        case 283: break;
        case 242: 
          { return symbol(sym.FAST_FORWARD,  (yytext()));
          }
        case 284: break;
        case 169: 
          { return symbol(sym.REBUILD,  (yytext()));
          }
        case 285: break;
        case 233: 
          { return symbol(sym.REPLICATION,  (yytext()));
          }
        case 286: break;
        case 21: 
          { return symbol(sym.CORCHETEIZQ, (yytext()));
          }
        case 287: break;
        case 186: 
          { return symbol(sym.INTEGER,  (yytext()));
          }
        case 288: break;
        case 158: 
          { return symbol(sym.SPARSE,  (yytext()));
          }
        case 289: break;
        case 22: 
          { return symbol(sym.CORCHETEDER, (yytext()));
          }
        case 290: break;
        case 188: 
          { return symbol(sym.FOREIGN,  (yytext()));
          }
        case 291: break;
        case 2: 
          { throw new Error("Caracter ilegal <"+yytext()+">");
          }
        case 292: break;
        case 227: 
          { return symbol(sym.OPENROWSET,  (yytext()));
          }
        case 293: break;
        case 212: 
          { return symbol(sym.OPENQUERY,  (yytext()));
          }
        case 294: break;
        case 243: 
          { return symbol(sym.FETCH_STATUS,  (yytext()));
          }
        case 295: break;
        case 152: 
          { return symbol(sym.OUTPUT,  (yytext()));
          }
        case 296: break;
        case 218: 
          { return symbol(sym.GENERATED,  (yytext()));
          }
        case 297: break;
        case 13: 
          { return symbol(sym.ADMIRACION, (yytext()));
          }
        case 298: break;
        case 167: 
          { return symbol(sym.EXECUTE,  (yytext()));
          }
        case 299: break;
        case 112: 
          { return symbol(sym.LOCAL,  (yytext()));
          }
        case 300: break;
        case 3: 
          { return symbol(sym.IDENTIFICADOR, (yytext()));
          }
        case 301: break;
        case 236: 
          { return symbol(sym.CONTAINMENT,  (yytext()));
          }
        case 302: break;
        case 232: 
          { return symbol(sym.TRANSACTION,  (yytext()));
          }
        case 303: break;
        case 78: 
          { return symbol(sym.TRAN,  (yytext()));
          }
        case 304: break;
        case 25: 
          { return symbol(sym.DOLAR,  (yytext()));
          }
        case 305: break;
        case 14: 
          { return symbol(sym.PUNTOCOMA, (yytext()));
          }
        case 306: break;
        case 81: 
          { return symbol(sym.LEFT,  (yytext()));
          }
        case 307: break;
        case 145: 
          { return symbol(sym.NULLIF,  (yytext()));
          }
        case 308: break;
        case 209: 
          { return symbol(sym.RECOMPILE,  (yytext()));
          }
        case 309: break;
        case 33: 
          { return symbol(sym.ON,  (yytext()));
          }
        case 310: break;
        case 226: 
          { return symbol(sym.OPTIMISTIC,  (yytext()));
          }
        case 311: break;
        case 100: 
          { return symbol(sym.FILE,  (yytext()));
          }
        case 312: break;
        case 132: 
          { return symbol(sym.WRITE,  (yytext()));
          }
        case 313: break;
        case 118: 
          { return symbol(sym.CLOSE,  (yytext()));
          }
        case 314: break;
        case 36: 
          { return symbol(sym.IF,  (yytext()));
          }
        case 315: break;
        case 49: 
          { return symbol(sym.DIFERENTE, (yytext()));
          }
        case 316: break;
        case 253: 
          { return symbol(sym.DELAYED_DURABILITY,  (yytext()));
          }
        case 317: break;
        case 69: 
          { return symbol(sym.OUT,  (yytext()));
          }
        case 318: break;
        case 177: 
          { return symbol(sym.DELETED,  (yytext()));
          }
        case 319: break;
        case 146: 
          { return symbol(sym.CALLER,  (yytext()));
          }
        case 320: break;
        case 180: 
          { return symbol(sym.DEFAULT,  (yytext()));
          }
        case 321: break;
        case 153: 
          { return symbol(sym.OPTION,  (yytext()));
          }
        case 322: break;
        case 217: 
          { return symbol(sym.SUBSTRING,  (yytext()));
          }
        case 323: break;
        case 189: 
          { return symbol(sym.VARCHAR,  (yytext()));
          }
        case 324: break;
        case 220: 
          { return symbol(sym.ENCRYPTION,  (yytext()));
          }
        case 325: break;
        case 174: 
          { return symbol(sym.CASCADE,  (yytext()));
          }
        case 326: break;
        case 213: 
          { return symbol(sym.PARTITION,  (yytext()));
          }
        case 327: break;
        case 45: 
          { return symbol(sym.MAYORMENOR,  (yytext()));
          }
        case 328: break;
        case 254: 
          { return symbol(sym.MEMORY_OPTIMIZED_DATA,  (yytext()));
          }
        case 329: break;
        case 178: 
          { return symbol(sym.DECLARE,  (yytext()));
          }
        case 330: break;
        case 76: 
          { return symbol(sym.MIN,  (yytext()));
          }
        case 331: break;
        case 67: 
          { return symbol(sym.ROW,  (yytext()));
          }
        case 332: break;
        case 200: 
          { return symbol(sym.INSERTED,  (yytext()));
          }
        case 333: break;
        case 120: 
          { return symbol(sym.COUNT,  (yytext()));
          }
        case 334: break;
        case 246: 
          { return symbol(sym.FILESTREAM_ON,  (yytext()));
          }
        case 335: break;
        case 110: 
          { return symbol(sym.ALTER,  (yytext()));
          }
        case 336: break;
        case 149: 
          { return symbol(sym.COLUMN,  (yytext()));
          }
        case 337: break;
        case 131: 
          { return symbol(sym.START,  (yytext()));
          }
        case 338: break;
        case 70: 
          { return symbol(sym.OFF,  (yytext()));
          }
        case 339: break;
        case 208: 
          { return symbol(sym.READ_ONLY,  (yytext()));
          }
        case 340: break;
        case 159: 
          { return symbol(sym.VALUES,  (yytext()));
          }
        case 341: break;
        case 247: 
          { return symbol(sym.DEFAULT_SCHEMA,  (yytext()));
          }
        case 342: break;
        case 150: 
          { return symbol(sym.COMMIT,  (yytext()));
          }
        case 343: break;
        case 256: 
          { return symbol(sym.OPTIMIZE_FOR_SEQUENTIAL_KEY,  (yytext()));
          }
        case 344: break;
        case 143: 
          { return symbol(sym.UNIQUE,  (yytext()));
          }
        case 345: break;
        case 44: 
          { return symbol(sym.MENORIGUAL, (yytext()));
          }
        case 346: break;
        case 249: 
          { return symbol(sym.ALLOW_ROW_LOCKS,  (yytext()));
          }
        case 347: break;
        case 116: 
          { return symbol(sym.UPPER,  (yytext()));
          }
        case 348: break;
        case 139: 
          { return symbol(sym.EXISTS,  (yytext()));
          }
        case 349: break;
        case 5: 
          { return symbol(sym.RESTA, (yytext()));
          }
        case 350: break;
        case 230: 
          { return symbol(sym.FILEGROWTH,  (yytext()));
          }
        case 351: break;
        case 229: 
          { return symbol(sym.FILESTREAM,  (yytext()));
          }
        case 352: break;
        case 17: 
          { return symbol(sym.BRACKETIZQ, (yytext()));
          }
        case 353: break;
        case 18: 
          { return symbol(sym.BRACKETDER, (yytext()));
          }
        case 354: break;
        case 240: 
          { return symbol(sym.NONCLUSTERED,  (yytext()));
          }
        case 355: break;
        case 166: 
          { return symbol(sym.BETWEEN,  (yytext()));
          }
        case 356: break;
        case 4: 
          { return symbol(sym.ENTERODECIMAL,  (yytext()));
          }
        case 357: break;
        case 202: 
          { return symbol(sym.FREETEXT,  (yytext()));
          }
        case 358: break;
        case 27: 
          { return symbol(sym.TB,  (yytext()));
          }
        case 359: break;
        case 192: 
          { return symbol(sym.MAXSIZE,  (yytext()));
          }
        case 360: break;
        case 31: 
          { return symbol(sym.NO,  (yytext()));
          }
        case 361: break;
        case 225: 
          { return symbol(sym.DEALLOCATE,  (yytext()));
          }
        case 362: break;
        case 103: 
          { return symbol(sym.SIZE,  (yytext()));
          }
        case 363: break;
        case 190: 
          { return symbol(sym.VARYING,  (yytext()));
          }
        case 364: break;
        case 98: 
          { return symbol(sym.FROM,  (yytext()));
          }
        case 365: break;
        case 63: 
          { return symbol(sym.AVG,  (yytext()));
          }
        case 366: break;
        case 182: 
          { return symbol(sym.DYNAMIC,  (yytext()));
          }
        case 367: break;
        case 163: 
          { return symbol(sym.HIDDEN,  (yytext()));
          }
        case 368: break;
        case 156: 
          { return symbol(sym.SELECT,  (yytext()));
          }
        case 369: break;
        case 216: 
          { return symbol(sym.FILEGROUP,  (yytext()));
          }
        case 370: break;
        case 136: 
          { return symbol(sym.ATTACH,  (yytext()));
          }
        case 371: break;
        case 96: 
          { return symbol(sym.PROC,  (yytext()));
          }
        case 372: break;
        case 111: 
          { return symbol(sym.BEGIN,  (yytext()));
          }
        case 373: break;
        case 47: 
          { return symbol(sym.MAYORIGUAL, (yytext()));
          }
        case 374: break;
        case 115: 
          { return symbol(sym.RIGHT,  (yytext()));
          }
        case 375: break;
        case 160: 
          { return symbol(sym.MASKED,  (yytext()));
          }
        case 376: break;
        case 97: 
          { return symbol(sym.INTO,  (yytext()));
          }
        case 377: break;
        case 86: 
          { return symbol(sym.USER,  (yytext()));
          }
        case 378: break;
        case 61: 
          { return symbol(sym.ADD,  (yytext()));
          }
        case 379: break;
        case 80: 
          { return symbol(sym.TIME,  (yytext()));
          }
        case 380: break;
        case 53: 
          { return symbol(sym.PUNTOPUNTO,  (yytext()));
          }
        case 381: break;
        case 235: 
          { return symbol(sym.COLUMNSTORE,  (yytext()));
          }
        case 382: break;
        case 66: 
          { return symbol(sym.END,  (yytext()));
          }
        case 383: break;
        case 250: 
          { return symbol(sym.ALLOW_PAGE_LOCKS,  (yytext()));
          }
        case 384: break;
        case 128: 
          { return symbol(sym.INDEX,  (yytext()));
          }
        case 385: break;
        case 57: 
          { return symbol(sym.DOBLENUMERAL, (yytext()));
          }
        case 386: break;
        case 129: 
          { return symbol(sym.FLOAT,  (yytext()));
          }
        case 387: break;
        case 168: 
          { return symbol(sym.RETURNS,  (yytext()));
          }
        case 388: break;
        case 6: 
          { return symbol(sym.DIV, (yytext()));
          }
        case 389: break;
        case 141: 
          { return symbol(sym.RESUME,  (yytext()));
          }
        case 390: break;
        case 130: 
          { return symbol(sym.FETCH,  (yytext()));
          }
        case 391: break;
        case 101: 
          { return symbol(sym.SAVE,  (yytext()));
          }
        case 392: break;
        case 106: 
          { return symbol(sym.MARK,  (yytext()));
          }
        case 393: break;
        case 91: 
          { return symbol(sym.CHAR,  (yytext()));
          }
        case 394: break;
        case 162: 
          { return symbol(sym.HAVING,  (yytext()));
          }
        case 395: break;
        case 58: 
          { return symbol(sym.TOP,  (yytext()));
          }
        case 396: break;
        case 73: 
          { return symbol(sym.SET,  (yytext()));
          }
        case 397: break;
        case 175: 
          { return symbol(sym.CURRENT,  (yytext()));
          }
        case 398: break;
        case 108: 
          { return symbol(sym.TABLE,  (yytext()));
          }
        case 399: break;
        case 82: 
          { return symbol(sym.LIKE,  (yytext()));
          }
        case 400: break;
        case 99: 
          { return symbol(sym.FULL,  (yytext()));
          }
        case 401: break;
        case 75: 
          { return symbol(sym.MAX,  (yytext()));
          }
        case 402: break;
        case 68: 
          { return symbol(sym.NOT,  (yytext()));
          }
        case 403: break;
        case 30: 
          { return symbol(sym.BY,  (yytext()));
          }
        case 404: break;
        case 172: 
          { return symbol(sym.NUMERIC,  (yytext()));
          }
        case 405: break;
        case 151: 
          { return symbol(sym.DELETE,  (yytext()));
          }
        case 406: break;
        case 9: 
          { return symbol(sym.PORCENTAJE, (yytext()));
          }
        case 407: break;
        case 92: 
          { return symbol(sym.DATE,  (yytext()));
          }
        case 408: break;
        case 10: 
          { return symbol(sym.MENORQUE, (yytext()));
          }
        case 409: break;
        case 203: 
          { return symbol(sym.FUNCTION,  (yytext()));
          }
        case 410: break;
        case 197: 
          { return symbol(sym.DATABASE,  (yytext()));
          }
        case 411: break;
        case 199: 
          { return symbol(sym.PASSWORD,  (yytext()));
          }
        case 412: break;
        case 155: 
          { return symbol(sym.STATIC,  (yytext()));
          }
        case 413: break;
        case 184: 
          { return symbol(sym.PERCENT,  (yytext()));
          }
        case 414: break;
        case 50: 
          { return symbol(sym.DIFMAYOR,  (yytext()));
          }
        case 415: break;
        case 144: 
          { return symbol(sym.UPDATE,  (yytext()));
          }
        case 416: break;
        case 137: 
          { return symbol(sym.ALWAYS,  (yytext()));
          }
        case 417: break;
        case 142: 
          { return symbol(sym.REMOVE,  (yytext()));
          }
        case 418: break;
        case 237: 
          { return symbol(sym.INSENSITIVE,  (yytext()));
          }
        case 419: break;
        case 187: 
          { return symbol(sym.INCLUDE,  (yytext()));
          }
        case 420: break;
        case 165: 
          { return symbol(sym.GLOBAL,  (yytext()));
          }
        case 421: break;
        case 117: 
          { return symbol(sym.NCHAR,  (yytext()));
          }
        case 422: break;
        case 23: 
          { return symbol(sym.ARROBA, (yytext()));
          }
        case 423: break;
        case 219: 
          { return symbol(sym.ASYMMETRIC,  (yytext()));
          }
        case 424: break;
        case 38: 
          { return symbol(sym.MB,  (yytext()));
          }
        case 425: break;
        case 15: 
          { return symbol(sym.COMA, (yytext()));
          }
        case 426: break;
        case 114: 
          { return symbol(sym.LOGIN,  (yytext()));
          }
        case 427: break;
        case 41: 
          { return symbol(sym.GO,  (yytext()));
          }
        case 428: break;
        case 43: 
          { /* ignora el espacio */
          }
        case 429: break;
        case 126: 
          { return symbol(sym.PIVOT,  (yytext()));
          }
        case 430: break;
        case 107: 
          { return symbol(sym.JOIN,  (yytext()));
          }
        case 431: break;
        case 164: 
          { return symbol(sym.KEYSET,  (yytext()));
          }
        case 432: break;
        case 224: 
          { return symbol(sym.CONSTRAINT,  (yytext()));
          }
        case 433: break;
        case 231: 
          { return symbol(sym.TABLESAMPLE,  (yytext()));
          }
        case 434: break;
        case 194: 
          { return symbol(sym.READONLY,  (yytext()));
          }
        case 435: break;
        case 223: 
          { return symbol(sym.ROWGUIDCOL,  (yytext()));
          }
        case 436: break;
        case 244: 
          { return symbol(sym.FORWARD_ONLY,  (yytext()));
          }
        case 437: break;
        case 205: 
          { return symbol(sym.SNAPSHOT,  (yytext()));
          }
        case 438: break;
        case 234: 
          { return symbol(sym.CERTIFICATE,  (yytext()));
          }
        case 439: break;
        case 171: 
          { return symbol(sym.UNPIVOT,  (yytext()));
          }
        case 440: break;
        case 35: 
          { return symbol(sym.IN,  (yytext()));
          }
        case 441: break;
        case 241: 
          { return symbol(sym.OLD_PASSWORD,  (yytext()));
          }
        case 442: break;
        case 26: 
          { return symbol(sym.DOUBLENUM,  (yytext()));
          }
        case 443: break;
        case 74: 
          { return symbol(sym.SUM,  (yytext()));
          }
        case 444: break;
        case 245: 
          { return symbol(sym.SCROLL_LOCKS,  (yytext()));
          }
        case 445: break;
        case 16: 
          { return symbol(sym.PUNTO, (yytext()));
          }
        case 446: break;
        case 147: 
          { return symbol(sym.CREATE,  (yytext()));
          }
        case 447: break;
        case 173: 
          { return symbol(sym.NOCHECK,  (yytext()));
          }
        case 448: break;
        case 29: 
          { return symbol(sym.AS,  (yytext()));
          }
        case 449: break;
        case 102: 
          { return symbol(sym.SELF,  (yytext()));
          }
        case 450: break;
        case 157: 
          { return symbol(sym.SCROLL,  (yytext()));
          }
        case 451: break;
        case 125: 
          { return symbol(sym.PAUSE,  (yytext()));
          }
        case 452: break;
        case 64: 
          { return symbol(sym.BIT,  (yytext()));
          }
        case 453: break;
        case 211: 
          { return symbol(sym.CLUSTERED,  (yytext()));
          }
        case 454: break;
        case 88: 
          { return symbol(sym.NEXT,  (yytext()));
          }
        case 455: break;
        case 122: 
          { return symbol(sym.ORDER,  (yytext()));
          }
        case 456: break;
        case 154: 
          { return symbol(sym.INSERT,  (yytext()));
          }
        case 457: break;
        case 83: 
          { return symbol(sym.EXEC,  (yytext()));
          }
        case 458: break;
        case 52: 
          { return symbol(sym.OPOR, (yytext()));
          }
        case 459: break;
        case 135: 
          { return symbol(sym.GROUP,  (yytext()));
          }
        case 460: break;
        case 138: 
          { return symbol(sym.ACTION,  (yytext()));
          }
        case 461: break;
        case 204: 
          { return symbol(sym.FILENAME,  (yytext()));
          }
        case 462: break;
        case 161: 
          { return symbol(sym.MODIFY,  (yytext()));
          }
        case 463: break;
        case 65: 
          { return symbol(sym.LOG,  (yytext()));
          }
        case 464: break;
        case 109: 
          { return symbol(sym.ABORT,  (yytext()));
          }
        case 465: break;
        case 255: 
          { return symbol(sym.STATISTICS_NORECOMPUTE,  (yytext()));
          }
        case 466: break;
        case 207: 
          { return symbol(sym.TRANSLATE,  (yytext()));
          }
        case 467: break;
        case 79: 
          { return symbol(sym.TRIM,  (yytext()));
          }
        case 468: break;
        case 46: 
          { return symbol(sym.DOBLEIGUAL, (yytext()));
          }
        case 469: break;
        case 121: 
          { return symbol(sym.CHECK,  (yytext()));
          }
        case 470: break;
        case 71: 
          { return symbol(sym.INT,  (yytext()));
          }
        case 471: break;
        case 54: 
          { return symbol(sym.BRACKETS, (yytext()));
          }
        case 472: break;
        case 34: 
          { return symbol(sym.OF,  (yytext()));
          }
        case 473: break;
        case 56: 
          { return symbol(sym.CORCHETES, (yytext()));
          }
        case 474: break;
        case 201: 
          { return symbol(sym.IDENTITY,  (yytext()));
          }
        case 475: break;
        case 37: 
          { return symbol(sym.IS,  (yytext()));
          }
        case 476: break;
        case 183: 
          { return symbol(sym.PARTIAL,  (yytext()));
          }
        case 477: break;
        case 119: 
          { return symbol(sym.CROSS,  (yytext()));
          }
        case 478: break;
        case 123: 
          { return symbol(sym.OUTER,  (yytext()));
          }
        case 479: break;
        case 77: 
          { return symbol(sym.KEY,  (yytext()));
          }
        case 480: break;
        case 193: 
          { return symbol(sym.TRUNCATE,  (yytext()));
          }
        case 481: break;
        case 105: 
          { return symbol(sym.WITH,  (yytext()));
          }
        case 482: break;
        case 12: 
          { { 
                      return symbol(sym.MAYORQUE, (yytext()));}
          }
        case 483: break;
        case 221: 
          { return symbol(sym.REORGANIZE,  (yytext()));
          }
        case 484: break;
        case 72: 
          { return symbol(sym.FOR,  (yytext()));
          }
        case 485: break;
        case 95: 
          { return symbol(sym.OPEN,  (yytext()));
          }
        case 486: break;
        case 251: 
          { return symbol(sym.DEFAULT_LANGUAGE,  (yytext()));
          }
        case 487: break;
        case 206: 
          { return symbol(sym.SMALLINT,  (yytext()));
          }
        case 488: break;
        case 7: 
          { return symbol(sym.MULTI, (yytext()));
          }
        case 489: break;
        case 228: 
          { return symbol(sym.FILLFACTOR,  (yytext()));
          }
        case 490: break;
        case 90: 
          { return symbol(sym.NONE,  (yytext()));
          }
        case 491: break;
        case 94: 
          { return symbol(sym.DROP,  (yytext()));
          }
        case 492: break;
        case 11: 
          { return symbol(sym.IGUAL, (yytext()));
          }
        case 493: break;
        case 195: 
          { return symbol(sym.ROLLBACK,  (yytext()));
          }
        case 494: break;
        case 214: 
          { return symbol(sym.PERSISTED,  (yytext()));
          }
        case 495: break;
        case 210: 
          { return symbol(sym.UNLIMITED,  (yytext()));
          }
        case 496: break;
        case 93: 
          { return symbol(sym.DESC,  (yytext()));
          }
        case 497: break;
        case 134: 
          { return symbol(sym.WHILE,  (yytext()));
          }
        case 498: break;
        case 85: 
          { return symbol(sym.ROWS,  (yytext()));
          }
        case 499: break;
        case 196: 
          { return symbol(sym.CONTAINS,  (yytext()));
          }
        case 500: break;
        case 8: 
          { return symbol(sym.SUMA, (yytext()));
          }
        case 501: break;
        case 181: 
          { return symbol(sym.DISABLE,  (yytext()));
          }
        case 502: break;
        case 59: 
          { return symbol(sym.ALL,  (yytext()));
          }
        case 503: break;
        case 42: 
          { return symbol(sym.STRINGA, (yytext()));
          }
        case 504: break;
        case 104: 
          { return symbol(sym.VIEW,  (yytext()));
          }
        case 505: break;
        case 179: 
          { return symbol(sym.DECIMAL,  (yytext()));
          }
        case 506: break;
        case 191: 
          { return symbol(sym.WITHOUT,  (yytext()));
          }
        case 507: break;
        case 89: 
          { return symbol(sym.NULL,  (yytext()));
          }
        case 508: break;
        case 248: 
          { return symbol(sym.IGNORE_DUP_KEY,  (yytext()));
          }
        case 509: break;
        case 238: 
          { return symbol(sym.TEXTIMAGE_ON,  (yytext()));
          }
        case 510: break;
        case 62: 
          { return symbol(sym.ASC,  (yytext()));
          }
        case 511: break;
        case 252: 
          { return symbol(sym.ATTACH_REBUILD_LOG,  (yytext()));
          }
        case 512: break;
        case 1: 
          { 
          }
        case 513: break;
        case 32: 
          { return symbol(sym.OR,  (yytext()));
          }
        case 514: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
