/* The following code was generated by JFlex 1.4.3 on 21/09/19 05:07 PM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/09/19 05:07 PM from the specification file
 * <tt>C:/Users/jadel/Desktop/Compiladores-2019/minisql/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\2\0\1\6\22\0\1\71\1\21\1\0\1\34"+
    "\1\0\1\15\1\22\1\7\1\30\1\31\1\13\1\14\1\24\1\11"+
    "\1\25\1\12\1\2\11\2\1\0\1\23\1\16\1\17\1\20\1\0"+
    "\1\33\1\37\1\56\1\50\1\40\1\43\1\65\1\61\1\52\1\54"+
    "\1\67\1\57\1\41\1\63\1\45\1\53\1\60\1\70\1\44\1\47"+
    "\1\42\1\51\1\64\1\62\1\66\1\46\1\55\1\26\1\0\1\27"+
    "\1\0\1\36\1\0\4\1\1\35\22\1\1\1\2\1\1\32\1\4"+
    "\1\3\66\0\1\10\uff4b\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\2\1\6\1\1"+
    "\2\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\2\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\30\3\1\32\1\33"+
    "\1\0\1\34\1\0\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\3\1\50"+
    "\2\3\1\51\24\3\1\52\17\3\1\53\30\3\1\54"+
    "\1\55\4\3\1\56\1\3\1\57\1\60\1\3\1\61"+
    "\4\3\1\62\17\3\1\63\23\3\4\0\1\64\1\65"+
    "\1\66\1\3\1\67\1\70\1\71\1\3\1\72\3\3"+
    "\1\73\1\3\1\74\4\3\1\75\34\3\1\76\3\3"+
    "\1\77\30\3\1\100\6\3\1\101\7\3\1\102\5\3"+
    "\1\103\23\3\1\104\15\3\1\105\2\3\1\106\17\3"+
    "\1\107\1\110\1\3\1\111\13\3\1\112\12\3\1\113"+
    "\3\3\1\114\12\3\1\115\4\3\1\32\1\116\7\3"+
    "\1\117\2\3\1\120\1\121\4\3\1\122\1\123\5\3"+
    "\1\124\1\125\1\3\1\126\2\3\1\127\1\130\4\3"+
    "\1\131\3\3\1\132\2\3\1\133\2\3\1\134\1\3"+
    "\1\135\1\136\1\137\1\3\1\0\3\3\1\140\1\3"+
    "\1\141\2\3\1\142\1\143\10\3\1\144\1\3\1\145"+
    "\6\3\1\146\1\3\1\147\1\3\1\150\2\3\1\151"+
    "\1\152\15\3\1\153\1\154\7\3\1\155\1\156\7\3"+
    "\1\157\21\3\1\160\5\3\1\161\1\3\1\162\4\3"+
    "\1\163\1\164\5\3\1\165\7\3\1\166\5\3\1\167"+
    "\1\170\1\3\1\171\2\3\1\172\4\3\1\173\12\3"+
    "\1\174\3\3\1\175\1\3\1\176\1\177\10\3\1\200"+
    "\4\3\1\201\1\202\5\3\1\203\1\3\1\204\1\3"+
    "\1\205\24\3\1\206\1\207\1\210\1\211\1\3\1\212"+
    "\13\3\1\0\24\3\1\213\2\3\1\214\1\215\21\3"+
    "\1\216\3\3\1\217\5\3\1\220\1\3\1\221\4\3"+
    "\1\222\11\3\1\223\2\3\1\224\3\3\1\225\1\226"+
    "\1\3\1\227\2\3\1\230\1\3\1\231\11\3\1\232"+
    "\3\3\1\233\4\3\1\234\4\3\1\235\1\236\11\3"+
    "\1\237\1\240\4\3\1\241\1\3\1\242\1\243\1\3"+
    "\1\244\1\245\1\3\1\246\1\3\1\247\1\250\1\3"+
    "\1\251\1\3\1\252\2\3\1\253\1\254\1\255\4\3"+
    "\1\256\1\3\1\257\2\3\1\260\4\3\1\261\5\3"+
    "\1\262\1\263\6\3\1\264\14\3\1\265\1\0\1\266"+
    "\3\3\1\267\1\270\3\3\1\271\4\3\1\272\1\273"+
    "\6\3\1\274\4\3\1\275\4\3\1\276\2\3\1\277"+
    "\1\300\12\3\1\301\1\3\1\302\5\3\1\303\7\3"+
    "\1\304\1\305\2\3\1\306\1\307\2\3\1\310\1\311"+
    "\13\3\1\312\5\3\1\313\1\3\1\314\2\3\1\315"+
    "\7\3\1\316\1\3\1\317\4\3\1\320\1\321\1\322"+
    "\17\3\1\323\1\324\1\325\7\3\1\326\10\3\1\327"+
    "\1\330\2\3\1\0\1\3\1\331\1\332\5\3\1\333"+
    "\6\3\1\334\1\3\1\335\1\3\1\336\1\3\1\337"+
    "\1\340\1\341\10\3\1\342\1\3\1\343\1\344\1\3"+
    "\1\345\4\3\1\346\4\3\1\347\1\3\1\350\1\351"+
    "\1\352\1\353\5\3\1\354\2\3\1\355\4\3\1\356"+
    "\1\3\1\357\3\3\1\360\1\3\1\361\1\362\2\3"+
    "\1\363\1\3\1\364\2\3\1\365\2\3\1\0\1\366"+
    "\1\367\2\3\1\370\1\371\1\3\1\372\2\3\1\373"+
    "\1\374\1\3\1\375\2\3\1\376\2\3\1\377\1\3"+
    "\1\u0100\2\3\1\u0101\2\3\1\u0102\1\3\1\u0103\2\3"+
    "\1\u0104\1\u0105\2\3\1\u0106\1\u0107\1\u0108\3\3\1\u0109"+
    "\1\u010a\1\3\1\u010b\7\3\1\u010c\1\u010d\1\u010e\1\u010f"+
    "\1\3\1\u0110\5\3\1\u0111\2\3\1\u0112\1\u0113\3\3"+
    "\1\u0114\4\3\1\u0115\1\u0116\2\3\1\u0117\5\3\1\u0118"+
    "\3\3\1\u0119\1\3\1\u011a\1\0\1\u011b\1\u011c\1\3"+
    "\1\u011d\10\3\1\u011e\1\3\1\u011f\2\3\1\u0120\1\3"+
    "\1\u0121\1\u0122\13\3\1\u0123\1\3\1\u0124\4\3\1\u0125"+
    "\1\3\1\u0126\10\3\1\u0127\2\3\1\u0128\1\u0129\1\3"+
    "\1\u012a\1\u012b\1\u012c\1\3\1\u012d\1\u012e\1\3\1\u012f"+
    "\1\0\3\3\1\u0130\1\u0131\1\u0132\2\3\1\u0133\10\3"+
    "\1\u0134\1\u0135\1\3\1\u0136\5\3\1\u0137\5\3\1\u0138"+
    "\2\3\1\u0139\1\u013a\1\u013b\2\3\1\u013c\3\3\1\u013d"+
    "\1\u013e\1\0\1\3\1\u013f\1\3\1\u0140\1\u0141\1\u0142"+
    "\1\u0143\1\u0144\1\u0145\2\3\1\u0146\1\u0147\5\3\1\u0148"+
    "\3\3\1\u0149\3\3\1\u014a\3\3\1\u014b\1\u014c\1\0"+
    "\4\3\1\u014d\1\u014e\3\3\1\u014f\1\u0150\1\u0151\3\3"+
    "\1\u0152\2\3\1\u0153\1\3\1\u0154\1\u0155\1\3\1\u0156"+
    "\4\3\1\u0157\1\u0158\2\3\1\u0159\5\3\1\u015a\1\3"+
    "\1\u015b\4\3\1\u015c\3\3\1\u015d\2\3\1\u015e\15\3"+
    "\1\u015f\1\3\1\u0160\6\3\1\u0161";

  private static int [] zzUnpackAction() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\350\0\72\0\u0122"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\72\0\72\0\72\0\u0244"+
    "\0\u027e\0\u02b8\0\u02f2\0\u032c\0\72\0\72\0\72\0\u0366"+
    "\0\72\0\u03a0\0\72\0\u03da\0\72\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\72"+
    "\0\u015c\0\72\0\u0196\0\u09f8\0\u0a32\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\u0a6c\0\u0aa6"+
    "\0\164\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\164\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\164\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8"+
    "\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8"+
    "\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\164\0\164\0\u259c\0\u25d6\0\164\0\164\0\164"+
    "\0\u2610\0\164\0\u264a\0\u2684\0\u26be\0\164\0\u26f8\0\164"+
    "\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8"+
    "\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98"+
    "\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68"+
    "\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38"+
    "\0\u2e72\0\164\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce"+
    "\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e"+
    "\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e"+
    "\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\164\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4"+
    "\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\164\0\u3830\0\u386a"+
    "\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a"+
    "\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a"+
    "\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda"+
    "\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa"+
    "\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a"+
    "\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a"+
    "\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a"+
    "\0\u4554\0\164\0\u458e\0\164\0\u45c8\0\u4602\0\u463c\0\u4676"+
    "\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2\0\u480c\0\164"+
    "\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc"+
    "\0\u4a16\0\u4a50\0\164\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72"+
    "\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42"+
    "\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u24ee\0\72"+
    "\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\164"+
    "\0\u506e\0\u50a8\0\164\0\u50e2\0\u511c\0\u5156\0\u5190\0\u51ca"+
    "\0\164\0\164\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec\0\164"+
    "\0\164\0\u5326\0\164\0\u5360\0\u539a\0\164\0\164\0\u53d4"+
    "\0\u540e\0\u5448\0\u5482\0\164\0\u54bc\0\u54f6\0\u5530\0\u556a"+
    "\0\u55a4\0\u55de\0\164\0\u5618\0\u5652\0\164\0\u568c\0\164"+
    "\0\u56c6\0\164\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822"+
    "\0\u585c\0\164\0\u5896\0\u58d0\0\u590a\0\164\0\u5944\0\u597e"+
    "\0\u59b8\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\164\0\u5b14"+
    "\0\164\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\164"+
    "\0\u5caa\0\u5ce4\0\u5d1e\0\164\0\u5d58\0\u5d92\0\164\0\164"+
    "\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28\0\u5f62"+
    "\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084\0\164\0\164\0\u60be"+
    "\0\u60f8\0\u6132\0\u616c\0\u61a6\0\u61e0\0\u621a\0\164\0\164"+
    "\0\u6254\0\u628e\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0\0\u63ea"+
    "\0\u6424\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546\0\u6580\0\u65ba"+
    "\0\u65f4\0\u662e\0\u6668\0\u66a2\0\u66dc\0\u6716\0\u6750\0\u678a"+
    "\0\u67c4\0\164\0\u67fe\0\u6838\0\u6872\0\u68ac\0\u68e6\0\164"+
    "\0\u6920\0\164\0\u695a\0\u6994\0\u69ce\0\u6a08\0\u6a42\0\u6a7c"+
    "\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e\0\164\0\u6bd8\0\u6c12"+
    "\0\u6c4c\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34\0\164\0\u6d6e\0\u6da8"+
    "\0\u6de2\0\u6e1c\0\u6e56\0\164\0\164\0\u6e90\0\164\0\u6eca"+
    "\0\u6f04\0\164\0\u6f3e\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\u7060"+
    "\0\u709a\0\u70d4\0\u710e\0\u7148\0\u7182\0\u71bc\0\u71f6\0\u7230"+
    "\0\u726a\0\164\0\u72a4\0\u72de\0\u7318\0\u7352\0\u738c\0\164"+
    "\0\u73c6\0\u7400\0\u743a\0\u7474\0\u74ae\0\u74e8\0\u7522\0\u755c"+
    "\0\u7596\0\164\0\u75d0\0\u760a\0\u7644\0\u767e\0\164\0\164"+
    "\0\u76b8\0\u76f2\0\u772c\0\u7766\0\u77a0\0\164\0\u77da\0\164"+
    "\0\u7814\0\164\0\u784e\0\u7888\0\u78c2\0\u78fc\0\u7936\0\u7970"+
    "\0\u79aa\0\u79e4\0\u7a1e\0\u7a58\0\u7a92\0\u7acc\0\u7b06\0\u7b40"+
    "\0\u7b7a\0\u7bb4\0\u7bee\0\u7c28\0\u7c62\0\u7c9c\0\164\0\164"+
    "\0\164\0\164\0\u7cd6\0\u7d10\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8"+
    "\0\u7e32\0\u7e6c\0\u7ea6\0\u7ee0\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8"+
    "\0\u8002\0\u803c\0\u8076\0\u80b0\0\u80ea\0\u8124\0\u815e\0\u8198"+
    "\0\u81d2\0\u820c\0\u8246\0\u8280\0\u82ba\0\u82f4\0\u832e\0\u8368"+
    "\0\u83a2\0\u83dc\0\u8416\0\u8450\0\164\0\u848a\0\u84c4\0\164"+
    "\0\164\0\u84fe\0\u8538\0\u8572\0\u85ac\0\u85e6\0\u8620\0\u865a"+
    "\0\u8694\0\u86ce\0\u8708\0\u8742\0\u877c\0\u87b6\0\u87f0\0\u882a"+
    "\0\u8864\0\u889e\0\164\0\u88d8\0\u8912\0\u894c\0\164\0\u8986"+
    "\0\u89c0\0\u89fa\0\u8a34\0\u8a6e\0\164\0\u8aa8\0\164\0\u8ae2"+
    "\0\u8b1c\0\u8b56\0\u8b90\0\u8bca\0\u8c04\0\u8c3e\0\u8c78\0\u8cb2"+
    "\0\u8cec\0\u8d26\0\u8d60\0\u8d9a\0\u8dd4\0\164\0\u8e0e\0\u8e48"+
    "\0\164\0\u8e82\0\u8ebc\0\u8ef6\0\164\0\164\0\u8f30\0\164"+
    "\0\u8f6a\0\u8fa4\0\164\0\u8fde\0\164\0\u9018\0\u9052\0\u908c"+
    "\0\u90c6\0\u9100\0\u913a\0\u9174\0\u91ae\0\u91e8\0\164\0\u9222"+
    "\0\u925c\0\u9296\0\164\0\u92d0\0\u930a\0\u9344\0\u937e\0\164"+
    "\0\u93b8\0\u93f2\0\u942c\0\u9466\0\164\0\164\0\u94a0\0\u94da"+
    "\0\u9514\0\u954e\0\u9588\0\u95c2\0\u95fc\0\u9636\0\u9670\0\164"+
    "\0\164\0\u96aa\0\u96e4\0\u971e\0\u9758\0\164\0\u9792\0\164"+
    "\0\164\0\u97cc\0\u9806\0\164\0\u9840\0\164\0\u987a\0\164"+
    "\0\164\0\u98b4\0\164\0\u98ee\0\u9928\0\u9962\0\u999c\0\164"+
    "\0\164\0\164\0\u99d6\0\u9a10\0\u9a4a\0\u9a84\0\164\0\u9abe"+
    "\0\164\0\u9af8\0\u9b32\0\164\0\u9b6c\0\u9ba6\0\u9be0\0\u9c1a"+
    "\0\164\0\u9c54\0\u9c8e\0\u9cc8\0\u9d02\0\u9d3c\0\164\0\164"+
    "\0\u9d76\0\u9db0\0\u9dea\0\u9e24\0\u9e5e\0\u9e98\0\164\0\u9ed2"+
    "\0\u9f0c\0\u9f46\0\u9f80\0\u9fba\0\u9ff4\0\ua02e\0\ua068\0\ua0a2"+
    "\0\ua0dc\0\ua116\0\ua150\0\164\0\ua18a\0\164\0\ua1c4\0\ua1fe"+
    "\0\ua238\0\ua272\0\164\0\ua2ac\0\ua2e6\0\ua320\0\164\0\ua35a"+
    "\0\ua394\0\ua3ce\0\ua408\0\164\0\164\0\ua442\0\ua47c\0\ua4b6"+
    "\0\ua4f0\0\ua52a\0\ua564\0\164\0\ua59e\0\ua5d8\0\ua612\0\ua64c"+
    "\0\164\0\ua686\0\ua6c0\0\ua6fa\0\ua734\0\164\0\ua76e\0\ua7a8"+
    "\0\164\0\164\0\ua7e2\0\ua81c\0\ua856\0\ua890\0\ua8ca\0\ua904"+
    "\0\ua93e\0\ua978\0\ua9b2\0\ua9ec\0\164\0\uaa26\0\164\0\uaa60"+
    "\0\uaa9a\0\uaad4\0\uab0e\0\uab48\0\164\0\uab82\0\uabbc\0\uabf6"+
    "\0\uac30\0\uac6a\0\uaca4\0\uacde\0\164\0\164\0\uad18\0\uad52"+
    "\0\uad8c\0\164\0\uadc6\0\uae00\0\164\0\164\0\uae3a\0\uae74"+
    "\0\uaeae\0\uaee8\0\uaf22\0\uaf5c\0\uaf96\0\uafd0\0\ub00a\0\ub044"+
    "\0\ub07e\0\164\0\ub0b8\0\ub0f2\0\ub12c\0\ub166\0\ub1a0\0\164"+
    "\0\ub1da\0\164\0\ub214\0\ub24e\0\164\0\ub288\0\ub2c2\0\ub2fc"+
    "\0\ub336\0\ub370\0\ub3aa\0\ub3e4\0\164\0\ub41e\0\164\0\ub458"+
    "\0\ub492\0\ub4cc\0\ub506\0\164\0\164\0\164\0\ub540\0\ub57a"+
    "\0\ub5b4\0\ub5ee\0\ub628\0\ub662\0\ub69c\0\ub6d6\0\ub710\0\ub74a"+
    "\0\ub784\0\ub7be\0\ub7f8\0\ub832\0\ub86c\0\164\0\164\0\164"+
    "\0\ub8a6\0\ub8e0\0\ub91a\0\ub954\0\ub98e\0\ub9c8\0\uba02\0\164"+
    "\0\uba3c\0\uba76\0\ubab0\0\ubaea\0\ubb24\0\ubb5e\0\ubb98\0\ubbd2"+
    "\0\164\0\164\0\ubc0c\0\ubc46\0\ubc80\0\ubcba\0\164\0\164"+
    "\0\ubcf4\0\ubd2e\0\ubd68\0\ubda2\0\ubddc\0\164\0\ube16\0\ube50"+
    "\0\ube8a\0\ubec4\0\ubefe\0\ubf38\0\164\0\ubf72\0\164\0\ubfac"+
    "\0\164\0\ubfe6\0\164\0\uc020\0\164\0\uc05a\0\uc094\0\uc0ce"+
    "\0\uc108\0\uc142\0\uc17c\0\uc1b6\0\uc1f0\0\164\0\uc22a\0\164"+
    "\0\uc264\0\uc29e\0\uc2d8\0\uc312\0\uc34c\0\uc386\0\uc3c0\0\164"+
    "\0\uc3fa\0\uc434\0\uc46e\0\uc4a8\0\uc4e2\0\uc51c\0\164\0\164"+
    "\0\164\0\164\0\uc556\0\uc590\0\uc5ca\0\uc604\0\uc63e\0\164"+
    "\0\uc678\0\uc6b2\0\164\0\uc6ec\0\uc726\0\uc760\0\uc79a\0\164"+
    "\0\uc7d4\0\164\0\uc80e\0\uc848\0\uc882\0\164\0\uc8bc\0\164"+
    "\0\164\0\uc8f6\0\uc930\0\164\0\uc96a\0\164\0\uc9a4\0\uc9de"+
    "\0\164\0\uca18\0\uca52\0\uca8c\0\164\0\164\0\ucac6\0\ucb00"+
    "\0\164\0\164\0\ucb3a\0\164\0\ucb74\0\ucbae\0\164\0\164"+
    "\0\ucbe8\0\164\0\ucc22\0\ucc5c\0\164\0\ucc96\0\uccd0\0\164"+
    "\0\ucd0a\0\164\0\ucd44\0\ucd7e\0\164\0\ucdb8\0\ucdf2\0\164"+
    "\0\uce2c\0\164\0\uce66\0\ucea0\0\72\0\164\0\uceda\0\ucf14"+
    "\0\164\0\164\0\164\0\ucf4e\0\ucf88\0\ucfc2\0\164\0\164"+
    "\0\ucffc\0\164\0\ud036\0\ud070\0\ud0aa\0\ud0e4\0\ud11e\0\ud158"+
    "\0\ud192\0\164\0\164\0\164\0\164\0\ud1cc\0\164\0\ud206"+
    "\0\ud240\0\ud27a\0\ud2b4\0\ud2ee\0\164\0\ud328\0\ud362\0\ud39c"+
    "\0\164\0\ud3d6\0\ud410\0\ud44a\0\164\0\ud484\0\ud4be\0\ud4f8"+
    "\0\ud532\0\164\0\ud56c\0\ud5a6\0\ud5e0\0\164\0\ud61a\0\ud654"+
    "\0\ud68e\0\ud6c8\0\ud702\0\164\0\ud73c\0\ud776\0\ud7b0\0\164"+
    "\0\ud7ea\0\164\0\ud824\0\ud85e\0\164\0\ud898\0\164\0\ud8d2"+
    "\0\ud90c\0\ud946\0\ud980\0\ud9ba\0\ud9f4\0\uda2e\0\uda68\0\164"+
    "\0\udaa2\0\164\0\udadc\0\udb16\0\164\0\udb50\0\164\0\164"+
    "\0\udb8a\0\udbc4\0\udbfe\0\udc38\0\udc72\0\udcac\0\udce6\0\udd20"+
    "\0\udd5a\0\udd94\0\uddce\0\164\0\ude08\0\164\0\ude42\0\ude7c"+
    "\0\udeb6\0\udef0\0\udf2a\0\udf64\0\164\0\udf9e\0\udfd8\0\ue012"+
    "\0\ue04c\0\ue086\0\ue0c0\0\ue0fa\0\ue134\0\164\0\ue16e\0\ue1a8"+
    "\0\164\0\164\0\ue1e2\0\164\0\164\0\164\0\ue21c\0\164"+
    "\0\164\0\ue256\0\164\0\ue290\0\ue2ca\0\ue304\0\ue33e\0\164"+
    "\0\164\0\164\0\ue378\0\ue3b2\0\164\0\ue3ec\0\ue426\0\ue460"+
    "\0\ue49a\0\ue4d4\0\ue50e\0\ue548\0\ue582\0\164\0\164\0\ue5bc"+
    "\0\164\0\ue5f6\0\ue630\0\ue66a\0\ue6a4\0\ue6de\0\164\0\ue718"+
    "\0\ue752\0\ue78c\0\ue7c6\0\ue800\0\164\0\ue83a\0\ue874\0\164"+
    "\0\ue8ae\0\164\0\ue8e8\0\ue922\0\164\0\ue95c\0\ue996\0\ue9d0"+
    "\0\164\0\164\0\uea0a\0\uea44\0\164\0\uea7e\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\ueab8\0\ueaf2\0\164\0\164"+
    "\0\ueb2c\0\ueb66\0\ueba0\0\uebda\0\uec14\0\164\0\uec4e\0\uec88"+
    "\0\uecc2\0\164\0\uecfc\0\ued36\0\ued70\0\164\0\uedaa\0\uede4"+
    "\0\uee1e\0\164\0\164\0\uee58\0\uee92\0\ueecc\0\uef06\0\uef40"+
    "\0\164\0\164\0\uef7a\0\uefb4\0\uefee\0\164\0\uf028\0\164"+
    "\0\uf062\0\uf09c\0\uf0d6\0\164\0\uf110\0\uf14a\0\72\0\uf184"+
    "\0\164\0\164\0\uf1be\0\164\0\uf1f8\0\uf232\0\uf26c\0\uf2a6"+
    "\0\164\0\164\0\uf2e0\0\uf31a\0\164\0\uf354\0\uf38e\0\uf3c8"+
    "\0\uf402\0\uf43c\0\164\0\uf476\0\164\0\uf4b0\0\uf4ea\0\uf524"+
    "\0\uf55e\0\164\0\uf598\0\uf5d2\0\uf60c\0\164\0\uf646\0\uf680"+
    "\0\164\0\uf6ba\0\uf6f4\0\uf72e\0\uf768\0\uf7a2\0\uf7dc\0\uf816"+
    "\0\uf850\0\uf88a\0\uf8c4\0\uf8fe\0\uf938\0\uf972\0\164\0\uf9ac"+
    "\0\164\0\uf9e6\0\ufa20\0\ufa5a\0\ufa94\0\uface\0\ufb08\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\3\1\2\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\3\1\66"+
    "\1\3\1\10\73\0\2\3\32\0\34\3\3\0\1\4"+
    "\22\0\1\67\50\0\1\70\73\0\1\10\62\0\1\10"+
    "\5\71\1\0\1\71\1\72\62\71\5\73\1\0\2\73"+
    "\1\72\61\73\11\0\1\74\73\0\1\75\75\0\1\76"+
    "\71\0\1\77\71\0\1\100\71\0\1\101\74\0\1\102"+
    "\76\0\1\103\73\0\1\104\43\0\1\105\122\0\1\106"+
    "\36\0\2\3\32\0\3\3\1\107\1\110\1\111\1\3"+
    "\1\112\1\113\1\3\1\114\1\115\1\116\4\3\1\117"+
    "\5\3\1\120\4\3\2\0\2\3\32\0\2\3\1\121"+
    "\3\3\1\122\1\123\4\3\1\124\1\3\1\125\1\126"+
    "\1\3\1\127\12\3\2\0\2\3\32\0\2\3\1\130"+
    "\3\3\1\131\7\3\1\132\1\133\14\3\2\0\2\3"+
    "\32\0\2\3\1\134\3\3\1\135\1\136\2\3\1\137"+
    "\2\3\1\140\1\141\1\142\14\3\2\0\2\3\32\0"+
    "\4\3\1\143\2\3\1\144\1\145\1\3\1\146\16\3"+
    "\1\147\2\3\2\0\2\3\32\0\2\3\1\150\3\3"+
    "\1\151\5\3\1\152\1\3\1\153\1\154\14\3\2\0"+
    "\2\3\32\0\2\3\1\155\3\3\1\156\4\3\1\157"+
    "\1\160\1\3\1\161\15\3\2\0\2\3\32\0\6\3"+
    "\1\162\25\3\2\0\2\3\32\0\2\3\1\163\2\3"+
    "\1\164\1\165\2\3\1\166\1\3\1\167\1\170\1\171"+
    "\1\172\1\173\3\3\1\174\2\3\1\175\4\3\1\176"+
    "\2\0\2\3\32\0\2\3\1\177\1\3\1\200\2\3"+
    "\1\201\4\3\1\202\1\203\1\204\15\3\2\0\2\3"+
    "\32\0\10\3\1\205\1\3\1\206\10\3\1\207\10\3"+
    "\2\0\2\3\32\0\2\3\1\210\13\3\1\211\15\3"+
    "\2\0\2\3\32\0\7\3\1\212\1\213\2\3\1\214"+
    "\1\215\6\3\1\216\3\3\1\217\1\220\3\3\2\0"+
    "\2\3\32\0\3\3\1\221\4\3\1\222\1\3\1\223"+
    "\13\3\1\224\1\3\1\225\3\3\2\0\2\3\32\0"+
    "\16\3\1\226\15\3\2\0\2\3\32\0\2\3\1\227"+
    "\3\3\1\230\1\231\1\3\1\232\2\3\1\233\1\3"+
    "\1\234\1\235\14\3\2\0\2\3\32\0\6\3\1\236"+
    "\10\3\1\237\14\3\2\0\2\3\32\0\2\3\1\240"+
    "\1\3\1\241\1\3\1\242\1\243\4\3\1\244\1\3"+
    "\1\245\1\246\14\3\2\0\2\3\32\0\4\3\1\247"+
    "\1\3\1\250\1\251\6\3\1\252\15\3\2\0\2\3"+
    "\32\0\2\3\1\253\4\3\1\254\5\3\1\255\1\256"+
    "\1\257\14\3\2\0\2\3\32\0\2\3\1\260\3\3"+
    "\1\261\7\3\1\262\1\263\14\3\2\0\2\3\32\0"+
    "\2\3\1\264\14\3\1\265\14\3\2\0\2\3\32\0"+
    "\2\3\1\266\1\3\1\267\1\3\1\270\1\271\4\3"+
    "\1\272\1\3\1\273\1\274\14\3\2\0\2\3\32\0"+
    "\16\3\1\275\15\3\3\0\1\67\1\0\1\276\4\0"+
    "\1\277\2\0\1\277\20\0\1\276\5\0\1\276\26\0"+
    "\5\74\1\0\64\74\12\75\1\300\1\301\56\75\1\0"+
    "\2\3\32\0\2\3\1\302\1\303\30\3\2\0\2\3"+
    "\32\0\4\3\1\304\1\305\26\3\2\0\2\3\32\0"+
    "\6\3\1\306\25\3\2\0\2\3\32\0\3\3\1\307"+
    "\5\3\1\310\22\3\2\0\2\3\32\0\12\3\1\311"+
    "\1\312\20\3\2\0\2\3\32\0\5\3\1\313\26\3"+
    "\2\0\2\3\32\0\5\3\1\314\26\3\2\0\2\3"+
    "\32\0\12\3\1\315\21\3\2\0\2\3\32\0\24\3"+
    "\1\316\7\3\2\0\2\3\32\0\5\3\1\317\3\3"+
    "\1\320\22\3\2\0\2\3\32\0\2\3\1\321\1\3"+
    "\1\322\3\3\1\323\1\3\1\324\1\325\14\3\1\326"+
    "\3\3\2\0\2\3\32\0\16\3\1\327\15\3\2\0"+
    "\2\3\32\0\26\3\1\330\5\3\2\0\2\3\32\0"+
    "\14\3\1\331\11\3\1\332\5\3\2\0\2\3\32\0"+
    "\2\3\1\333\7\3\1\334\21\3\2\0\2\3\32\0"+
    "\13\3\1\335\20\3\2\0\2\3\32\0\10\3\1\336"+
    "\1\3\1\337\21\3\2\0\2\3\32\0\2\3\1\340"+
    "\24\3\1\341\1\342\3\3\2\0\2\3\32\0\2\3"+
    "\1\343\10\3\1\344\10\3\1\345\1\346\6\3\2\0"+
    "\2\3\32\0\10\3\1\347\11\3\1\350\11\3\2\0"+
    "\2\3\32\0\21\3\1\351\12\3\2\0\2\3\32\0"+
    "\26\3\1\352\2\3\1\353\2\3\2\0\2\3\32\0"+
    "\2\3\1\354\6\3\1\355\2\3\1\356\2\3\1\357"+
    "\14\3\2\0\2\3\32\0\6\3\1\360\25\3\2\0"+
    "\2\3\32\0\6\3\1\361\25\3\2\0\2\3\32\0"+
    "\23\3\1\362\10\3\2\0\2\3\32\0\26\3\1\363"+
    "\5\3\2\0\2\3\32\0\12\3\1\364\21\3\2\0"+
    "\2\3\32\0\7\3\1\365\24\3\2\0\2\3\32\0"+
    "\3\3\1\366\30\3\2\0\2\3\32\0\13\3\1\367"+
    "\20\3\2\0\2\3\32\0\5\3\1\370\1\371\4\3"+
    "\1\372\3\3\1\373\14\3\2\0\2\3\32\0\17\3"+
    "\1\374\14\3\2\0\2\3\32\0\2\3\1\375\1\3"+
    "\1\376\1\377\4\3\1\u0100\1\u0101\7\3\1\u0102\3\3"+
    "\1\u0103\1\u0104\3\3\2\0\2\3\32\0\4\3\1\u0105"+
    "\27\3\2\0\2\3\32\0\4\3\1\u0106\20\3\1\u0107"+
    "\6\3\2\0\2\3\32\0\24\3\1\u0108\7\3\2\0"+
    "\2\3\32\0\5\3\1\u0109\20\3\1\u010a\5\3\2\0"+
    "\2\3\32\0\31\3\1\u010b\2\3\2\0\2\3\32\0"+
    "\15\3\1\u010c\16\3\2\0\2\3\32\0\4\3\1\u010d"+
    "\21\3\1\u010e\5\3\2\0\2\3\32\0\5\3\1\u010f"+
    "\2\3\1\u0110\2\3\1\u0111\20\3\2\0\2\3\32\0"+
    "\2\3\1\u0112\31\3\2\0\2\3\32\0\27\3\1\u0113"+
    "\4\3\2\0\2\3\32\0\2\3\1\u0114\31\3\2\0"+
    "\2\3\32\0\4\3\1\u0115\1\u0116\4\3\1\u0117\1\u0118"+
    "\12\3\1\u0119\5\3\2\0\2\3\32\0\12\3\1\u011a"+
    "\21\3\2\0\2\3\32\0\7\3\1\u011b\5\3\1\u011c"+
    "\16\3\2\0\2\3\32\0\21\3\1\u011d\4\3\1\u011e"+
    "\5\3\2\0\2\3\32\0\14\3\1\u011f\17\3\2\0"+
    "\2\3\32\0\26\3\1\u0120\5\3\2\0\2\3\32\0"+
    "\20\3\1\u0121\13\3\2\0\2\3\32\0\2\3\1\u0122"+
    "\31\3\2\0\2\3\32\0\2\3\1\u0123\31\3\2\0"+
    "\2\3\32\0\4\3\1\u0124\27\3\2\0\2\3\32\0"+
    "\5\3\1\u0125\4\3\1\u0126\21\3\2\0\2\3\32\0"+
    "\14\3\1\u0127\1\3\1\u0128\15\3\2\0\2\3\32\0"+
    "\6\3\1\u0129\7\3\1\u012a\15\3\2\0\2\3\32\0"+
    "\7\3\1\u012b\24\3\2\0\2\3\32\0\2\3\1\u012c"+
    "\3\3\1\u012d\25\3\2\0\2\3\32\0\2\3\1\u012e"+
    "\1\3\1\u012f\2\3\1\u0130\1\u0131\3\3\1\u0132\11\3"+
    "\1\u0133\5\3\2\0\2\3\32\0\17\3\1\u0134\2\3"+
    "\1\u0135\1\u0136\10\3\2\0\2\3\32\0\2\3\1\u0137"+
    "\3\3\1\u0138\10\3\1\u0139\14\3\2\0\2\3\32\0"+
    "\3\3\1\u013a\17\3\1\u013b\10\3\2\0\2\3\32\0"+
    "\27\3\1\u013c\4\3\2\0\2\3\32\0\4\3\1\u013d"+
    "\7\3\1\u013e\17\3\2\0\2\3\32\0\3\3\1\u013f"+
    "\30\3\2\0\2\3\32\0\4\3\1\u0140\27\3\2\0"+
    "\2\3\32\0\5\3\1\u0141\26\3\2\0\2\3\32\0"+
    "\5\3\1\u0142\26\3\2\0\2\3\32\0\5\3\1\u0143"+
    "\1\u0144\25\3\2\0\2\3\32\0\6\3\1\u0145\25\3"+
    "\2\0\2\3\32\0\30\3\1\u0146\3\3\2\0\2\3"+
    "\32\0\6\3\1\u0147\25\3\2\0\2\3\32\0\3\3"+
    "\1\u0148\1\3\1\u0149\2\3\1\u014a\1\3\1\u014b\1\u014c"+
    "\3\3\1\u014d\3\3\1\u014e\10\3\2\0\2\3\32\0"+
    "\16\3\1\u014f\15\3\2\0\2\3\32\0\26\3\1\u0150"+
    "\5\3\2\0\2\3\32\0\10\3\1\u0151\23\3\2\0"+
    "\2\3\32\0\13\3\1\u0152\20\3\2\0\2\3\32\0"+
    "\5\3\1\u0153\16\3\1\u0154\7\3\2\0\2\3\32\0"+
    "\6\3\1\u0155\7\3\1\u0156\15\3\2\0\2\3\32\0"+
    "\4\3\1\u0157\27\3\2\0\2\3\32\0\5\3\1\u0158"+
    "\26\3\2\0\2\3\32\0\5\3\1\u0159\26\3\2\0"+
    "\2\3\32\0\11\3\1\u015a\22\3\2\0\2\3\32\0"+
    "\4\3\1\u015b\27\3\2\0\2\3\32\0\3\3\1\u015c"+
    "\3\3\1\u015d\2\3\1\u015e\21\3\2\0\2\3\32\0"+
    "\2\3\1\u015f\31\3\2\0\2\3\32\0\7\3\1\u0160"+
    "\24\3\2\0\2\3\32\0\6\3\1\u0161\7\3\1\u0162"+
    "\1\u0163\14\3\2\0\2\3\32\0\21\3\1\u0164\12\3"+
    "\2\0\2\3\32\0\12\3\1\u0165\21\3\2\0\2\3"+
    "\32\0\27\3\1\u0166\4\3\2\0\2\3\32\0\16\3"+
    "\1\u0167\15\3\2\0\2\3\32\0\5\3\1\u0168\26\3"+
    "\2\0\2\3\32\0\2\3\1\u0169\13\3\1\u016a\15\3"+
    "\2\0\2\3\32\0\5\3\1\u016b\26\3\2\0\2\3"+
    "\32\0\17\3\1\u016c\14\3\2\0\2\3\32\0\17\3"+
    "\1\u016d\14\3\2\0\2\3\32\0\6\3\1\u016e\10\3"+
    "\1\u016f\14\3\2\0\2\3\32\0\7\3\1\u0170\24\3"+
    "\2\0\2\3\32\0\5\3\1\u0171\26\3\2\0\2\3"+
    "\32\0\5\3\1\u0172\23\3\1\u0173\2\3\2\0\2\3"+
    "\32\0\7\3\1\u0174\24\3\2\0\2\3\32\0\3\3"+
    "\1\u0175\4\3\1\u0176\23\3\2\0\2\3\32\0\10\3"+
    "\1\u0177\23\3\2\0\2\3\32\0\4\3\1\u0178\2\3"+
    "\1\u0179\24\3\2\0\2\3\32\0\6\3\1\u017a\25\3"+
    "\2\0\2\3\32\0\4\3\1\u017b\27\3\2\0\2\3"+
    "\32\0\16\3\1\u017c\15\3\2\0\2\3\32\0\5\3"+
    "\1\u017d\26\3\2\0\2\3\32\0\6\3\1\u017e\7\3"+
    "\1\u017f\15\3\2\0\2\3\32\0\4\3\1\u0180\3\3"+
    "\1\u0181\23\3\2\0\2\3\32\0\7\3\1\u0182\4\3"+
    "\1\u0183\17\3\2\0\2\3\32\0\4\3\1\u0184\2\3"+
    "\1\u0185\24\3\2\0\2\3\32\0\17\3\1\u0186\14\3"+
    "\3\0\1\u0187\6\0\1\277\2\0\1\277\57\0\1\u0187"+
    "\67\0\13\300\1\301\70\300\1\u0188\1\301\56\300\1\0"+
    "\2\3\32\0\16\3\1\u0189\15\3\2\0\2\3\32\0"+
    "\6\3\1\u018a\25\3\2\0\2\3\32\0\6\3\1\u018b"+
    "\25\3\2\0\2\3\32\0\17\3\1\u018c\14\3\2\0"+
    "\2\3\32\0\15\3\1\u018d\16\3\2\0\2\3\32\0"+
    "\16\3\1\u018e\15\3\2\0\2\3\32\0\2\3\1\u018f"+
    "\3\3\1\u0190\25\3\2\0\2\3\32\0\4\3\1\u0191"+
    "\27\3\2\0\2\3\32\0\6\3\1\u0192\25\3\2\0"+
    "\2\3\32\0\11\3\1\u0193\22\3\2\0\2\3\32\0"+
    "\13\3\1\u0194\20\3\2\0\2\3\32\0\4\3\1\u0195"+
    "\12\3\1\u0196\14\3\2\0\2\3\32\0\2\3\1\u0197"+
    "\3\3\1\u0198\25\3\2\0\2\3\32\0\23\3\1\u0199"+
    "\10\3\2\0\2\3\32\0\23\3\1\u019a\10\3\2\0"+
    "\2\3\32\0\21\3\1\u019b\12\3\2\0\2\3\32\0"+
    "\2\3\1\u019c\31\3\2\0\2\3\32\0\24\3\1\u019d"+
    "\7\3\2\0\2\3\32\0\5\3\1\u019e\5\3\1\u019f"+
    "\6\3\1\u01a0\11\3\2\0\2\3\32\0\13\3\1\u01a1"+
    "\20\3\2\0\2\3\32\0\24\3\1\u01a2\7\3\2\0"+
    "\2\3\32\0\5\3\1\u01a3\26\3\2\0\2\3\32\0"+
    "\3\3\1\u01a4\30\3\2\0\2\3\32\0\6\3\1\u01a5"+
    "\25\3\2\0\2\3\32\0\5\3\1\u01a6\26\3\2\0"+
    "\2\3\32\0\3\3\1\u01a7\30\3\2\0\2\3\32\0"+
    "\2\3\1\u01a8\31\3\2\0\2\3\32\0\17\3\1\u01a9"+
    "\14\3\2\0\2\3\32\0\6\3\1\u01aa\25\3\2\0"+
    "\2\3\32\0\6\3\1\u01ab\25\3\2\0\2\3\32\0"+
    "\6\3\1\u01ac\25\3\2\0\2\3\32\0\4\3\1\u01ad"+
    "\27\3\2\0\2\3\32\0\23\3\1\u01ae\10\3\2\0"+
    "\2\3\32\0\5\3\1\u01af\26\3\2\0\2\3\32\0"+
    "\10\3\1\u01b0\6\3\1\u01b1\14\3\2\0\2\3\32\0"+
    "\1\3\1\u01b2\32\3\2\0\2\3\32\0\6\3\1\u01b3"+
    "\1\3\1\u01b4\23\3\2\0\2\3\32\0\24\3\1\u01b5"+
    "\1\3\1\u01b6\5\3\2\0\2\3\32\0\33\3\1\u01b7"+
    "\2\0\2\3\32\0\10\3\1\u01b8\23\3\2\0\2\3"+
    "\32\0\6\3\1\u01b9\25\3\2\0\2\3\32\0\6\3"+
    "\1\u01ba\25\3\2\0\2\3\32\0\4\3\1\u01bb\27\3"+
    "\2\0\2\3\6\0\1\u01bc\23\0\34\3\2\0\2\3"+
    "\32\0\2\3\1\u01bd\31\3\2\0\2\3\32\0\6\3"+
    "\1\u01be\1\u01bf\24\3\2\0\2\3\32\0\13\3\1\u01c0"+
    "\20\3\2\0\2\3\32\0\6\3\1\u01c1\25\3\2\0"+
    "\2\3\32\0\5\3\1\u01c2\4\3\1\u01c3\21\3\2\0"+
    "\2\3\32\0\12\3\1\u01c4\21\3\2\0\2\3\32\0"+
    "\3\3\1\u01c5\1\u01c6\27\3\2\0\2\3\32\0\2\3"+
    "\1\u01c7\31\3\2\0\2\3\32\0\14\3\1\u01c8\17\3"+
    "\2\0\2\3\32\0\5\3\1\u01c9\26\3\2\0\2\3"+
    "\32\0\16\3\1\u01ca\15\3\2\0\2\3\32\0\4\3"+
    "\1\u01cb\27\3\2\0\2\3\32\0\6\3\1\u01cc\7\3"+
    "\1\u01cd\15\3\2\0\2\3\32\0\6\3\1\u01ce\25\3"+
    "\2\0\2\3\32\0\6\3\1\u01cf\25\3\2\0\2\3"+
    "\32\0\4\3\1\u01d0\27\3\2\0\2\3\32\0\12\3"+
    "\1\u01d1\1\u01d2\10\3\1\u01d3\7\3\2\0\2\3\32\0"+
    "\15\3\1\u01d4\16\3\2\0\2\3\32\0\14\3\1\u01d5"+
    "\2\3\1\u01d6\14\3\2\0\2\3\32\0\6\3\1\u01d7"+
    "\25\3\2\0\2\3\32\0\5\3\1\u01d8\26\3\2\0"+
    "\2\3\32\0\2\3\1\u01d9\31\3\2\0\2\3\32\0"+
    "\4\3\1\u01da\27\3\2\0\2\3\32\0\6\3\1\u01db"+
    "\25\3\2\0\2\3\32\0\6\3\1\u01dc\4\3\1\u01dd"+
    "\20\3\2\0\2\3\32\0\15\3\1\u01de\16\3\2\0"+
    "\2\3\32\0\7\3\1\u01df\24\3\2\0\2\3\32\0"+
    "\6\3\1\u01e0\25\3\2\0\2\3\32\0\5\3\1\u01e1"+
    "\26\3\2\0\2\3\32\0\6\3\1\u01e2\25\3\2\0"+
    "\2\3\32\0\14\3\1\u01e3\17\3\2\0\2\3\32\0"+
    "\12\3\1\u01e4\21\3\2\0\2\3\32\0\5\3\1\u01e5"+
    "\6\3\1\u01e6\1\3\1\u01e7\15\3\2\0\2\3\32\0"+
    "\2\3\1\u01e8\31\3\2\0\2\3\32\0\5\3\1\u01e9"+
    "\26\3\2\0\2\3\32\0\16\3\1\u01ea\15\3\2\0"+
    "\2\3\32\0\6\3\1\u01eb\25\3\2\0\2\3\32\0"+
    "\12\3\1\u01ec\21\3\2\0\2\3\32\0\5\3\1\u01ed"+
    "\26\3\2\0\2\3\32\0\6\3\1\u01ee\25\3\2\0"+
    "\2\3\32\0\6\3\1\u01ef\25\3\2\0\2\3\32\0"+
    "\13\3\1\u01f0\20\3\2\0\2\3\32\0\4\3\1\u01f1"+
    "\27\3\2\0\2\3\32\0\6\3\1\u01f2\3\3\1\u01f3"+
    "\1\u01f4\11\3\1\u01f5\6\3\2\0\2\3\32\0\2\3"+
    "\1\u01f6\31\3\2\0\2\3\32\0\5\3\1\u01f7\1\u01f8"+
    "\4\3\1\u01f9\20\3\2\0\2\3\32\0\12\3\1\u01fa"+
    "\21\3\2\0\2\3\32\0\12\3\1\u01fb\21\3\2\0"+
    "\2\3\32\0\2\3\1\u01fc\31\3\2\0\2\3\32\0"+
    "\12\3\1\u01fd\21\3\2\0\2\3\32\0\7\3\1\u01fe"+
    "\2\3\1\u01ff\21\3\2\0\2\3\32\0\7\3\1\u0200"+
    "\24\3\2\0\2\3\32\0\13\3\1\u0201\20\3\2\0"+
    "\2\3\32\0\4\3\1\u0202\27\3\2\0\2\3\32\0"+
    "\4\3\1\u0203\7\3\1\u0204\17\3\2\0\2\3\32\0"+
    "\7\3\1\u0205\24\3\2\0\2\3\32\0\5\3\1\u0206"+
    "\2\3\1\u0207\1\3\1\u0208\14\3\1\u0209\4\3\2\0"+
    "\2\3\32\0\10\3\1\u020a\23\3\2\0\2\3\32\0"+
    "\23\3\1\u020b\2\3\1\u020c\5\3\2\0\2\3\32\0"+
    "\16\3\1\u020d\14\3\1\u020e\2\0\2\3\32\0\10\3"+
    "\1\u020f\23\3\2\0\2\3\32\0\17\3\1\u0210\14\3"+
    "\2\0\2\3\32\0\24\3\1\u0211\7\3\2\0\2\3"+
    "\32\0\7\3\1\u0212\24\3\2\0\2\3\32\0\10\3"+
    "\1\u0213\23\3\2\0\2\3\32\0\2\3\1\u0214\31\3"+
    "\2\0\2\3\32\0\6\3\1\u0215\25\3\2\0\2\3"+
    "\32\0\17\3\1\u0216\14\3\2\0\2\3\32\0\3\3"+
    "\1\u0217\30\3\2\0\2\3\32\0\7\3\1\u0218\24\3"+
    "\2\0\2\3\32\0\6\3\1\u0219\25\3\2\0\2\3"+
    "\32\0\11\3\1\u021a\22\3\2\0\2\3\32\0\6\3"+
    "\1\u021b\25\3\2\0\2\3\32\0\6\3\1\u021c\14\3"+
    "\1\u021d\10\3\2\0\2\3\32\0\17\3\1\u021e\14\3"+
    "\2\0\2\3\32\0\10\3\1\u021f\23\3\2\0\2\3"+
    "\32\0\7\3\1\u0220\24\3\2\0\2\3\32\0\12\3"+
    "\1\u0221\21\3\2\0\2\3\32\0\10\3\1\u0222\23\3"+
    "\2\0\2\3\32\0\6\3\1\u0223\10\3\1\u0224\14\3"+
    "\2\0\2\3\32\0\6\3\1\u0225\7\3\1\u0226\15\3"+
    "\2\0\2\3\32\0\6\3\1\u0227\25\3\2\0\2\3"+
    "\32\0\6\3\1\u0228\25\3\2\0\2\3\32\0\4\3"+
    "\1\u0229\27\3\2\0\2\3\32\0\5\3\1\u022a\26\3"+
    "\2\0\2\3\32\0\14\3\1\u022b\17\3\2\0\2\3"+
    "\32\0\4\3\1\u022c\27\3\2\0\2\3\32\0\6\3"+
    "\1\u022d\25\3\2\0\2\3\32\0\6\3\1\u022e\25\3"+
    "\2\0\2\3\32\0\22\3\1\u022f\11\3\2\0\2\3"+
    "\32\0\25\3\1\u0230\6\3\2\0\2\3\32\0\17\3"+
    "\1\u0231\14\3\2\0\2\3\32\0\2\3\1\u0232\31\3"+
    "\2\0\2\3\32\0\25\3\1\u0233\6\3\2\0\2\3"+
    "\32\0\22\3\1\u0234\11\3\2\0\2\3\32\0\15\3"+
    "\1\u0235\16\3\2\0\2\3\32\0\1\3\1\u0236\32\3"+
    "\2\0\2\3\32\0\4\3\1\u0237\27\3\2\0\2\3"+
    "\32\0\5\3\1\u0238\26\3\2\0\2\3\32\0\13\3"+
    "\1\u0239\20\3\2\0\2\3\32\0\10\3\1\u023a\23\3"+
    "\2\0\2\3\32\0\13\3\1\u023b\20\3\2\0\2\3"+
    "\32\0\12\3\1\u023c\1\u023d\7\3\1\u023e\10\3\2\0"+
    "\2\3\32\0\13\3\1\u023f\20\3\2\0\2\3\32\0"+
    "\10\3\1\u0240\5\3\1\u0241\7\3\1\u0242\1\u0243\4\3"+
    "\2\0\2\3\32\0\4\3\1\u0244\27\3\2\0\2\3"+
    "\32\0\17\3\1\u0245\14\3\2\0\2\3\32\0\16\3"+
    "\1\u0246\15\3\2\0\2\3\32\0\21\3\1\u0247\12\3"+
    "\2\0\2\3\32\0\10\3\1\u0248\23\3\2\0\2\3"+
    "\32\0\14\3\1\u0249\17\3\2\0\2\3\32\0\16\3"+
    "\1\u024a\15\3\2\0\2\3\32\0\5\3\1\u024b\26\3"+
    "\2\0\2\3\32\0\5\3\1\u024c\26\3\2\0\2\3"+
    "\32\0\7\3\1\u024d\1\u024e\23\3\2\0\2\3\32\0"+
    "\4\3\1\u024f\27\3\2\0\2\3\32\0\22\3\1\u0250"+
    "\11\3\2\0\2\3\32\0\15\3\1\u0251\16\3\2\0"+
    "\2\3\32\0\13\3\1\u0252\20\3\2\0\2\3\32\0"+
    "\24\3\1\u0253\7\3\2\0\2\3\32\0\14\3\1\u0254"+
    "\17\3\2\0\2\3\32\0\5\3\1\u0255\26\3\2\0"+
    "\2\3\32\0\14\3\1\u0256\17\3\2\0\2\3\32\0"+
    "\14\3\1\u0257\17\3\2\0\2\3\32\0\11\3\1\u0258"+
    "\1\3\1\u0259\20\3\2\0\2\3\32\0\25\3\1\u025a"+
    "\6\3\2\0\2\3\32\0\12\3\1\u025b\21\3\2\0"+
    "\2\3\32\0\2\3\1\u025c\31\3\2\0\2\3\32\0"+
    "\13\3\1\u025d\20\3\2\0\2\3\32\0\6\3\1\u025e"+
    "\25\3\2\0\2\3\32\0\26\3\1\u025f\5\3\2\0"+
    "\2\3\32\0\4\3\1\u0260\27\3\2\0\2\3\32\0"+
    "\13\3\1\u0261\20\3\2\0\2\3\32\0\5\3\1\u0262"+
    "\1\u0263\25\3\2\0\2\3\32\0\10\3\1\u0264\23\3"+
    "\2\0\2\3\32\0\4\3\1\u0265\1\3\1\u0266\25\3"+
    "\2\0\2\3\32\0\12\3\1\u0267\21\3\2\0\2\3"+
    "\32\0\10\3\1\u0268\23\3\2\0\2\3\32\0\13\3"+
    "\1\u0269\20\3\2\0\2\3\32\0\7\3\1\u026a\24\3"+
    "\2\0\2\3\32\0\7\3\1\u026b\24\3\2\0\2\3"+
    "\32\0\16\3\1\u026c\15\3\2\0\2\3\32\0\16\3"+
    "\1\u026d\15\3\2\0\2\3\32\0\4\3\1\u026e\27\3"+
    "\2\0\2\3\32\0\21\3\1\u026f\12\3\2\0\2\3"+
    "\32\0\4\3\1\u0270\27\3\2\0\2\3\32\0\5\3"+
    "\1\u0271\26\3\2\0\2\3\32\0\7\3\1\u0272\24\3"+
    "\2\0\2\3\32\0\2\3\1\u0273\31\3\2\0\2\3"+
    "\32\0\26\3\1\u0274\5\3\2\0\2\3\32\0\14\3"+
    "\1\u0275\17\3\2\0\2\3\32\0\7\3\1\u0276\24\3"+
    "\2\0\2\3\32\0\4\3\1\u0277\27\3\2\0\2\3"+
    "\32\0\17\3\1\u0278\14\3\2\0\2\3\32\0\10\3"+
    "\1\u0279\23\3\2\0\2\3\32\0\7\3\1\u027a\7\3"+
    "\1\u027b\14\3\2\0\2\3\32\0\16\3\1\u027c\15\3"+
    "\2\0\2\3\32\0\14\3\1\u027d\17\3\2\0\2\3"+
    "\32\0\17\3\1\u027e\14\3\2\0\2\3\32\0\4\3"+
    "\1\u027f\27\3\2\0\2\3\32\0\4\3\1\u0280\27\3"+
    "\2\0\2\3\32\0\10\3\1\u0281\23\3\2\0\2\3"+
    "\32\0\7\3\1\u0282\24\3\2\0\2\3\32\0\10\3"+
    "\1\u0283\23\3\2\0\2\3\32\0\6\3\1\u0284\25\3"+
    "\2\0\2\3\32\0\16\3\1\u0285\15\3\2\0\2\3"+
    "\32\0\12\3\1\u0286\21\3\2\0\2\3\32\0\12\3"+
    "\1\u0287\21\3\2\0\2\3\32\0\4\3\1\u0288\27\3"+
    "\2\0\2\3\32\0\13\3\1\u0289\20\3\2\0\2\3"+
    "\32\0\13\3\1\u028a\20\3\2\0\2\3\32\0\24\3"+
    "\1\u028b\7\3\2\0\2\3\32\0\14\3\1\u028c\17\3"+
    "\2\0\2\3\32\0\12\3\1\u028d\5\3\1\u028e\13\3"+
    "\2\0\2\3\32\0\27\3\1\u028f\4\3\44\0\1\u0290"+
    "\27\0\2\3\32\0\23\3\1\u0291\10\3\2\0\2\3"+
    "\32\0\7\3\1\u0292\24\3\2\0\2\3\32\0\2\3"+
    "\1\u0293\31\3\2\0\2\3\32\0\14\3\1\u0294\17\3"+
    "\2\0\2\3\32\0\23\3\1\u0295\10\3\2\0\2\3"+
    "\32\0\5\3\1\u0296\26\3\2\0\2\3\32\0\6\3"+
    "\1\u0297\25\3\2\0\2\3\32\0\5\3\1\u0298\26\3"+
    "\2\0\2\3\32\0\5\3\1\u0299\26\3\2\0\2\3"+
    "\32\0\7\3\1\u029a\24\3\2\0\2\3\32\0\7\3"+
    "\1\u029b\6\3\1\u029c\15\3\2\0\2\3\32\0\10\3"+
    "\1\u029d\23\3\2\0\2\3\32\0\17\3\1\u029e\14\3"+
    "\2\0\2\3\32\0\7\3\1\u029f\24\3\2\0\2\3"+
    "\32\0\22\3\1\u02a0\11\3\2\0\2\3\32\0\7\3"+
    "\1\u02a1\24\3\2\0\2\3\32\0\21\3\1\u02a2\12\3"+
    "\2\0\2\3\32\0\16\3\1\u02a3\15\3\2\0\2\3"+
    "\32\0\14\3\1\u02a4\17\3\2\0\2\3\32\0\5\3"+
    "\1\u02a5\26\3\2\0\2\3\32\0\7\3\1\u02a6\24\3"+
    "\2\0\2\3\32\0\16\3\1\u02a7\15\3\2\0\2\3"+
    "\32\0\12\3\1\u02a8\21\3\2\0\2\3\32\0\7\3"+
    "\1\u02a9\24\3\2\0\2\3\32\0\17\3\1\u02aa\14\3"+
    "\2\0\2\3\32\0\7\3\1\u02ab\24\3\2\0\2\3"+
    "\32\0\4\3\1\u02ac\27\3\2\0\2\3\32\0\6\3"+
    "\1\u02ad\25\3\2\0\2\3\32\0\17\3\1\u02ae\14\3"+
    "\2\0\2\3\32\0\13\3\1\u02af\20\3\2\0\2\3"+
    "\32\0\12\3\1\u02b0\21\3\2\0\2\3\32\0\17\3"+
    "\1\u02b1\14\3\2\0\2\3\32\0\17\3\1\u02b2\14\3"+
    "\2\0\2\3\32\0\7\3\1\u02b3\24\3\2\0\2\3"+
    "\32\0\10\3\1\u02b4\23\3\2\0\2\3\32\0\10\3"+
    "\1\u02b5\23\3\2\0\2\3\32\0\6\3\1\u02b6\25\3"+
    "\2\0\2\3\32\0\4\3\1\u02b7\27\3\2\0\2\3"+
    "\32\0\26\3\1\u02b8\5\3\2\0\2\3\32\0\5\3"+
    "\1\u02b9\26\3\2\0\2\3\32\0\3\3\1\u02ba\30\3"+
    "\2\0\2\3\32\0\6\3\1\u02bb\25\3\2\0\2\3"+
    "\32\0\4\3\1\u02bc\27\3\2\0\2\3\32\0\7\3"+
    "\1\u02bd\24\3\2\0\2\3\32\0\5\3\1\u02be\26\3"+
    "\2\0\2\3\32\0\2\3\1\u02bf\13\3\1\u02c0\15\3"+
    "\2\0\2\3\32\0\2\3\1\u02c1\31\3\2\0\2\3"+
    "\32\0\4\3\1\u02c2\27\3\2\0\2\3\32\0\2\3"+
    "\1\u02c3\31\3\2\0\2\3\32\0\5\3\1\u02c4\26\3"+
    "\2\0\2\3\32\0\6\3\1\u02c5\25\3\2\0\2\3"+
    "\32\0\5\3\1\u02c6\26\3\2\0\2\3\32\0\12\3"+
    "\1\u02c7\21\3\2\0\2\3\32\0\6\3\1\u02c8\25\3"+
    "\2\0\2\3\32\0\16\3\1\u02c9\15\3\2\0\2\3"+
    "\32\0\1\3\1\u02ca\1\u02cb\31\3\2\0\2\3\32\0"+
    "\22\3\1\u02cc\11\3\2\0\2\3\32\0\6\3\1\u02cd"+
    "\25\3\2\0\2\3\32\0\2\3\1\u02ce\31\3\2\0"+
    "\2\3\32\0\26\3\1\u02cf\5\3\2\0\2\3\32\0"+
    "\6\3\1\u02d0\25\3\2\0\2\3\32\0\2\3\1\u02d1"+
    "\14\3\1\u02d2\14\3\2\0\2\3\32\0\6\3\1\u02d3"+
    "\25\3\2\0\2\3\32\0\5\3\1\u02d4\26\3\2\0"+
    "\2\3\32\0\6\3\1\u02d5\25\3\2\0\2\3\32\0"+
    "\5\3\1\u02d6\26\3\2\0\2\3\32\0\14\3\1\u02d7"+
    "\17\3\2\0\2\3\32\0\17\3\1\u02d8\14\3\2\0"+
    "\2\3\32\0\10\3\1\u02d9\23\3\2\0\2\3\32\0"+
    "\14\3\1\u02da\17\3\2\0\2\3\32\0\16\3\1\u02db"+
    "\15\3\2\0\2\3\32\0\27\3\1\u02dc\4\3\2\0"+
    "\2\3\32\0\6\3\1\u02dd\25\3\2\0\2\3\32\0"+
    "\24\3\1\u02de\7\3\2\0\2\3\32\0\5\3\1\u02df"+
    "\26\3\2\0\2\3\32\0\7\3\1\u02e0\24\3\2\0"+
    "\2\3\32\0\10\3\1\u02e1\23\3\2\0\2\3\32\0"+
    "\4\3\1\u02e2\27\3\2\0\2\3\32\0\7\3\1\u02e3"+
    "\24\3\2\0\2\3\32\0\5\3\1\u02e4\26\3\2\0"+
    "\2\3\32\0\7\3\1\u02e5\24\3\2\0\2\3\32\0"+
    "\14\3\1\u02e6\17\3\2\0\2\3\32\0\16\3\1\u02e7"+
    "\15\3\2\0\2\3\32\0\3\3\1\u02e8\3\3\1\u02e9"+
    "\21\3\1\u02ea\1\3\1\u02eb\2\0\2\3\32\0\4\3"+
    "\1\u02ec\27\3\2\0\2\3\32\0\6\3\1\u02ed\25\3"+
    "\2\0\2\3\32\0\5\3\1\u02ee\26\3\2\0\2\3"+
    "\32\0\31\3\1\u02ef\2\3\2\0\2\3\32\0\13\3"+
    "\1\u02f0\20\3\2\0\2\3\32\0\7\3\1\u02f1\14\3"+
    "\1\u02f2\7\3\2\0\2\3\32\0\7\3\1\u02f3\24\3"+
    "\2\0\2\3\32\0\7\3\1\u02f4\1\u02f5\23\3\2\0"+
    "\2\3\32\0\14\3\1\u02f6\17\3\2\0\2\3\32\0"+
    "\17\3\1\u02f7\14\3\2\0\2\3\32\0\5\3\1\u02f8"+
    "\26\3\2\0\2\3\32\0\2\3\1\u02f9\31\3\2\0"+
    "\2\3\32\0\3\3\1\u02fa\30\3\2\0\2\3\32\0"+
    "\14\3\1\u02fb\17\3\2\0\2\3\32\0\6\3\1\u02fc"+
    "\25\3\2\0\2\3\32\0\10\3\1\u02fd\23\3\2\0"+
    "\2\3\32\0\22\3\1\u02fe\11\3\2\0\2\3\32\0"+
    "\12\3\1\u02ff\21\3\2\0\2\3\32\0\4\3\1\u0300"+
    "\27\3\2\0\2\3\32\0\17\3\1\u0301\14\3\2\0"+
    "\2\3\32\0\2\3\1\u0302\31\3\2\0\2\3\32\0"+
    "\6\3\1\u0303\25\3\2\0\2\3\32\0\6\3\1\u0304"+
    "\25\3\2\0\2\3\32\0\17\3\1\u0305\14\3\2\0"+
    "\2\3\32\0\2\3\1\u0306\31\3\2\0\2\3\32\0"+
    "\6\3\1\u0307\25\3\2\0\2\3\32\0\5\3\1\u0308"+
    "\26\3\2\0\2\3\32\0\7\3\1\u0309\24\3\2\0"+
    "\2\3\32\0\2\3\1\u030a\31\3\2\0\2\3\32\0"+
    "\17\3\1\u030b\14\3\2\0\2\3\32\0\17\3\1\u030c"+
    "\14\3\2\0\2\3\32\0\5\3\1\u030d\26\3\2\0"+
    "\2\3\32\0\5\3\1\u030e\26\3\2\0\2\3\32\0"+
    "\2\3\1\u030f\31\3\2\0\2\3\32\0\5\3\1\u0310"+
    "\26\3\2\0\2\3\32\0\23\3\1\u0311\10\3\2\0"+
    "\2\3\32\0\30\3\1\u0312\3\3\2\0\2\3\32\0"+
    "\6\3\1\u0313\25\3\2\0\2\3\32\0\6\3\1\u0314"+
    "\25\3\2\0\2\3\32\0\6\3\1\u0315\25\3\2\0"+
    "\2\3\32\0\6\3\1\u0316\25\3\2\0\2\3\32\0"+
    "\17\3\1\u0317\14\3\2\0\2\3\32\0\15\3\1\u0318"+
    "\16\3\2\0\2\3\32\0\6\3\1\u0319\25\3\2\0"+
    "\2\3\32\0\4\3\1\u031a\27\3\2\0\2\3\32\0"+
    "\15\3\1\u031b\16\3\2\0\2\3\32\0\5\3\1\u031c"+
    "\26\3\2\0\2\3\32\0\6\3\1\u031d\25\3\2\0"+
    "\2\3\32\0\17\3\1\u031e\14\3\2\0\2\3\32\0"+
    "\15\3\1\u031f\16\3\2\0\2\3\32\0\6\3\1\u0320"+
    "\25\3\2\0\2\3\32\0\5\3\1\u0321\26\3\2\0"+
    "\2\3\32\0\15\3\1\u0322\16\3\2\0\2\3\32\0"+
    "\5\3\1\u0323\26\3\2\0\2\3\32\0\5\3\1\u0324"+
    "\26\3\2\0\2\3\32\0\7\3\1\u0325\24\3\2\0"+
    "\2\3\32\0\17\3\1\u0326\14\3\2\0\2\3\32\0"+
    "\3\3\1\u0327\30\3\2\0\2\3\32\0\30\3\1\u0328"+
    "\3\3\2\0\2\3\32\0\5\3\1\u0329\26\3\2\0"+
    "\2\3\32\0\2\3\1\u032a\31\3\2\0\2\3\32\0"+
    "\5\3\1\u032b\26\3\2\0\2\3\32\0\10\3\1\u032c"+
    "\23\3\2\0\2\3\32\0\7\3\1\u032d\24\3\2\0"+
    "\2\3\32\0\14\3\1\u032e\17\3\2\0\2\3\32\0"+
    "\2\3\1\u032f\31\3\2\0\2\3\32\0\16\3\1\u0330"+
    "\15\3\2\0\2\3\32\0\6\3\1\u0331\25\3\2\0"+
    "\2\3\32\0\17\3\1\u0332\14\3\2\0\2\3\32\0"+
    "\7\3\1\u0333\24\3\2\0\2\3\32\0\2\3\1\u0334"+
    "\31\3\2\0\2\3\32\0\4\3\1\u0335\27\3\2\0"+
    "\2\3\32\0\7\3\1\u0336\24\3\2\0\2\3\32\0"+
    "\6\3\1\u0337\25\3\2\0\2\3\32\0\10\3\1\u0338"+
    "\23\3\2\0\2\3\32\0\16\3\1\u0339\15\3\2\0"+
    "\2\3\32\0\17\3\1\u033a\14\3\2\0\2\3\32\0"+
    "\10\3\1\u033b\23\3\2\0\2\3\32\0\10\3\1\u033c"+
    "\23\3\2\0\2\3\32\0\2\3\1\u033d\31\3\2\0"+
    "\2\3\32\0\10\3\1\u033e\23\3\2\0\2\3\32\0"+
    "\16\3\1\u033f\15\3\2\0\2\3\32\0\12\3\1\u0340"+
    "\21\3\2\0\2\3\32\0\7\3\1\u0341\24\3\2\0"+
    "\2\3\32\0\17\3\1\u0342\14\3\2\0\2\3\32\0"+
    "\2\3\1\u0343\1\3\1\u0344\27\3\2\0\2\3\32\0"+
    "\17\3\1\u0345\14\3\2\0\2\3\32\0\16\3\1\u0346"+
    "\15\3\2\0\2\3\32\0\2\3\1\u0347\31\3\2\0"+
    "\2\3\32\0\6\3\1\u0348\25\3\2\0\2\3\32\0"+
    "\2\3\1\u0349\31\3\2\0\2\3\32\0\5\3\1\u034a"+
    "\26\3\2\0\2\3\32\0\16\3\1\u034b\15\3\2\0"+
    "\2\3\32\0\4\3\1\u034c\27\3\67\0\1\u034d\4\0"+
    "\2\3\32\0\6\3\1\u034e\25\3\2\0\2\3\32\0"+
    "\10\3\1\u034f\23\3\2\0\2\3\32\0\13\3\1\u0350"+
    "\20\3\2\0\2\3\32\0\5\3\1\u0351\26\3\2\0"+
    "\2\3\32\0\5\3\1\u0352\26\3\2\0\2\3\32\0"+
    "\12\3\1\u0353\21\3\2\0\2\3\32\0\7\3\1\u0354"+
    "\24\3\2\0\2\3\32\0\6\3\1\u0355\25\3\2\0"+
    "\2\3\32\0\17\3\1\u0356\14\3\2\0\2\3\32\0"+
    "\10\3\1\u0357\23\3\2\0\2\3\32\0\17\3\1\u0358"+
    "\14\3\2\0\2\3\32\0\7\3\1\u0359\24\3\2\0"+
    "\2\3\32\0\30\3\1\u035a\3\3\2\0\2\3\32\0"+
    "\13\3\1\u035b\20\3\2\0\2\3\32\0\5\3\1\u035c"+
    "\26\3\2\0\2\3\32\0\6\3\1\u035d\25\3\2\0"+
    "\2\3\32\0\6\3\1\u035e\25\3\2\0\2\3\32\0"+
    "\2\3\1\u035f\31\3\2\0\2\3\32\0\14\3\1\u0360"+
    "\17\3\2\0\2\3\32\0\17\3\1\u0361\14\3\2\0"+
    "\2\3\32\0\2\3\1\u0362\31\3\2\0\2\3\32\0"+
    "\10\3\1\u0363\23\3\2\0\2\3\32\0\30\3\1\u0364"+
    "\3\3\2\0\2\3\32\0\17\3\1\u0365\14\3\2\0"+
    "\2\3\32\0\14\3\1\u0366\17\3\2\0\2\3\32\0"+
    "\13\3\1\u0367\20\3\2\0\2\3\32\0\12\3\1\u0368"+
    "\21\3\2\0\2\3\32\0\5\3\1\u0369\26\3\2\0"+
    "\2\3\32\0\6\3\1\u036a\25\3\2\0\2\3\32\0"+
    "\16\3\1\u036b\15\3\2\0\2\3\32\0\16\3\1\u036c"+
    "\15\3\2\0\2\3\32\0\17\3\1\u036d\14\3\2\0"+
    "\2\3\32\0\3\3\1\u036e\30\3\2\0\2\3\32\0"+
    "\5\3\1\u036f\26\3\2\0\2\3\32\0\26\3\1\u0370"+
    "\5\3\2\0\2\3\32\0\4\3\1\u0371\27\3\2\0"+
    "\2\3\32\0\2\3\1\u0372\31\3\2\0\2\3\32\0"+
    "\7\3\1\u0373\24\3\2\0\2\3\32\0\16\3\1\u0374"+
    "\15\3\2\0\2\3\32\0\17\3\1\u0375\14\3\2\0"+
    "\2\3\32\0\7\3\1\u0376\24\3\2\0\2\3\32\0"+
    "\2\3\1\u0377\31\3\2\0\2\3\32\0\3\3\1\u0378"+
    "\30\3\2\0\2\3\32\0\7\3\1\u0379\24\3\2\0"+
    "\2\3\32\0\16\3\1\u037a\15\3\2\0\2\3\32\0"+
    "\3\3\1\u037b\30\3\2\0\2\3\32\0\6\3\1\u037c"+
    "\25\3\2\0\2\3\32\0\6\3\1\u037d\25\3\2\0"+
    "\2\3\32\0\10\3\1\u037e\23\3\2\0\2\3\32\0"+
    "\7\3\1\u037f\24\3\2\0\2\3\32\0\4\3\1\u0380"+
    "\27\3\2\0\2\3\32\0\13\3\1\u0381\20\3\2\0"+
    "\2\3\32\0\23\3\1\u0382\10\3\2\0\2\3\32\0"+
    "\12\3\1\u0383\21\3\2\0\2\3\32\0\5\3\1\u0384"+
    "\26\3\2\0\2\3\32\0\10\3\1\u0385\23\3\2\0"+
    "\2\3\32\0\12\3\1\u0386\21\3\2\0\2\3\32\0"+
    "\17\3\1\u0387\14\3\2\0\2\3\32\0\10\3\1\u0388"+
    "\23\3\2\0\2\3\32\0\13\3\1\u0389\20\3\2\0"+
    "\2\3\32\0\7\3\1\u038a\24\3\2\0\2\3\32\0"+
    "\7\3\1\u038b\24\3\2\0\2\3\32\0\5\3\1\u038c"+
    "\26\3\2\0\2\3\32\0\5\3\1\u038d\26\3\2\0"+
    "\2\3\32\0\6\3\1\u038e\25\3\2\0\2\3\32\0"+
    "\25\3\1\u038f\6\3\2\0\2\3\32\0\16\3\1\u0390"+
    "\15\3\2\0\2\3\32\0\6\3\1\u0391\25\3\2\0"+
    "\2\3\32\0\24\3\1\u0392\7\3\2\0\2\3\32\0"+
    "\16\3\1\u0393\15\3\2\0\2\3\32\0\1\3\1\u0394"+
    "\32\3\2\0\2\3\32\0\5\3\1\u0395\26\3\2\0"+
    "\2\3\32\0\10\3\1\u0396\23\3\2\0\2\3\32\0"+
    "\2\3\1\u0397\31\3\2\0\2\3\32\0\16\3\1\u0398"+
    "\15\3\2\0\2\3\32\0\26\3\1\u0399\5\3\2\0"+
    "\2\3\32\0\14\3\1\u039a\17\3\2\0\2\3\32\0"+
    "\2\3\1\u039b\31\3\2\0\2\3\32\0\5\3\1\u039c"+
    "\26\3\2\0\2\3\32\0\17\3\1\u039d\14\3\2\0"+
    "\2\3\32\0\2\3\1\u039e\31\3\2\0\2\3\32\0"+
    "\12\3\1\u039f\14\3\1\u03a0\4\3\2\0\2\3\32\0"+
    "\6\3\1\u03a1\25\3\2\0\2\3\32\0\5\3\1\u03a2"+
    "\26\3\2\0\2\3\32\0\12\3\1\u03a3\21\3\2\0"+
    "\2\3\32\0\3\3\1\u03a4\30\3\2\0\2\3\32\0"+
    "\2\3\1\u03a5\31\3\2\0\2\3\32\0\5\3\1\u03a6"+
    "\26\3\2\0\2\3\32\0\17\3\1\u03a7\14\3\2\0"+
    "\2\3\32\0\23\3\1\u03a8\10\3\2\0\2\3\32\0"+
    "\6\3\1\u03a9\25\3\2\0\2\3\32\0\6\3\1\u03aa"+
    "\25\3\2\0\2\3\32\0\6\3\1\u03ab\25\3\2\0"+
    "\2\3\32\0\2\3\1\u03ac\31\3\2\0\2\3\32\0"+
    "\4\3\1\u03ad\27\3\2\0\2\3\32\0\10\3\1\u03ae"+
    "\23\3\2\0\2\3\32\0\7\3\1\u03af\24\3\2\0"+
    "\2\3\32\0\12\3\1\u03b0\21\3\2\0\2\3\32\0"+
    "\7\3\1\u03b1\24\3\2\0\2\3\32\0\3\3\1\u03b2"+
    "\30\3\2\0\2\3\32\0\7\3\1\u03b3\24\3\2\0"+
    "\2\3\32\0\4\3\1\u03b4\27\3\2\0\2\3\32\0"+
    "\13\3\1\u03b5\20\3\2\0\2\3\32\0\17\3\1\u03b6"+
    "\14\3\2\0\2\3\32\0\4\3\1\u03b7\27\3\2\0"+
    "\2\3\32\0\16\3\1\u03b8\15\3\2\0\2\3\32\0"+
    "\5\3\1\u03b9\26\3\2\0\2\3\32\0\27\3\1\u03ba"+
    "\4\3\2\0\2\3\32\0\10\3\1\u03bb\23\3\2\0"+
    "\2\3\32\0\6\3\1\u03bc\25\3\2\0\2\3\32\0"+
    "\6\3\1\u03bd\25\3\2\0\2\3\32\0\12\3\1\u03be"+
    "\21\3\2\0\2\3\32\0\10\3\1\u03bf\23\3\2\0"+
    "\2\3\32\0\2\3\1\u03c0\31\3\2\0\2\3\32\0"+
    "\6\3\1\u03c1\25\3\2\0\2\3\32\0\17\3\1\u03c2"+
    "\14\3\2\0\2\3\32\0\2\3\1\u03c3\31\3\2\0"+
    "\2\3\32\0\24\3\1\u03c4\7\3\2\0\2\3\32\0"+
    "\2\3\1\u03c5\31\3\2\0\2\3\32\0\5\3\1\u03c6"+
    "\26\3\2\0\2\3\32\0\17\3\1\u03c7\14\3\2\0"+
    "\2\3\32\0\17\3\1\u03c8\14\3\2\0\2\3\32\0"+
    "\5\3\1\u03c9\26\3\2\0\2\3\32\0\12\3\1\u03ca"+
    "\21\3\2\0\2\3\32\0\13\3\1\u03cb\20\3\2\0"+
    "\2\3\32\0\21\3\1\u03cc\1\3\1\u03cd\10\3\2\0"+
    "\2\3\32\0\6\3\1\u03ce\25\3\2\0\2\3\32\0"+
    "\4\3\1\u03cf\27\3\2\0\2\3\32\0\5\3\1\u03d0"+
    "\26\3\2\0\2\3\32\0\2\3\1\u03d1\3\3\1\u03d2"+
    "\25\3\2\0\2\3\32\0\12\3\1\u03d3\21\3\2\0"+
    "\2\3\32\0\21\3\1\u03d4\12\3\2\0\2\3\32\0"+
    "\13\3\1\u03d5\20\3\2\0\2\3\32\0\10\3\1\u03d6"+
    "\23\3\2\0\2\3\32\0\24\3\1\u03d7\7\3\2\0"+
    "\2\3\32\0\24\3\1\u03d8\7\3\2\0\2\3\32\0"+
    "\2\3\1\u03d9\31\3\2\0\2\3\32\0\2\3\1\u03da"+
    "\31\3\2\0\2\3\32\0\20\3\1\u03db\13\3\2\0"+
    "\2\3\32\0\13\3\1\u03dc\20\3\2\0\2\3\32\0"+
    "\2\3\1\u03dd\31\3\2\0\2\3\32\0\10\3\1\u03de"+
    "\23\3\2\0\2\3\32\0\10\3\1\u03df\23\3\2\0"+
    "\2\3\32\0\5\3\1\u03e0\26\3\2\0\2\3\32\0"+
    "\7\3\1\u03e1\24\3\2\0\2\3\32\0\4\3\1\u03e2"+
    "\27\3\2\0\2\3\32\0\2\3\1\u03e3\31\3\2\0"+
    "\2\3\32\0\10\3\1\u03e4\23\3\44\0\1\u03e5\27\0"+
    "\2\3\32\0\2\3\1\u03e6\31\3\2\0\2\3\32\0"+
    "\5\3\1\u03e7\26\3\2\0\2\3\32\0\6\3\1\u03e8"+
    "\25\3\2\0\2\3\32\0\17\3\1\u03e9\14\3\2\0"+
    "\2\3\32\0\7\3\1\u03ea\24\3\2\0\2\3\32\0"+
    "\31\3\1\u03eb\2\3\2\0\2\3\32\0\27\3\1\u03ec"+
    "\4\3\2\0\2\3\32\0\13\3\1\u03ed\20\3\2\0"+
    "\2\3\32\0\6\3\1\u03ee\25\3\2\0\2\3\32\0"+
    "\17\3\1\u03ef\14\3\2\0\2\3\32\0\2\3\1\u03f0"+
    "\31\3\2\0\2\3\32\0\10\3\1\u03f1\23\3\2\0"+
    "\2\3\32\0\13\3\1\u03f2\20\3\2\0\2\3\32\0"+
    "\10\3\1\u03f3\23\3\2\0\2\3\32\0\3\3\1\u03f4"+
    "\30\3\2\0\2\3\32\0\4\3\1\u03f5\27\3\2\0"+
    "\2\3\32\0\2\3\1\u03f6\31\3\2\0\2\3\32\0"+
    "\13\3\1\u03f7\20\3\2\0\2\3\32\0\12\3\1\u03f8"+
    "\21\3\2\0\2\3\32\0\22\3\1\u03f9\11\3\2\0"+
    "\2\3\32\0\5\3\1\u03fa\26\3\2\0\2\3\32\0"+
    "\7\3\1\u03fb\24\3\2\0\2\3\32\0\10\3\1\u03fc"+
    "\23\3\2\0\2\3\32\0\10\3\1\u03fd\23\3\2\0"+
    "\2\3\32\0\5\3\1\u03fe\26\3\2\0\2\3\32\0"+
    "\17\3\1\u03ff\14\3\2\0\2\3\32\0\1\3\1\u0400"+
    "\32\3\2\0\2\3\32\0\17\3\1\u0401\14\3\2\0"+
    "\2\3\32\0\25\3\1\u0402\6\3\2\0\2\3\32\0"+
    "\10\3\1\u0403\23\3\2\0\2\3\32\0\16\3\1\u0404"+
    "\15\3\2\0\2\3\32\0\5\3\1\u0405\26\3\2\0"+
    "\2\3\32\0\6\3\1\u0406\25\3\2\0\2\3\32\0"+
    "\10\3\1\u0407\23\3\2\0\2\3\32\0\24\3\1\u0408"+
    "\7\3\2\0\2\3\32\0\6\3\1\u0409\25\3\2\0"+
    "\2\3\32\0\7\3\1\u040a\24\3\2\0\2\3\32\0"+
    "\5\3\1\u040b\26\3\2\0\2\3\32\0\6\3\1\u040c"+
    "\25\3\2\0\2\3\32\0\5\3\1\u040d\26\3\2\0"+
    "\2\3\32\0\16\3\1\u040e\15\3\2\0\2\3\32\0"+
    "\13\3\1\u040f\20\3\2\0\2\3\32\0\6\3\1\u0410"+
    "\10\3\1\u0411\14\3\2\0\2\3\32\0\23\3\1\u0412"+
    "\10\3\2\0\2\3\32\0\10\3\1\u0413\23\3\2\0"+
    "\2\3\32\0\14\3\1\u0414\17\3\2\0\2\3\32\0"+
    "\5\3\1\u0415\26\3\2\0\2\3\32\0\2\3\1\u0416"+
    "\31\3\2\0\2\3\32\0\5\3\1\u0417\26\3\2\0"+
    "\2\3\32\0\6\3\1\u0418\25\3\2\0\2\3\32\0"+
    "\10\3\1\u0419\23\3\2\0\2\3\32\0\5\3\1\u041a"+
    "\26\3\2\0\2\3\32\0\5\3\1\u041b\26\3\2\0"+
    "\2\3\32\0\13\3\1\u041c\20\3\2\0\2\3\32\0"+
    "\4\3\1\u041d\27\3\2\0\2\3\32\0\5\3\1\u041e"+
    "\26\3\2\0\2\3\32\0\25\3\1\u041f\6\3\2\0"+
    "\2\3\32\0\4\3\1\u0420\27\3\2\0\2\3\32\0"+
    "\6\3\1\u0421\25\3\2\0\2\3\32\0\23\3\1\u0422"+
    "\10\3\2\0\2\3\32\0\12\3\1\u0423\21\3\2\0"+
    "\2\3\32\0\5\3\1\u0424\26\3\2\0\2\3\32\0"+
    "\5\3\1\u0425\26\3\2\0\2\3\32\0\6\3\1\u0426"+
    "\25\3\2\0\2\3\32\0\2\3\1\u0427\31\3\2\0"+
    "\2\3\32\0\7\3\1\u0428\24\3\2\0\2\3\32\0"+
    "\17\3\1\u0429\14\3\2\0\2\3\32\0\6\3\1\u042a"+
    "\25\3\2\0\2\3\32\0\4\3\1\u042b\27\3\2\0"+
    "\2\3\32\0\17\3\1\u042c\14\3\2\0\2\3\32\0"+
    "\2\3\1\u042d\31\3\2\0\2\3\32\0\10\3\1\u042e"+
    "\23\3\2\0\2\3\32\0\10\3\1\u042f\23\3\2\0"+
    "\2\3\32\0\4\3\1\u0430\27\3\2\0\2\3\32\0"+
    "\5\3\1\u0431\26\3\2\0\2\3\32\0\27\3\1\u0432"+
    "\4\3\2\0\2\3\32\0\17\3\1\u0433\14\3\2\0"+
    "\2\3\32\0\6\3\1\u0434\25\3\2\0\2\3\32\0"+
    "\14\3\1\u0435\17\3\2\0\2\3\32\0\11\3\1\u0436"+
    "\22\3\2\0\2\3\32\0\6\3\1\u0437\25\3\2\0"+
    "\2\3\32\0\16\3\1\u0438\15\3\2\0\2\3\32\0"+
    "\7\3\1\u0439\24\3\2\0\2\3\32\0\6\3\1\u043a"+
    "\25\3\2\0\2\3\32\0\6\3\1\u043b\25\3\2\0"+
    "\2\3\32\0\34\3\1\u043c\1\0\2\3\32\0\24\3"+
    "\1\u043d\7\3\2\0\2\3\32\0\7\3\1\u043e\24\3"+
    "\2\0\2\3\32\0\31\3\1\u043f\2\3\2\0\2\3"+
    "\32\0\16\3\1\u0440\15\3\2\0\2\3\32\0\10\3"+
    "\1\u0441\23\3\2\0\2\3\32\0\10\3\1\u0442\23\3"+
    "\2\0\2\3\32\0\13\3\1\u0443\20\3\2\0\2\3"+
    "\32\0\6\3\1\u0444\25\3\2\0\2\3\32\0\16\3"+
    "\1\u0445\15\3\2\0\2\3\32\0\20\3\1\u0446\13\3"+
    "\2\0\2\3\32\0\6\3\1\u0447\25\3\2\0\2\3"+
    "\32\0\6\3\1\u0448\25\3\2\0\2\3\32\0\2\3"+
    "\1\u0449\31\3\2\0\2\3\32\0\6\3\1\u044a\25\3"+
    "\2\0\2\3\32\0\5\3\1\u044b\26\3\2\0\2\3"+
    "\32\0\21\3\1\u044c\12\3\2\0\2\3\32\0\3\3"+
    "\1\u044d\30\3\2\0\2\3\32\0\5\3\1\u044e\26\3"+
    "\2\0\2\3\32\0\14\3\1\u044f\17\3\2\0\2\3"+
    "\32\0\5\3\1\u0450\26\3\2\0\2\3\32\0\6\3"+
    "\1\u0451\25\3\2\0\2\3\32\0\6\3\1\u0452\25\3"+
    "\2\0\2\3\32\0\26\3\1\u0453\5\3\2\0\2\3"+
    "\32\0\7\3\1\u0454\24\3\2\0\2\3\32\0\6\3"+
    "\1\u0455\25\3\2\0\2\3\32\0\5\3\1\u0456\26\3"+
    "\2\0\2\3\32\0\5\3\1\u0457\26\3\2\0\2\3"+
    "\32\0\24\3\1\u0458\7\3\2\0\2\3\32\0\27\3"+
    "\1\u0459\4\3\2\0\2\3\32\0\6\3\1\u045a\25\3"+
    "\2\0\2\3\32\0\26\3\1\u045b\5\3\2\0\2\3"+
    "\32\0\6\3\1\u045c\25\3\51\0\1\u045d\22\0\2\3"+
    "\32\0\4\3\1\u045e\27\3\2\0\2\3\32\0\16\3"+
    "\1\u045f\15\3\2\0\2\3\32\0\16\3\1\u0460\15\3"+
    "\2\0\2\3\32\0\5\3\1\u0461\26\3\2\0\2\3"+
    "\32\0\6\3\1\u0462\25\3\2\0\2\3\32\0\5\3"+
    "\1\u0463\26\3\2\0\2\3\32\0\24\3\1\u0464\7\3"+
    "\2\0\2\3\32\0\5\3\1\u0465\26\3\2\0\2\3"+
    "\32\0\13\3\1\u0466\20\3\2\0\2\3\32\0\22\3"+
    "\1\u0467\11\3\2\0\2\3\32\0\5\3\1\u0468\26\3"+
    "\2\0\2\3\32\0\13\3\1\u0469\20\3\2\0\2\3"+
    "\32\0\4\3\1\u046a\27\3\2\0\2\3\32\0\5\3"+
    "\1\u046b\26\3\2\0\2\3\32\0\17\3\1\u046c\14\3"+
    "\2\0\2\3\32\0\1\3\1\u046d\32\3\2\0\2\3"+
    "\32\0\11\3\1\u046e\22\3\2\0\2\3\32\0\13\3"+
    "\1\u046f\20\3\2\0\2\3\32\0\14\3\1\u0470\17\3"+
    "\2\0\2\3\32\0\10\3\1\u0471\23\3\2\0\2\3"+
    "\32\0\10\3\1\u0472\23\3\2\0\2\3\32\0\5\3"+
    "\1\u0473\26\3\2\0\2\3\32\0\7\3\1\u0474\24\3"+
    "\2\0\2\3\32\0\6\3\1\u0475\25\3\2\0\2\3"+
    "\32\0\17\3\1\u0476\14\3\2\0\2\3\32\0\3\3"+
    "\1\u0477\30\3\2\0\2\3\32\0\6\3\1\u0478\25\3"+
    "\2\0\2\3\32\0\1\3\1\u0479\32\3\2\0\2\3"+
    "\32\0\10\3\1\u047a\23\3\2\0\2\3\32\0\6\3"+
    "\1\u047b\25\3\2\0\2\3\32\0\17\3\1\u047c\14\3"+
    "\2\0\2\3\32\0\6\3\1\u047d\25\3\2\0\2\3"+
    "\32\0\16\3\1\u047e\15\3\2\0\2\3\32\0\16\3"+
    "\1\u047f\15\3\2\0\2\3\32\0\12\3\1\u0480\21\3"+
    "\2\0\2\3\32\0\6\3\1\u0481\25\3\2\0\2\3"+
    "\32\0\17\3\1\u0482\14\3\2\0\2\3\32\0\17\3"+
    "\1\u0483\14\3\2\0\2\3\32\0\6\3\1\u0484\25\3"+
    "\2\0\2\3\32\0\22\3\1\u0485\11\3\2\0\2\3"+
    "\32\0\6\3\1\u0486\25\3\2\0\2\3\32\0\2\3"+
    "\1\u0487\31\3\2\0\2\3\32\0\12\3\1\u0488\21\3"+
    "\2\0\2\3\32\0\7\3\1\u0489\24\3\2\0\2\3"+
    "\32\0\12\3\1\u048a\21\3\2\0\2\3\32\0\11\3"+
    "\1\u048b\22\3\2\0\2\3\32\0\16\3\1\u048c\15\3"+
    "\2\0\2\3\32\0\13\3\1\u048d\20\3\2\0\2\3"+
    "\32\0\4\3\1\u048e\27\3\2\0\2\3\32\0\5\3"+
    "\1\u048f\26\3\2\0\2\3\32\0\4\3\1\u0490\27\3"+
    "\2\0\2\3\32\0\16\3\1\u0491\15\3\2\0\2\3"+
    "\32\0\5\3\1\u0492\26\3\2\0\2\3\32\0\24\3"+
    "\1\u0493\7\3\2\0\2\3\32\0\6\3\1\u0494\25\3"+
    "\2\0\2\3\32\0\16\3\1\u0495\15\3\2\0\2\3"+
    "\32\0\7\3\1\u0496\24\3\2\0\2\3\32\0\24\3"+
    "\1\u0497\7\3\2\0\2\3\32\0\10\3\1\u0498\23\3"+
    "\2\0\2\3\32\0\31\3\1\u0499\2\3\2\0\2\3"+
    "\32\0\7\3\1\u049a\24\3\62\0\1\u049b\11\0\2\3"+
    "\32\0\5\3\1\u049c\26\3\2\0\2\3\32\0\10\3"+
    "\1\u049d\23\3\2\0\2\3\32\0\5\3\1\u049e\26\3"+
    "\2\0\2\3\32\0\10\3\1\u049f\23\3\2\0\2\3"+
    "\32\0\2\3\1\u04a0\31\3\2\0\2\3\32\0\5\3"+
    "\1\u04a1\26\3\2\0\2\3\32\0\16\3\1\u04a2\15\3"+
    "\2\0\2\3\32\0\4\3\1\u04a3\27\3\2\0\2\3"+
    "\32\0\17\3\1\u04a4\14\3\2\0\2\3\32\0\5\3"+
    "\1\u04a5\26\3\2\0\2\3\32\0\13\3\1\u04a6\20\3"+
    "\2\0\2\3\32\0\23\3\1\u04a7\10\3\2\0\2\3"+
    "\32\0\11\3\1\u04a8\22\3\2\0\2\3\32\0\17\3"+
    "\1\u04a9\14\3\2\0\2\3\32\0\6\3\1\u04aa\10\3"+
    "\1\u04ab\14\3\2\0\2\3\32\0\6\3\1\u04ac\25\3"+
    "\2\0\2\3\32\0\23\3\1\u04ad\10\3\2\0\2\3"+
    "\32\0\1\3\1\u04ae\32\3\2\0\2\3\32\0\10\3"+
    "\1\u04af\23\3\2\0\2\3\32\0\7\3\1\u04b0\24\3"+
    "\2\0\2\3\32\0\14\3\1\u04b1\17\3\2\0\2\3"+
    "\32\0\17\3\1\u04b2\14\3\2\0\2\3\32\0\6\3"+
    "\1\u04b3\25\3\2\0\2\3\32\0\16\3\1\u04b4\15\3"+
    "\2\0\2\3\32\0\6\3\1\u04b5\25\3\2\0\2\3"+
    "\32\0\13\3\1\u04b6\20\3\2\0\2\3\32\0\14\3"+
    "\1\u04b7\17\3\2\0\2\3\32\0\2\3\1\u04b8\31\3"+
    "\2\0\2\3\32\0\12\3\1\u04b9\7\3\1\u04ba\11\3"+
    "\2\0\2\3\32\0\12\3\1\u04bb\21\3\2\0\2\3"+
    "\32\0\24\3\1\u04bc\7\3\2\0\2\3\32\0\10\3"+
    "\1\u04bd\23\3\2\0\2\3\32\0\3\3\1\u04be\30\3"+
    "\2\0\2\3\32\0\3\3\1\u04bf\1\3\1\u04c0\6\3"+
    "\1\u04c1\17\3\2\0\2\3\32\0\24\3\1\u04c2\7\3"+
    "\2\0\2\3\32\0\7\3\1\u04c3\24\3\2\0\2\3"+
    "\32\0\10\3\1\u04c4\23\3\2\0\2\3\32\0\10\3"+
    "\1\u04c5\23\3\2\0\2\3\32\0\10\3\1\u04c6\23\3"+
    "\2\0\2\3\32\0\5\3\1\u04c7\26\3\2\0\2\3"+
    "\32\0\16\3\1\u04c8\15\3\2\0\2\3\32\0\10\3"+
    "\1\u04c9\23\3\2\0\2\3\32\0\31\3\1\u04ca\2\3"+
    "\2\0\2\3\32\0\10\3\1\u04cb\23\3\2\0\2\3"+
    "\32\0\12\3\1\u04cc\21\3\2\0\2\3\32\0\6\3"+
    "\1\u04cd\25\3\2\0\2\3\32\0\11\3\1\u04ce\22\3"+
    "\2\0\2\3\32\0\1\3\1\u04cf\11\3\1\u04d0\20\3"+
    "\2\0\2\3\32\0\7\3\1\u04d1\24\3\2\0\2\3"+
    "\32\0\5\3\1\u04d2\26\3\2\0\2\3\32\0\17\3"+
    "\1\u04d3\14\3\2\0\2\3\32\0\11\3\1\u04d4\22\3"+
    "\2\0\2\3\32\0\10\3\1\u04d5\23\3\2\0\2\3"+
    "\32\0\6\3\1\u04d6\25\3\2\0\2\3\32\0\5\3"+
    "\1\u04d7\26\3\2\0\2\3\32\0\10\3\1\u04d8\23\3"+
    "\2\0\2\3\32\0\6\3\1\u04d9\25\3\2\0\2\3"+
    "\32\0\6\3\1\u04da\25\3\2\0\2\3\32\0\5\3"+
    "\1\u04db\26\3\45\0\1\u04dc\26\0\2\3\32\0\5\3"+
    "\1\u04dd\26\3\2\0\2\3\32\0\16\3\1\u04de\15\3"+
    "\2\0\2\3\32\0\5\3\1\u04df\26\3\2\0\2\3"+
    "\32\0\6\3\1\u04e0\25\3\2\0\2\3\32\0\7\3"+
    "\1\u04e1\24\3\2\0\2\3\32\0\6\3\1\u04e2\25\3"+
    "\2\0\2\3\32\0\13\3\1\u04e3\20\3\2\0\2\3"+
    "\32\0\6\3\1\u04e4\25\3\2\0\2\3\32\0\5\3"+
    "\1\u04e5\26\3\2\0\2\3\32\0\4\3\1\u04e6\27\3"+
    "\2\0\2\3\32\0\16\3\1\u04e7\15\3\2\0\2\3"+
    "\32\0\16\3\1\u04e8\15\3\2\0\2\3\32\0\7\3"+
    "\1\u04e9\24\3\2\0\2\3\32\0\15\3\1\u04ea\10\3"+
    "\1\u04eb\5\3\2\0\2\3\32\0\7\3\1\u04ec\24\3"+
    "\2\0\2\3\32\0\16\3\1\u04ed\15\3\2\0\2\3"+
    "\32\0\12\3\1\u04ee\21\3\2\0\2\3\32\0\4\3"+
    "\1\u04ef\27\3\2\0\2\3\32\0\7\3\1\u04f0\24\3"+
    "\2\0\2\3\32\0\12\3\1\u04f1\21\3\2\0\2\3"+
    "\32\0\12\3\1\u04f2\21\3\2\0\2\3\32\0\14\3"+
    "\1\u04f3\17\3\2\0\2\3\32\0\17\3\1\u04f4\14\3"+
    "\2\0\2\3\32\0\6\3\1\u04f5\25\3\2\0\2\3"+
    "\32\0\6\3\1\u04f6\25\3\2\0\2\3\32\0\24\3"+
    "\1\u04f7\7\3\2\0\2\3\32\0\2\3\1\u04f8\31\3"+
    "\2\0\2\3\32\0\17\3\1\u04f9\14\3\2\0\2\3"+
    "\32\0\12\3\1\u04fa\21\3\2\0\2\3\32\0\5\3"+
    "\1\u04fb\26\3\2\0\2\3\32\0\1\3\1\u04fc\32\3"+
    "\2\0\2\3\32\0\5\3\1\u04fd\26\3\2\0\2\3"+
    "\32\0\3\3\1\u04fe\30\3\2\0\2\3\32\0\2\3"+
    "\1\u04ff\31\3\2\0\2\3\32\0\10\3\1\u0500\23\3"+
    "\2\0\2\3\32\0\5\3\1\u0501\26\3\2\0\2\3"+
    "\32\0\5\3\1\u0502\26\3\2\0\2\3\32\0\24\3"+
    "\1\u0503\7\3\2\0\2\3\32\0\16\3\1\u0504\15\3"+
    "\2\0\2\3\32\0\5\3\1\u0505\26\3\2\0\2\3"+
    "\32\0\17\3\1\u0506\14\3\2\0\2\3\32\0\16\3"+
    "\1\u0507\15\3\2\0\2\3\32\0\27\3\1\u0508\4\3"+
    "\2\0\2\3\32\0\15\3\1\u0509\16\3\2\0\2\3"+
    "\32\0\12\3\1\u050a\21\3\54\0\1\u050b\17\0\2\3"+
    "\32\0\2\3\1\u050c\31\3\2\0\2\3\32\0\7\3"+
    "\1\u050d\24\3\2\0\2\3\32\0\17\3\1\u050e\14\3"+
    "\2\0\2\3\32\0\12\3\1\u050f\21\3\2\0\2\3"+
    "\32\0\3\3\1\u0510\30\3\2\0\2\3\32\0\6\3"+
    "\1\u0511\25\3\2\0\2\3\32\0\10\3\1\u0512\23\3"+
    "\2\0\2\3\32\0\10\3\1\u0513\23\3\2\0\2\3"+
    "\32\0\5\3\1\u0514\26\3\2\0\2\3\32\0\16\3"+
    "\1\u0515\15\3\2\0\2\3\32\0\17\3\1\u0516\14\3"+
    "\2\0\2\3\32\0\6\3\1\u0517\25\3\2\0\2\3"+
    "\32\0\10\3\1\u0518\23\3\2\0\2\3\32\0\6\3"+
    "\1\u0519\25\3\2\0\2\3\32\0\6\3\1\u051a\25\3"+
    "\2\0\2\3\32\0\3\3\1\u051b\30\3\2\0\2\3"+
    "\32\0\26\3\1\u051c\5\3\2\0\2\3\32\0\11\3"+
    "\1\u051d\22\3\2\0\2\3\32\0\7\3\1\u051e\24\3"+
    "\2\0\2\3\32\0\5\3\1\u051f\26\3\2\0\2\3"+
    "\32\0\26\3\1\u0520\5\3\2\0\2\3\32\0\6\3"+
    "\1\u0521\25\3\2\0\2\3\32\0\15\3\1\u0522\16\3"+
    "\2\0\2\3\32\0\4\3\1\u0523\27\3\2\0\2\3"+
    "\32\0\17\3\1\u0524\14\3\2\0\2\3\32\0\21\3"+
    "\1\u0525\12\3\2\0\2\3\32\0\12\3\1\u0526\21\3"+
    "\2\0\2\3\32\0\5\3\1\u0527\26\3\2\0\2\3"+
    "\32\0\14\3\1\u0528\17\3\2\0\2\3\32\0\10\3"+
    "\1\u0529\23\3\2\0\2\3\32\0\4\3\1\u052a\27\3"+
    "\2\0\2\3\32\0\6\3\1\u052b\25\3\52\0\1\u052c"+
    "\21\0\2\3\32\0\21\3\1\u052d\12\3\2\0\2\3"+
    "\32\0\16\3\1\u052e\15\3\2\0\2\3\32\0\14\3"+
    "\1\u052f\17\3\2\0\2\3\32\0\10\3\1\u0530\23\3"+
    "\2\0\2\3\32\0\3\3\1\u0531\30\3\2\0\2\3"+
    "\32\0\7\3\1\u0532\24\3\2\0\2\3\32\0\17\3"+
    "\1\u0533\14\3\2\0\2\3\32\0\17\3\1\u0534\14\3"+
    "\2\0\2\3\32\0\23\3\1\u0535\10\3\2\0\2\3"+
    "\32\0\6\3\1\u0536\25\3\2\0\2\3\32\0\6\3"+
    "\1\u0537\25\3\2\0\2\3\32\0\7\3\1\u0538\24\3"+
    "\2\0\2\3\32\0\6\3\1\u0539\25\3\2\0\2\3"+
    "\32\0\10\3\1\u053a\23\3\2\0\2\3\32\0\4\3"+
    "\1\u053b\27\3\2\0\2\3\32\0\15\3\1\u053c\16\3"+
    "\2\0\2\3\32\0\7\3\1\u053d\24\3\2\0\2\3"+
    "\32\0\12\3\1\u053e\21\3\61\0\1\u053f\12\0\2\3"+
    "\32\0\4\3\1\u0540\27\3\2\0\2\3\32\0\10\3"+
    "\1\u0541\23\3\2\0\2\3\32\0\7\3\1\u0542\24\3"+
    "\2\0\2\3\32\0\14\3\1\u0543\17\3\2\0\2\3"+
    "\32\0\5\3\1\u0544\26\3\2\0\2\3\32\0\4\3"+
    "\1\u0545\27\3\2\0\2\3\32\0\15\3\1\u0546\16\3"+
    "\2\0\2\3\32\0\12\3\1\u0547\21\3\2\0\2\3"+
    "\32\0\10\3\1\u0548\23\3\2\0\2\3\32\0\24\3"+
    "\1\u0549\7\3\2\0\2\3\32\0\6\3\1\u054a\25\3"+
    "\2\0\2\3\32\0\13\3\1\u054b\20\3\2\0\2\3"+
    "\32\0\6\3\1\u054c\25\3\2\0\2\3\32\0\6\3"+
    "\1\u054d\25\3\2\0\2\3\32\0\5\3\1\u054e\26\3"+
    "\2\0\2\3\32\0\2\3\1\u054f\31\3\2\0\2\3"+
    "\32\0\7\3\1\u0550\24\3\2\0\2\3\32\0\5\3"+
    "\1\u0551\26\3\2\0\2\3\32\0\24\3\1\u0552\7\3"+
    "\2\0\2\3\32\0\6\3\1\u0553\25\3\2\0\2\3"+
    "\32\0\7\3\1\u0554\24\3\2\0\2\3\32\0\6\3"+
    "\1\u0555\25\3\2\0\2\3\32\0\7\3\1\u0556\24\3"+
    "\2\0\2\3\32\0\2\3\1\u0557\31\3\2\0\2\3"+
    "\32\0\2\3\1\u0558\31\3\2\0\2\3\32\0\5\3"+
    "\1\u0559\26\3\2\0\2\3\32\0\5\3\1\u055a\26\3"+
    "\2\0\2\3\32\0\17\3\1\u055b\14\3\2\0\2\3"+
    "\32\0\12\3\1\u055c\21\3\2\0\2\3\32\0\26\3"+
    "\1\u055d\5\3\2\0\2\3\32\0\15\3\1\u055e\16\3"+
    "\2\0\2\3\32\0\5\3\1\u055f\26\3\2\0\2\3"+
    "\32\0\6\3\1\u0560\25\3\2\0\2\3\32\0\23\3"+
    "\1\u0561\10\3\2\0\2\3\32\0\11\3\1\u0562\22\3"+
    "\2\0\2\3\32\0\5\3\1\u0563\26\3\2\0\2\3"+
    "\32\0\3\3\1\u0564\1\3\1\u0565\26\3\2\0\2\3"+
    "\32\0\2\3\1\u0566\31\3\2\0\2\3\32\0\6\3"+
    "\1\u0567\25\3\2\0\2\3\32\0\2\3\1\u0568\31\3"+
    "\2\0\2\3\32\0\21\3\1\u0569\12\3\2\0\2\3"+
    "\32\0\5\3\1\u056a\26\3\2\0\2\3\32\0\21\3"+
    "\1\u056b\12\3\2\0\2\3\32\0\4\3\1\u056c\27\3"+
    "\2\0\2\3\32\0\2\3\1\u056d\31\3\2\0\2\3"+
    "\32\0\4\3\1\u056e\27\3\2\0\2\3\32\0\6\3"+
    "\1\u056f\25\3\2\0\2\3\32\0\17\3\1\u0570\14\3"+
    "\2\0\2\3\32\0\6\3\1\u0571\25\3\2\0\2\3"+
    "\32\0\4\3\1\u0572\27\3\2\0\2\3\32\0\12\3"+
    "\1\u0573\21\3\2\0\2\3\32\0\5\3\1\u0574\26\3"+
    "\2\0\2\3\32\0\2\3\1\u0575\31\3\2\0\2\3"+
    "\32\0\21\3\1\u0576\12\3\2\0\2\3\32\0\4\3"+
    "\1\u0577\27\3\2\0\2\3\32\0\6\3\1\u0578\25\3"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[64322];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\1\1\1\11\5\1\3\11"+
    "\5\1\3\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\32\1\1\11\1\0\1\11\1\0\2\1\11\11\167\1"+
    "\4\0\306\1\1\11\63\1\1\0\323\1\1\0\274\1"+
    "\1\0\227\1\1\0\126\1\1\0\40\1\1\11\75\1"+
    "\1\0\100\1\1\0\56\1\1\0\40\1\1\0\22\1"+
    "\1\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 124: 
          { lexeme=yytext(); return T_GOTO;
          }
        case 354: break;
        case 57: 
          { lexeme=yytext(); return T_ANY;
          }
        case 355: break;
        case 311: 
          { lexeme=yytext(); return T_SQLWARNING;
          }
        case 356: break;
        case 183: 
          { lexeme=yytext(); return T_EXCEPT;
          }
        case 357: break;
        case 207: 
          { lexeme=yytext(); return T_GLOBAL;
          }
        case 358: break;
        case 13: 
          { lexeme=yytext(); return T_IGUAL;
          }
        case 359: break;
        case 191: 
          { lexeme=yytext(); return T_SCROLL;
          }
        case 360: break;
        case 64: 
          { lexeme=yytext(); return T_NOT;
          }
        case 361: break;
        case 195: 
          { lexeme=yytext(); return T_COLUMN;
          }
        case 362: break;
        case 69: 
          { lexeme=yytext(); return T_OFF;
          }
        case 363: break;
        case 205: 
          { lexeme=yytext(); return T_PASCAL;
          }
        case 364: break;
        case 324: 
          { lexeme=yytext(); return T_TRANSLATION;
          }
        case 365: break;
        case 272: 
          { lexeme=yytext(); return T_CASCADED;
          }
        case 366: break;
        case 54: 
          { lexeme=yytext(); return T_ALL;
          }
        case 367: break;
        case 231: 
          { lexeme=yytext(); return T_CONNECT;
          }
        case 368: break;
        case 203: 
          { lexeme=yytext(); return T_BACKUP;
          }
        case 369: break;
        case 24: 
          { lexeme=yytext(); return T_ARROBA;
          }
        case 370: break;
        case 249: 
          { lexeme=yytext(); return T_FOREIGN;
          }
        case 371: break;
        case 288: 
          { lexeme=yytext(); return T_TIMESTAMP;
          }
        case 372: break;
        case 312: 
          { lexeme=yytext(); return T_CHECKPOINT;
          }
        case 373: break;
        case 149: 
          { lexeme=yytext(); return T_USAGE;
          }
        case 374: break;
        case 44: 
          { lexeme=yytext(); return T_OR;
          }
        case 375: break;
        case 49: 
          { lexeme=yytext(); return T_IF;
          }
        case 376: break;
        case 50: 
          { lexeme=yytext(); return T_BY;
          }
        case 377: break;
        case 278: 
          { lexeme=yytext(); return T_IDENTITY;
          }
        case 378: break;
        case 173: 
          { lexeme=yytext(); return T_FETCH;
          }
        case 379: break;
        case 177: 
          { lexeme=yytext(); return T_DELETE;
          }
        case 380: break;
        case 310: 
          { lexeme=yytext(); return T_STATISTICS;
          }
        case 381: break;
        case 242: 
          { lexeme=yytext(); return T_PERCENT;
          }
        case 382: break;
        case 137: 
          { lexeme=yytext(); return T_LOWER;
          }
        case 383: break;
        case 109: 
          { lexeme=yytext(); return T_CAST;
          }
        case 384: break;
        case 334: 
          { lexeme=yytext(); return T_SESSION_USER;
          }
        case 385: break;
        case 108: 
          { lexeme=yytext(); return T_SIZE;
          }
        case 386: break;
        case 16: 
          { lexeme=yytext(); return T_OPPUNTOCOMA;
          }
        case 387: break;
        case 36: 
          { lexeme=yytext(); return T_OPBRACKETS;
          }
        case 388: break;
        case 303: 
          { lexeme=yytext(); return T_WRITETEXT;
          }
        case 389: break;
        case 320: 
          { lexeme=yytext(); return T_DIAGNOSTICS;
          }
        case 390: break;
        case 328: 
          { lexeme=yytext(); return T_SYSTEM_USER;
          }
        case 391: break;
        case 269: 
          { lexeme=yytext(); return T_SMALLINT;
          }
        case 392: break;
        case 292: 
          { lexeme=yytext(); return T_CLUSTERED;
          }
        case 393: break;
        case 211: 
          { lexeme=yytext(); return T_DECLARE;
          }
        case 394: break;
        case 206: 
          { lexeme=yytext(); return T_PUBLIC;
          }
        case 395: break;
        case 7: 
          { lexeme=yytext(); return T_OPRESTA;
          }
        case 396: break;
        case 230: 
          { lexeme=yytext(); return T_COLLATE;
          }
        case 397: break;
        case 62: 
          { lexeme=yytext(); return T_TOP;
          }
        case 398: break;
        case 247: 
          { lexeme=yytext(); return T_VARCHAR;
          }
        case 399: break;
        case 169: 
          { lexeme=yytext(); return T_MONTH;
          }
        case 400: break;
        case 5: 
          { lexeme=yytext(); return T_OPCORCHETEDER;
          }
        case 401: break;
        case 351: 
          { lexeme=yytext(); return T_SEMANTICKEYPHRASETABLE;
          }
        case 402: break;
        case 97: 
          { lexeme=yytext(); return T_EXIT;
          }
        case 403: break;
        case 140: 
          { lexeme=yytext(); return T_NAMES;
          }
        case 404: break;
        case 180: 
          { lexeme=yytext(); return T_LINENO;
          }
        case 405: break;
        case 171: 
          { lexeme=yytext(); return T_FALSE;
          }
        case 406: break;
        case 270: 
          { lexeme=yytext(); return T_SQLERROR;
          }
        case 407: break;
        case 353: 
          { lexeme=yytext(); return T_SEMANTICSIMILARITYDETAILSTABLE;
          }
        case 408: break;
        case 155: 
          { lexeme=yytext(); return T_INNER;
          }
        case 409: break;
        case 130: 
          { lexeme=yytext(); return T_FULL;
          }
        case 410: break;
        case 135: 
          { lexeme=yytext(); return T_LOCAL;
          }
        case 411: break;
        case 161: 
          { lexeme=yytext(); return T_PIVOT;
          }
        case 412: break;
        case 78: 
          { lexeme=yytext(); return T_COMENTARIOS2;
          }
        case 413: break;
        case 286: 
          { lexeme=yytext(); return T_TEMPORARY;
          }
        case 414: break;
        case 200: 
          { lexeme=yytext(); return T_OUTPUT;
          }
        case 415: break;
        case 282: 
          { lexeme=yytext(); return T_WHENEVER;
          }
        case 416: break;
        case 266: 
          { lexeme=yytext(); return T_ROWCOUNT;
          }
        case 417: break;
        case 51: 
          { lexeme=yytext(); return T_GO;
          }
        case 418: break;
        case 127: 
          { lexeme=yytext(); return T_WITH;
          }
        case 419: break;
        case 253: 
          { lexeme=yytext(); return T_DESCRIBE;
          }
        case 420: break;
        case 45: 
          { lexeme=yytext(); return T_ON;
          }
        case 421: break;
        case 116: 
          { lexeme=yytext(); return T_OVER;
          }
        case 422: break;
        case 306: 
          { lexeme=yytext(); return T_DEFERRABLE;
          }
        case 423: break;
        case 3: 
          { lexeme=yytext(); return T_IDENTIFICADOR;
          }
        case 424: break;
        case 75: 
          { lexeme=yytext(); return T_MAX;
          }
        case 425: break;
        case 223: 
          { lexeme=yytext(); return T_SETUSER;
          }
        case 426: break;
        case 210: 
          { lexeme=yytext(); return T_VALUES;
          }
        case 427: break;
        case 25: 
          { lexeme=yytext(); return T_NUMERAL;
          }
        case 428: break;
        case 217: 
          { lexeme=yytext(); return T_EXTRACT;
          }
        case 429: break;
        case 212: 
          { lexeme=yytext(); return T_DECIMAL;
          }
        case 430: break;
        case 314: 
          { lexeme=yytext(); return T_CONSTRAINT;
          }
        case 431: break;
        case 34: 
          { lexeme=yytext(); return T_OPDIFERENTE;
          }
        case 432: break;
        case 281: 
          { lexeme=yytext(); return T_POSITION;
          }
        case 433: break;
        case 176: 
          { lexeme=yytext(); return T_ACTION;
          }
        case 434: break;
        case 349: 
          { lexeme=yytext(); return T_CHARACTER_LENGTH;
          }
        case 435: break;
        case 141: 
          { lexeme=yytext(); return T_NCHAR;
          }
        case 436: break;
        case 15: 
          { lexeme=yytext(); return T_OPADMIRACION;
          }
        case 437: break;
        case 139: 
          { lexeme=yytext(); return T_RIGHT;
          }
        case 438: break;
        case 291: 
          { lexeme=yytext(); return T_SUBSTRING;
          }
        case 439: break;
        case 346: 
          { lexeme=yytext(); return T_OPENDATASOURCE;
          }
        case 440: break;
        case 307: 
          { lexeme=yytext(); return T_DISCONNECT;
          }
        case 441: break;
        case 21: 
          { lexeme=yytext(); return T_OPPARENTESISIZQ;
          }
        case 442: break;
        case 9: 
          { lexeme=yytext(); return T_OPMULTI;
          }
        case 443: break;
        case 148: 
          { lexeme=yytext(); return T_UNION;
          }
        case 444: break;
        case 144: 
          { lexeme=yytext(); return T_CLOSE;
          }
        case 445: break;
        case 258: 
          { lexeme=yytext(); return T_TRAILING;
          }
        case 446: break;
        case 192: 
          { lexeme=yytext(); return T_SCHEMA;
          }
        case 447: break;
        case 336: 
          { lexeme=yytext(); return T_CURRENT_TIME;
          }
        case 448: break;
        case 327: 
          { lexeme=yytext(); return T_REPLICATION;
          }
        case 449: break;
        case 95: 
          { lexeme=yytext(); return T_ELSE;
          }
        case 450: break;
        case 145: 
          { lexeme=yytext(); return T_CROSS;
          }
        case 451: break;
        case 101: 
          { lexeme=yytext(); return T_ROWS;
          }
        case 452: break;
        case 94: 
          { lexeme=yytext(); return T_TIME;
          }
        case 453: break;
        case 289: 
          { lexeme=yytext(); return T_EXCEPTION;
          }
        case 454: break;
        case 154: 
          { lexeme=yytext(); return T_INDEX;
          }
        case 455: break;
        case 352: 
          { lexeme=yytext(); return T_SEMANTICSIMILARITYTABLE;
          }
        case 456: break;
        case 337: 
          { lexeme=yytext(); return T_CURRENT_USER;
          }
        case 457: break;
        case 250: 
          { lexeme=yytext(); return T_ALLOCATE;
          }
        case 458: break;
        case 19: 
          { lexeme=yytext(); return T_OPBRACKETIZQ;
          }
        case 459: break;
        case 112: 
          { lexeme=yytext(); return T_USER;
          }
        case 460: break;
        case 65: 
          { lexeme=yytext(); return T_SET;
          }
        case 461: break;
        case 208: 
          { lexeme=yytext(); return T_MODULE;
          }
        case 462: break;
        case 138: 
          { lexeme=yytext(); return T_TABLE;
          }
        case 463: break;
        case 107: 
          { lexeme=yytext(); return T_SOME;
          }
        case 464: break;
        case 81: 
          { lexeme=yytext(); return T_DESC;
          }
        case 465: break;
        case 156: 
          { lexeme=yytext(); return T_INPUT;
          }
        case 466: break;
        case 185: 
          { lexeme=yytext(); return T_RETURN;
          }
        case 467: break;
        case 167: 
          { lexeme=yytext(); return T_MATCH;
          }
        case 468: break;
        case 163: 
          { lexeme=yytext(); return T_GROUP;
          }
        case 469: break;
        case 329: 
          { lexeme=yytext(); return T_CHAR_LENGTH;
          }
        case 470: break;
        case 339: 
          { lexeme=yytext(); return T_WITHIN_GROUP;
          }
        case 471: break;
        case 170: 
          { lexeme=yytext(); return T_VALUE;
          }
        case 472: break;
        case 179: 
          { lexeme=yytext(); return T_DOMAIN;
          }
        case 473: break;
        case 335: 
          { lexeme=yytext(); return T_CURRENT_DATE;
          }
        case 474: break;
        case 348: 
          { lexeme=yytext(); return T_IDENTITY_INSERT;
          }
        case 475: break;
        case 53: 
          { lexeme=yytext(); return T_ADD;
          }
        case 476: break;
        case 244: 
          { lexeme=yytext(); return T_PRIMARY;
          }
        case 477: break;
        case 89: 
          { lexeme=yytext(); return T_LIKE;
          }
        case 478: break;
        case 38: 
          { lexeme=yytext(); return T_OPCORCHETES;
          }
        case 479: break;
        case 79: 
          { lexeme=yytext(); return T_DATE;
          }
        case 480: break;
        case 133: 
          { lexeme=yytext(); return T_ALTER;
          }
        case 481: break;
        case 165: 
          { lexeme=yytext(); return T_WHERE;
          }
        case 482: break;
        case 35: 
          { lexeme=yytext(); return T_OPAND;
          }
        case 483: break;
        case 187: 
          { lexeme=yytext(); return T_REVOKE;
          }
        case 484: break;
        case 87: 
          { lexeme=yytext(); return T_LEFT;
          }
        case 485: break;
        case 274: 
          { lexeme=yytext(); return T_CONTAINS;
          }
        case 486: break;
        case 8: 
          { lexeme=yytext(); return T_OPDIV;
          }
        case 487: break;
        case 143: 
          { lexeme=yytext(); return T_SQLCA;
          }
        case 488: break;
        case 226: 
          { lexeme=yytext(); return T_SQLCODE;
          }
        case 489: break;
        case 309: 
          { lexeme=yytext(); return T_ROWGUIDCOL;
          }
        case 490: break;
        case 305: 
          { lexeme=yytext(); return T_DESCRIPTOR;
          }
        case 491: break;
        case 30: 
          { lexeme=yytext(); return T_ERRORCOMENTARIOS;
          }
        case 492: break;
        case 254: 
          { lexeme=yytext(); return T_DEFERRED;
          }
        case 493: break;
        case 216: 
          { lexeme=yytext(); return T_TSEQUAL;
          }
        case 494: break;
        case 14: 
          { lexeme=yytext(); return T_OPMAYORQUE;
          }
        case 495: break;
        case 90: 
          { lexeme=yytext(); return T_TRAN;
          }
        case 496: break;
        case 186: 
          { lexeme=yytext(); return T_REVERT;
          }
        case 497: break;
        case 74: 
          { lexeme=yytext(); return T_GET;
          }
        case 498: break;
        case 104: 
          { lexeme=yytext(); return T_NONE;
          }
        case 499: break;
        case 115: 
          { lexeme=yytext(); return T_OPEN;
          }
        case 500: break;
        case 245: 
          { lexeme=yytext(); return T_WAITFOR;
          }
        case 501: break;
        case 92: 
          { lexeme=yytext(); return T_TRIM;
          }
        case 502: break;
        case 43: 
          { lexeme=yytext(); return T_NO;
          }
        case 503: break;
        case 152: 
          { lexeme=yytext(); return T_ORDER;
          }
        case 504: break;
        case 196: 
          { lexeme=yytext(); return T_COMMIT;
          }
        case 505: break;
        case 275: 
          { lexeme=yytext(); return T_CONTINUE;
          }
        case 506: break;
        case 264: 
          { lexeme=yytext(); return T_RESTRICT;
          }
        case 507: break;
        case 214: 
          { lexeme=yytext(); return T_LEADING;
          }
        case 508: break;
        case 340: 
          { lexeme=yytext(); return T_AUTHORIZATION;
          }
        case 509: break;
        case 215: 
          { lexeme=yytext(); return T_TRIGGER;
          }
        case 510: break;
        case 236: 
          { lexeme=yytext(); return T_OPENXML;
          }
        case 511: break;
        case 28: 
          { lexeme=yytext(); return T_STRINGA;
          }
        case 512: break;
        case 70: 
          { lexeme=yytext(); return T_INT;
          }
        case 513: break;
        case 86: 
          { lexeme=yytext(); return T_LAST;
          }
        case 514: break;
        case 128: 
          { lexeme=yytext(); return T_VIEW;
          }
        case 515: break;
        case 209: 
          { lexeme=yytext(); return T_MINUTE;
          }
        case 516: break;
        case 298: 
          { lexeme=yytext(); return T_INITIALLY;
          }
        case 517: break;
        case 290: 
          { lexeme=yytext(); return T_RAISERROR;
          }
        case 518: break;
        case 119: 
          { lexeme=yytext(); return T_BULK;
          }
        case 519: break;
        case 150: 
          { lexeme=yytext(); return T_USING;
          }
        case 520: break;
        case 63: 
          { lexeme=yytext(); return T_END;
          }
        case 521: break;
        case 277: 
          { lexeme=yytext(); return T_OVERLAPS;
          }
        case 522: break;
        case 235: 
          { lexeme=yytext(); return T_UNPIVOT;
          }
        case 523: break;
        case 193: 
          { lexeme=yytext(); return T_CREATE;
          }
        case 524: break;
        case 241: 
          { lexeme=yytext(); return T_PARTIAL;
          }
        case 525: break;
        case 287: 
          { lexeme=yytext(); return T_TRANSLATE;
          }
        case 526: break;
        case 252: 
          { lexeme=yytext(); return T_DATABASE;
          }
        case 527: break;
        case 52: 
          { lexeme=yytext(); return T_ADA;
          }
        case 528: break;
        case 260: 
          { lexeme=yytext(); return T_END_EXEC;
          }
        case 529: break;
        case 189: 
          { lexeme=yytext(); return T_SELECT;
          }
        case 530: break;
        case 331: 
          { lexeme=yytext(); return T_IDENTITYCOL;
          }
        case 531: break;
        case 255: 
          { lexeme=yytext(); return T_DISTINCT;
          }
        case 532: break;
        case 73: 
          { lexeme=yytext(); return T_PAD;
          }
        case 533: break;
        case 1: 
          { lexeme=yytext(); return T_WHITE;
          }
        case 534: break;
        case 313: 
          { lexeme=yytext(); return T_CONNECTION;
          }
        case 535: break;
        case 40: 
          { lexeme=yytext(); return T_AT;
          }
        case 536: break;
        case 318: 
          { lexeme=yytext(); return T_PRIVILEGES;
          }
        case 537: break;
        case 131: 
          { lexeme=yytext(); return T_FILE;
          }
        case 538: break;
        case 48: 
          { lexeme=yytext(); return T_IS;
          }
        case 539: break;
        case 166: 
          { lexeme=yytext(); return T_WHILE;
          }
        case 540: break;
        case 243: 
          { lexeme=yytext(); return T_PREPARE;
          }
        case 541: break;
        case 227: 
          { lexeme=yytext(); return T_CATALOG;
          }
        case 542: break;
        case 213: 
          { lexeme=yytext(); return T_DEFAULT;
          }
        case 543: break;
        case 11: 
          { lexeme=yytext(); return T_OPPORCENTAJE;
          }
        case 544: break;
        case 46: 
          { lexeme=yytext(); return T_OF;
          }
        case 545: break;
        case 113: 
          { lexeme=yytext(); return T_HOUR;
          }
        case 546: break;
        case 201: 
          { lexeme=yytext(); return T_OPTION;
          }
        case 547: break;
        case 330: 
          { lexeme=yytext(); return T_CONSTRAINTS;
          }
        case 548: break;
        case 350: 
          { lexeme=yytext(); return T_CURRENT_TIMESTAMP;
          }
        case 549: break;
        case 285: 
          { lexeme=yytext(); return T_ASSERTION;
          }
        case 550: break;
        case 268: 
          { lexeme=yytext(); return T_SHUTDOWN;
          }
        case 551: break;
        case 126: 
          { lexeme=yytext(); return T_WORK;
          }
        case 552: break;
        case 224: 
          { lexeme=yytext(); return T_SESSION;
          }
        case 553: break;
        case 10: 
          { lexeme=yytext(); return T_OPSUMA;
          }
        case 554: break;
        case 160: 
          { lexeme=yytext(); return T_PRIOR;
          }
        case 555: break;
        case 142: 
          { lexeme=yytext(); return T_SPACE;
          }
        case 556: break;
        case 41: 
          { lexeme=yytext(); return T_AS;
          }
        case 557: break;
        case 296: 
          { lexeme=yytext(); return T_INDICATOR;
          }
        case 558: break;
        case 99: 
          { lexeme=yytext(); return T_REAL;
          }
        case 559: break;
        case 66: 
          { lexeme=yytext(); return T_SUM;
          }
        case 560: break;
        case 190: 
          { lexeme=yytext(); return T_SECOND;
          }
        case 561: break;
        case 178: 
          { lexeme=yytext(); return T_DOUBLE;
          }
        case 562: break;
        case 271: 
          { lexeme=yytext(); return T_SQLSTATE;
          }
        case 563: break;
        case 308: 
          { lexeme=yytext(); return T_REFERENCES;
          }
        case 564: break;
        case 221: 
          { lexeme=yytext(); return T_NUMERIC;
          }
        case 565: break;
        case 284: 
          { lexeme=yytext(); return T_FUNCTION;
          }
        case 566: break;
        case 123: 
          { lexeme=yytext(); return T_PROC;
          }
        case 567: break;
        case 118: 
          { lexeme=yytext(); return T_ZONE;
          }
        case 568: break;
        case 239: 
          { lexeme=yytext(); return T_INCLUDE;
          }
        case 569: break;
        case 267: 
          { lexeme=yytext(); return T_NATIONAL;
          }
        case 570: break;
        case 125: 
          { lexeme=yytext(); return T_WHEN;
          }
        case 571: break;
        case 103: 
          { lexeme=yytext(); return T_NULL;
          }
        case 572: break;
        case 132: 
          { lexeme=yytext(); return T_JOIN;
          }
        case 573: break;
        case 76: 
          { lexeme=yytext(); return T_MIN;
          }
        case 574: break;
        case 100: 
          { lexeme=yytext(); return T_RULE;
          }
        case 575: break;
        case 58: 
          { lexeme=yytext(); return T_ASC;
          }
        case 576: break;
        case 71: 
          { lexeme=yytext(); return T_BIT;
          }
        case 577: break;
        case 120: 
          { lexeme=yytext(); return T_BOTH;
          }
        case 578: break;
        case 67: 
          { lexeme=yytext(); return T_SQL;
          }
        case 579: break;
        case 37: 
          { lexeme=yytext(); return T_OPPARENTESIS;
          }
        case 580: break;
        case 151: 
          { lexeme=yytext(); return T_UPPER;
          }
        case 581: break;
        case 279: 
          { lexeme=yytext(); return T_INTERVAL;
          }
        case 582: break;
        case 61: 
          { lexeme=yytext(); return T_DEC;
          }
        case 583: break;
        case 341: 
          { lexeme=yytext(); return T_TIMEZONE_HOUR;
          }
        case 584: break;
        case 4: 
          { lexeme=yytext(); return T_ENTERODECIMAL;
          }
        case 585: break;
        case 204: 
          { lexeme=yytext(); return T_BROWSE;
          }
        case 586: break;
        case 32: 
          { lexeme=yytext(); return T_OPDOBLEIGUAL;
          }
        case 587: break;
        case 198: 
          { lexeme=yytext(); return T_UPDATE;
          }
        case 588: break;
        case 325: 
          { lexeme=yytext(); return T_TRY_CONVERT;
          }
        case 589: break;
        case 23: 
          { lexeme=yytext(); return T_OPCORCHETEIZQ;
          }
        case 590: break;
        case 84: 
          { lexeme=yytext(); return T_DISK;
          }
        case 591: break;
        case 228: 
          { lexeme=yytext(); return T_CASCADE;
          }
        case 592: break;
        case 300: 
          { lexeme=yytext(); return T_IMMEDIATE;
          }
        case 593: break;
        case 326: 
          { lexeme=yytext(); return T_RECONFIGURE;
          }
        case 594: break;
        case 323: 
          { lexeme=yytext(); return T_TRANSACTION;
          }
        case 595: break;
        case 182: 
          { lexeme=yytext(); return T_ESCAPE;
          }
        case 596: break;
        case 6: 
          { lexeme=yytext(); return T_ENTER;
          }
        case 597: break;
        case 219: 
          { lexeme=yytext(); return T_RESTORE;
          }
        case 598: break;
        case 232: 
          { lexeme=yytext(); return T_CONVERT;
          }
        case 599: break;
        case 317: 
          { lexeme=yytext(); return T_BIT_LENGTH;
          }
        case 600: break;
        case 304: 
          { lexeme=yytext(); return T_DEALLOCATE;
          }
        case 601: break;
        case 322: 
          { lexeme=yytext(); return T_TABLESAMPLE;
          }
        case 602: break;
        case 39: 
          { lexeme=yytext(); return T_DOBLENUMERAL;
          }
        case 603: break;
        case 117: 
          { lexeme=yytext(); return T_INTO;
          }
        case 604: break;
        case 147: 
          { lexeme=yytext(); return T_COUNT;
          }
        case 605: break;
        case 59: 
          { lexeme=yytext(); return T_AVG;
          }
        case 606: break;
        case 136: 
          { lexeme=yytext(); return T_LOGIN;
          }
        case 607: break;
        case 261: 
          { lexeme=yytext(); return T_EXTERNAL;
          }
        case 608: break;
        case 110: 
          { lexeme=yytext(); return T_CASE;
          }
        case 609: break;
        case 102: 
          { lexeme=yytext(); return T_NEXT;
          }
        case 610: break;
        case 199: 
          { lexeme=yytext(); return T_HAVING;
          }
        case 611: break;
        case 17: 
          { lexeme=yytext(); return T_OPCOMA;
          }
        case 612: break;
        case 68: 
          { lexeme=yytext(); return T_USE;
          }
        case 613: break;
        case 91: 
          { lexeme=yytext(); return T_TRUE;
          }
        case 614: break;
        case 80: 
          { lexeme=yytext(); return T_DENY;
          }
        case 615: break;
        case 301: 
          { lexeme=yytext(); return T_PRECISION;
          }
        case 616: break;
        case 265: 
          { lexeme=yytext(); return T_ROLLBACK;
          }
        case 617: break;
        case 159: 
          { lexeme=yytext(); return T_PRINT;
          }
        case 618: break;
        case 181: 
          { lexeme=yytext(); return T_ERRLVL;
          }
        case 619: break;
        case 158: 
          { lexeme=yytext(); return T_BREAK;
          }
        case 620: break;
        case 162: 
          { lexeme=yytext(); return T_GRANT;
          }
        case 621: break;
        case 122: 
          { lexeme=yytext(); return T_PLAN;
          }
        case 622: break;
        case 47: 
          { lexeme=yytext(); return T_IN;
          }
        case 623: break;
        case 263: 
          { lexeme=yytext(); return T_RELATIVE;
          }
        case 624: break;
        case 27: 
          { lexeme=yytext(); return T_OPOR;
          }
        case 625: break;
        case 237: 
          { lexeme=yytext(); return T_OFFSETS;
          }
        case 626: break;
        case 332: 
          { lexeme=yytext(); return T_INSENSITIVE;
          }
        case 627: break;
        case 222: 
          { lexeme=yytext(); return T_NOCHECK;
          }
        case 628: break;
        case 2: 
          { lexeme=yytext(); return ERROR;
          }
        case 629: break;
        case 60: 
          { lexeme=yytext(); return T_DAY;
          }
        case 630: break;
        case 194: 
          { lexeme=yytext(); return T_CURSOR;
          }
        case 631: break;
        case 225: 
          { lexeme=yytext(); return T_SECTION;
          }
        case 632: break;
        case 22: 
          { lexeme=yytext(); return T_OPPARENTESISDER;
          }
        case 633: break;
        case 153: 
          { lexeme=yytext(); return T_OUTER;
          }
        case 634: break;
        case 240: 
          { lexeme=yytext(); return T_BETWEEN;
          }
        case 635: break;
        case 146: 
          { lexeme=yytext(); return T_CHECK;
          }
        case 636: break;
        case 293: 
          { lexeme=yytext(); return T_CHARACTER;
          }
        case 637: break;
        case 55: 
          { lexeme=yytext(); return T_ARE;
          }
        case 638: break;
        case 202: 
          { lexeme=yytext(); return T_INSERT;
          }
        case 639: break;
        case 315: 
          { lexeme=yytext(); return T_UPDATETEXT;
          }
        case 640: break;
        case 283: 
          { lexeme=yytext(); return T_FREETEXT;
          }
        case 641: break;
        case 20: 
          { lexeme=yytext(); return T_OPBRACKETDER;
          }
        case 642: break;
        case 338: 
          { lexeme=yytext(); return T_OCTET_LENGTH;
          }
        case 643: break;
        case 157: 
          { lexeme=yytext(); return T_BEGIN;
          }
        case 644: break;
        case 172: 
          { lexeme=yytext(); return T_FLOAT;
          }
        case 645: break;
        case 26: 
          { lexeme=yytext(); return T_DOUBLENUM;
          }
        case 646: break;
        case 259: 
          { lexeme=yytext(); return T_TRUNCATE;
          }
        case 647: break;
        case 188: 
          { lexeme=yytext(); return T_NULLIF;
          }
        case 648: break;
        case 12: 
          { lexeme=yytext(); return T_OPMENORQUE;
          }
        case 649: break;
        case 93: 
          { lexeme=yytext(); return T_THEN;
          }
        case 650: break;
        case 319: 
          { lexeme=yytext(); return T_FILLFACTOR;
          }
        case 651: break;
        case 262: 
          { lexeme=yytext(); return T_READTEXT;
          }
        case 652: break;
        case 77: 
          { lexeme=yytext(); return T_FOR;
          }
        case 653: break;
        case 299: 
          { lexeme=yytext(); return T_ISOLATION;
          }
        case 654: break;
        case 164: 
          { lexeme=yytext(); return T_WRITE;
          }
        case 655: break;
        case 106: 
          { lexeme=yytext(); return T_SAVE;
          }
        case 656: break;
        case 220: 
          { lexeme=yytext(); return T_NATURAL;
          }
        case 657: break;
        case 184: 
          { lexeme=yytext(); return T_EXISTS;
          }
        case 658: break;
        case 111: 
          { lexeme=yytext(); return T_CHAR;
          }
        case 659: break;
        case 96: 
          { lexeme=yytext(); return T_EXEC;
          }
        case 660: break;
        case 56: 
          { lexeme=yytext(); return T_AND;
          }
        case 661: break;
        case 105: 
          { lexeme=yytext(); return T_YEAR;
          }
        case 662: break;
        case 333: 
          { lexeme=yytext(); return T_NONCLUSTERED;
          }
        case 663: break;
        case 280: 
          { lexeme=yytext(); return T_PRESERVE;
          }
        case 664: break;
        case 256: 
          { lexeme=yytext(); return T_LANGUAGE;
          }
        case 665: break;
        case 72: 
          { lexeme=yytext(); return T_KEY;
          }
        case 666: break;
        case 302: 
          { lexeme=yytext(); return T_PROCEDURE;
          }
        case 667: break;
        case 168: 
          { lexeme=yytext(); return T_MERGE;
          }
        case 668: break;
        case 134: 
          { lexeme=yytext(); return T_LEVEL;
          }
        case 669: break;
        case 229: 
          { lexeme=yytext(); return T_CURRENT;
          }
        case 670: break;
        case 197: 
          { lexeme=yytext(); return T_UNIQUE;
          }
        case 671: break;
        case 129: 
          { lexeme=yytext(); return T_FROM;
          }
        case 672: break;
        case 83: 
          { lexeme=yytext(); return T_DUMP;
          }
        case 673: break;
        case 233: 
          { lexeme=yytext(); return T_COMPUTE;
          }
        case 674: break;
        case 257: 
          { lexeme=yytext(); return T_TEXTSIZE;
          }
        case 675: break;
        case 276: 
          { lexeme=yytext(); return T_HOLDLOCK;
          }
        case 676: break;
        case 98: 
          { lexeme=yytext(); return T_READ;
          }
        case 677: break;
        case 316: 
          { lexeme=yytext(); return T_OPENROWSET;
          }
        case 678: break;
        case 88: 
          { lexeme=yytext(); return T_LOAD;
          }
        case 679: break;
        case 114: 
          { lexeme=yytext(); return T_ONLY;
          }
        case 680: break;
        case 82: 
          { lexeme=yytext(); return T_DROP;
          }
        case 681: break;
        case 343: 
          { lexeme=yytext(); return T_CORRESPONDING;
          }
        case 682: break;
        case 342: 
          { lexeme=yytext(); return T_SECURITYAUDIT;
          }
        case 683: break;
        case 33: 
          { lexeme=yytext(); return T_OPMAYORIGUAL;
          }
        case 684: break;
        case 218: 
          { lexeme=yytext(); return T_EXECUTE;
          }
        case 685: break;
        case 121: 
          { lexeme=yytext(); return T_KILL;
          }
        case 686: break;
        case 347: 
          { lexeme=yytext(); return T_TIMEZONE_MINUTE;
          }
        case 687: break;
        case 85: 
          { lexeme=yytext(); return T_DBCC;
          }
        case 688: break;
        case 174: 
          { lexeme=yytext(); return T_FOUND;
          }
        case 689: break;
        case 42: 
          { lexeme=yytext(); return T_TO;
          }
        case 690: break;
        case 344: 
          { lexeme=yytext(); return T_CONTAINSTABLE;
          }
        case 691: break;
        case 246: 
          { lexeme=yytext(); return T_VARYING;
          }
        case 692: break;
        case 345: 
          { lexeme=yytext(); return T_FREETEXTTABLE;
          }
        case 693: break;
        case 18: 
          { lexeme=yytext(); return T_OPPUNTO;
          }
        case 694: break;
        case 31: 
          { lexeme=yytext(); return T_OPMENORIGUAL;
          }
        case 695: break;
        case 251: 
          { lexeme=yytext(); return T_ABSOLUTE;
          }
        case 696: break;
        case 175: 
          { lexeme=yytext(); return T_FIRST;
          }
        case 697: break;
        case 29: 
          { lexeme=yytext(); return T_COMENTARIOS;
          }
        case 698: break;
        case 295: 
          { lexeme=yytext(); return T_OPENQUERY;
          }
        case 699: break;
        case 294: 
          { lexeme=yytext(); return T_COLLATION;
          }
        case 700: break;
        case 248: 
          { lexeme=yytext(); return T_FORTRAN;
          }
        case 701: break;
        case 234: 
          { lexeme=yytext(); return T_UNKNOWN;
          }
        case 702: break;
        case 273: 
          { lexeme=yytext(); return T_COALESCE;
          }
        case 703: break;
        case 321: 
          { lexeme=yytext(); return T_DISTRIBUTED;
          }
        case 704: break;
        case 297: 
          { lexeme=yytext(); return T_INTERSECT;
          }
        case 705: break;
        case 238: 
          { lexeme=yytext(); return T_INTEGER;
          }
        case 706: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
